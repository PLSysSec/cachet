impl UInt16 {
    var max: UInt16 = 65535_u16;
}

impl Int16 {
    fn abs(n: Int16) -> Int16 {
        if n < 0_i16 {
            return -n;
        } else {
            return n;
        }
    }
}

impl Int32 {
    #[prelude]
    fn print(d: Int32) {}

    #[prelude]
    fn checkedAdd(x: Int32, y: Int32, out sum: Int32) -> Bool { false }

    fn abs(n: Int32) -> Int32 {
        if n < 0_i32 {
            return -n;
        } else {
            return n;
        }
    }

    fn max(a: Int32, b: Int32) -> Int32 {
        if a < b {
            return b;
        } else {
            return a;
        }
    }
}

impl UInt32 {
    #[prelude]
    fn print(n: UInt32) {}
}

impl Double {
    #[prelude]
    fn print(d: Double) {}

    #[prelude]
    var INFINITY: Double;

    #[prelude]
    var NEG_INFINITY: Double;

    #[prelude]
    fn isInfinite(i: Double) -> Bool;

    #[prelude]
    fn is_nan(i: Double) -> Bool;

    #[prelude]
    fn abs(i: Double) -> Double;

    #[prelude]
    fn bits(i: Double) -> UInt64;

    #[prelude]
    fn from_bits(i: UInt64) -> Double;

    #[prelude]
    fn ceil(i: Double) -> Double;
}
