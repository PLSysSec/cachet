---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Heap",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "name",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "N",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q0",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "entry",
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "Else",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Then",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "h",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "15",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "end",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Else",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "h",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "end",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "end",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "h",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q1",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "entry",
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "Else",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Then",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "h",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Neg(
                                            NegExpr {
                                                op: Arith,
                                                expr: Nat(
                                                    "15",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "end",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Else",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "h",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "end",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "end",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "h",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Neg(
                                            NegExpr {
                                                op: Arith,
                                                expr: Var(
                                                    "h",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "h",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P0",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "Heap",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "entry",
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "Else",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Then",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Heap",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "this",
                                                    ),
                                                    Var(
                                                        "N",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "15",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "end",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Else",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "this",
                                                                ),
                                                                Var(
                                                                    "N",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "end",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "end",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "this",
                                                                ),
                                                                Var(
                                                                    "N",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "Heap",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "entry",
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "Else",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Then",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Heap",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "this",
                                                    ),
                                                    Var(
                                                        "N",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Neg(
                                            NegExpr {
                                                op: Arith,
                                                expr: Nat(
                                                    "15",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "end",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Else",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "this",
                                                                ),
                                                                Var(
                                                                    "N",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "end",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "end",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Heap",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "this",
                                                    ),
                                                    Var(
                                                        "N",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Neg(
                                            NegExpr {
                                                op: Arith,
                                                expr: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "Heap",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "this",
                                                                    ),
                                                                    Var(
                                                                        "N",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "this",
                                                                ),
                                                                Var(
                                                                    "N",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "name",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
var Heap: [ref, name]int;

const N: name;

procedure Q0() {
  var h: int;

  entry:
  goto Else;
  Then:
  h := 15;
  goto end;
  Else:
  assume h == 0;
  goto end;
  end:
  assert 0 <= h;
  return;
}

procedure Q1() {
  var h: int;

  entry:
  goto Else;
  Then:
  h := -15;
  goto end;
  Else:
  assume h == 0;
  goto end;
  end:
  h := -h;
  assert 0 <= h;
  return;
}

procedure P0(this: ref)
  modifies Heap;
{
  entry:
  goto Else;
  Then:
  Heap[this, N] := 15;
  goto end;
  Else:
  assume Heap[this, N] == 0;
  goto end;
  end:
  assert 0 <= Heap[this, N];
  return;
}

procedure P1(this: ref)
  modifies Heap;
{
  entry:
  goto Else;
  Then:
  Heap[this, N] := -15;
  goto end;
  Else:
  assume Heap[this, N] == 0;
  goto end;
  end:
  Heap[this, N] := -Heap[this, N];
  assert 0 <= Heap[this, N];
  return;
}

type name,
  ref;

[Input - ../../vendor/boogie/Test/test2/B.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
// ----------- BEGIN PRELUDE

var Heap: [ref, name]int;
const N: name;

procedure Q0()
{
  var h: int;

  entry:
    goto Else;

  Then:
    h := 15;
    goto end;

  Else:
    assume h == 0;
    goto end;

  end:
    assert 0 <= h;
    return;
}

procedure Q1()
{
  var h: int;

  entry:
    goto Else;

  Then:
    h := -15;
    goto end;

  Else:
    assume h == 0;
    goto end;

  end:
    h := -h;
    assert 0 <= h;
    return;
}

procedure P0(this: ref)
  modifies Heap;
{
  entry:
    goto Else;

  Then:
    Heap[this, N] := 15;
    goto end;

  Else:
    assume Heap[this, N] == 0;
    goto end;

  end:
    assert 0 <= Heap[this, N];
    return;
}

procedure P1(this: ref)
  modifies Heap;
{
  entry:
    goto Else;

  Then:
    Heap[this, N] := -15;
    goto end;

  Else:
    assume Heap[this, N] == 0;
    goto end;

  end:
    Heap[this, N] := -Heap[this, N];
    assert 0 <= Heap[this, N];
    return;
}

type name, ref;
