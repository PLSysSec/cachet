---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "tid",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "addr",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "X",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "numMutators",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Nat(
                        "0",
                    ),
                    op: Lt,
                    rhs: Var(
                        "numMutators",
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "mutatorTid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "1",
                                ),
                                op: Le,
                                rhs: Var(
                                    "i",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "i",
                                ),
                                op: Le,
                                rhs: Var(
                                    "numMutators",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "GcTid",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "numMutators",
                    ),
                    op: Lt,
                    rhs: Var(
                        "GcTid",
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "mutatorOrGcTid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "1",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "i",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "i",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "numMutators",
                                        ),
                                    },
                                ),
                            },
                        ),
                        op: Or,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "i",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "GcTid",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "lockAddr",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Nat(
                        "0",
                    ),
                    op: Lt,
                    rhs: Var(
                        "lockAddr",
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "collectorPhaseAddr",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "lockAddr",
                    ),
                    op: Lt,
                    rhs: Var(
                        "collectorPhaseAddr",
                    ),
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Mem",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "StoreBufferVal",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "StoreBufferPresent",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "lock",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "collectorPhase",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "collectorPhaseDelayed",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "LockInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "StoreBufferPresent",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Bool,
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "StoreBufferVal",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "Mem",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "lock",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "collectorPhase",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "collectorPhaseDelayed",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Equiv(
                                                            EquivExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "Mem",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "lockAddr",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "lock",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Quant(
                                                            QuantExpr {
                                                                kind: ForAll,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "i",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Int,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: Implies(
                                                                        ImpliesExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "mutatorOrGcTid",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "i",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "StoreBufferPresent",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "i",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "lockAddr",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "StoreBufferVal",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "i",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "lockAddr",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: Nat(
                                                                                        "0",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: ForAll,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "i",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Implies(
                                                                ImpliesExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "mutatorOrGcTid",
                                                                            args: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    rhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "lock",
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: Var(
                                                                                        "i",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: Or,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "StoreBufferPresent",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "i",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "MapConst",
                                                                                            args: [
                                                                                                BoolLit(
                                                                                                    false,
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "Mem",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "collectorPhaseAddr",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "collectorPhase",
                                                        ),
                                                    },
                                                ),
                                                op: Or,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: Exists,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "i",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "mutatorOrGcTid",
                                                                            args: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "StoreBufferPresent",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "i",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "collectorPhaseAddr",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "i",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "mutatorOrGcTid",
                                                                    args: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "StoreBufferPresent",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "collectorPhaseAddr",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "StoreBufferVal",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "collectorPhaseAddr",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "collectorPhase",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "collectorPhaseDelayed",
                                ),
                                op: Eq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "Mem",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "collectorPhaseAddr",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldLock",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "LockInv",
                                args: [
                                    Var(
                                        "StoreBufferPresent",
                                    ),
                                    Var(
                                        "StoreBufferVal",
                                    ),
                                    Var(
                                        "Mem",
                                    ),
                                    Var(
                                        "lock",
                                    ),
                                    Var(
                                        "collectorPhase",
                                    ),
                                    Var(
                                        "collectorPhaseDelayed",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldStoreBufferLockAddrPresent",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Array(
                            ArrayExpr {
                                expr: Var(
                                    "StoreBufferPresent",
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "tid",
                                            ),
                                        ],
                                        value: None,
                                    },
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "lockAddr",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldStoreBufferLockAddrAbsent",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "StoreBufferPresent",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "lockAddr",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "right",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicLockAcquire",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "lock",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "mutatorOrGcTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "lock",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "lock",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "tid",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicLockAcquire",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldLock",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "LockAcquire",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "mutatorOrGcTid",
                                args: [
                                    Var(
                                        "tid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "status",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "yields",
                                                        params: [],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "yield_loop",
                                                        params: [
                                                            String(
                                                                StringLit {
                                                                    text: "YieldLock",
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "status",
                                                        ],
                                                        target: "LockCAS",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "status",
                                                        ),
                                                    ),
                                                    then: [
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicLockRelease",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "lock",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "mutatorOrGcTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "lock",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "tid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "lock",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicLockRelease",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldLock",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldStoreBufferLockAddrAbsent",
                                    },
                                ),
                                Expr(
                                    Var(
                                        "tid",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "LockRelease",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "mutatorOrGcTid",
                                args: [
                                    Var(
                                        "tid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "LockZero",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            ParCall(
                                ParCallCmd {
                                    attrs: [],
                                    calls: [
                                        CallParams {
                                            returns: [],
                                            target: "YieldLock",
                                            params: [],
                                        },
                                        CallParams {
                                            returns: [],
                                            target: "YieldStoreBufferLockAddrPresent",
                                            params: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "FlushStoreBufferEntryForLock",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicReadCollectorPhaseLocked",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "phase",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "mutatorOrGcTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "lock",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "tid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "phase",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "collectorPhase",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicReadCollectorPhaseLocked",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldLock",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "ReadCollectorPhaseLocked",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "phase",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "mutatorOrGcTid",
                                args: [
                                    Var(
                                        "tid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "phase",
                                        ],
                                        target: "PrimitiveRead",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                            Var(
                                                "collectorPhaseAddr",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicReadCollectorPhaseUnlocked",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "phase",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "mutatorOrGcTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "lock",
                                            ),
                                            op: Neq,
                                            rhs: Var(
                                                "tid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "phase",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "collectorPhaseDelayed",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicReadCollectorPhaseUnlocked",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldLock",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "ReadCollectorPhaseUnlocked",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "phase",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "mutatorOrGcTid",
                                args: [
                                    Var(
                                        "tid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "phase",
                                        ],
                                        target: "PrimitiveRead",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                            Var(
                                                "collectorPhaseAddr",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicSetCollectorPhase",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "phase",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "collectorPhase",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "mutatorOrGcTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "lock",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "tid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "collectorPhase",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "collectorPhaseDelayed",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "collectorPhase",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "phase",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicSetCollectorPhase",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldLock",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SetCollectorPhase",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "phase",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "mutatorOrGcTid",
                                args: [
                                    Var(
                                        "tid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "PrimitiveSetCollectorPhase",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                            Var(
                                                "phase",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicSyncCollectorPhase",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "collectorPhaseDelayed",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "collectorPhaseDelayed",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "collectorPhase",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicSyncCollectorPhase",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldLock",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SyncCollectorPhase",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "FlushStoreBufferEntryForCollectorPhase",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicBarrier",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "mutatorOrGcTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "lock",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "tid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "collectorPhase",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "collectorPhaseDelayed",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicBarrier",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldLock",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Barrier",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "mutatorOrGcTid",
                                args: [
                                    Var(
                                        "tid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "WaitForFlush",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicLockCAS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "status",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "Mem",
                            "lock",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "Mem",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "lockAddr",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Mem",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "lockAddr",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "lock",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "tid",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "status",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "status",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicLockCAS",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "LockCAS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "status",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicLockZero",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "StoreBufferPresent",
                            "StoreBufferVal",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "StoreBufferPresent",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "tid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "lockAddr",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "StoreBufferPresent",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "lockAddr",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "StoreBufferVal",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "lockAddr",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicLockZero",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "LockZero",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicFlushStoreBufferEntryForLock",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "Mem",
                            "StoreBufferPresent",
                            "lock",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "StoreBufferPresent",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "tid",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "lockAddr",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "StoreBufferPresent",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "tid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "MapConst",
                                                            args: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "lockAddr",
                                                                ),
                                                            ],
                                                            value: Some(
                                                                BoolLit(
                                                                    true,
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mem",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "lockAddr",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "StoreBufferVal",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "lockAddr",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "StoreBufferPresent",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "lockAddr",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "lock",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicFlushStoreBufferEntryForLock",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "FlushStoreBufferEntryForLock",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicPrimitiveRead",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "addr",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "StoreBufferPresent",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "addr",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "val",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "StoreBufferVal",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "tid",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "addr",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "val",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "Mem",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "addr",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicPrimitiveRead",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "PrimitiveRead",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "addr",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicPrimitiveSetCollectorPhase",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "phase",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "StoreBufferPresent",
                            "StoreBufferVal",
                            "collectorPhase",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "StoreBufferPresent",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "collectorPhaseAddr",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "StoreBufferVal",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "collectorPhaseAddr",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "phase",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "collectorPhase",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "phase",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicPrimitiveSetCollectorPhase",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "PrimitiveSetCollectorPhase",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "phase",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicFlushStoreBufferEntryForCollectorPhase",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "Mem",
                            "StoreBufferPresent",
                            "collectorPhaseDelayed",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "tid",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "mutatorOrGcTid",
                                                    args: [
                                                        Var(
                                                            "tid",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: And,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "StoreBufferPresent",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "tid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "collectorPhaseAddr",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Mem",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "collectorPhaseAddr",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "StoreBufferVal",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "collectorPhaseAddr",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "StoreBufferPresent",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "collectorPhaseAddr",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "collectorPhaseDelayed",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "Mem",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "collectorPhaseAddr",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicFlushStoreBufferEntryForCollectorPhase",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "FlushStoreBufferEntryForCollectorPhase",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicWaitForFlush",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "StoreBufferPresent",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "tid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "MapConst",
                                                    args: [
                                                        BoolLit(
                                                            false,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicWaitForFlush",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "WaitForFlush",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
]

[Printed]
type {:linear "tid", "addr"} X = int;

const numMutators: int;

axiom 0 < numMutators;

function {:inline} mutatorTid(i: int): bool {
  1 <= i && i <= numMutators
}

const GcTid: int;

axiom numMutators < GcTid;

function {:inline} mutatorOrGcTid(i: int): bool {
  (1 <= i && i <= numMutators) || i == GcTid
}

const lockAddr: int;

axiom 0 < lockAddr;

const collectorPhaseAddr: int;

axiom lockAddr < collectorPhaseAddr;

var {:layer 0, 1} Mem: [int]int;

var {:layer 0, 1} StoreBufferVal: [int][int]int;

var {:layer 0, 1} StoreBufferPresent: [int][int]bool;

var {:layer 0, 2} lock: int;

var {:layer 0, 2} collectorPhase: int;

var {:layer 0, 2} collectorPhaseDelayed: int;

function {:inline} LockInv(StoreBufferPresent: [int][int]bool, StoreBufferVal: [int][int]int, Mem: [int]int, lock: int, collectorPhase: int, collectorPhaseDelayed: int): bool {
  (Mem[lockAddr] == 0 <==> lock == 0) && (forall i: int :: mutatorOrGcTid(i) && StoreBufferPresent[i][lockAddr] ==> StoreBufferVal[i][lockAddr] == 0) && (forall i: int :: mutatorOrGcTid(i) ==> lock == i || StoreBufferPresent[i] == MapConst(false)) && (Mem[collectorPhaseAddr] == collectorPhase || (exists i: int :: mutatorOrGcTid(i) && StoreBufferPresent[i][collectorPhaseAddr])) && (forall i: int :: mutatorOrGcTid(i) && StoreBufferPresent[i][collectorPhaseAddr] ==> StoreBufferVal[i][collectorPhaseAddr] == collectorPhase) && collectorPhaseDelayed == Mem[collectorPhaseAddr]
}

procedure {:yield_invariant} {:layer 1} YieldLock();
  requires {:expand} LockInv(StoreBufferPresent, StoreBufferVal, Mem, lock, collectorPhase, collectorPhaseDelayed);

procedure {:yield_invariant} {:layer 1} YieldStoreBufferLockAddrPresent({:linear "tid"} tid: int);
  requires StoreBufferPresent[tid][lockAddr];

procedure {:yield_invariant} {:layer 1} YieldStoreBufferLockAddrAbsent({:linear "tid"} tid: int);
  requires !StoreBufferPresent[tid][lockAddr];

procedure {:right} {:layer 2} AtomicLockAcquire({:linear "tid"} tid: int)
  modifies lock;
{
  assert mutatorOrGcTid(tid);
  assume lock == 0;
  lock := tid;
}

procedure {:yields} {:layer 1} {:refines "AtomicLockAcquire"} {:yield_preserves "YieldLock"} LockAcquire({:linear "tid"} tid: int)
  requires {:layer 1} mutatorOrGcTid(tid);
{
  var status: bool;

  while (true)
    invariant {:yields} {:layer 1} {:yield_loop "YieldLock"} true;
  {
    call status := LockCAS(tid);
    if (status) {
      return;
    }
  }
}

procedure {:atomic} {:layer 2} AtomicLockRelease({:linear "tid"} tid: int)
  modifies lock;
{
  assert mutatorOrGcTid(tid);
  assert lock == tid;
  lock := 0;
}

procedure {:yields} {:layer 1} {:refines "AtomicLockRelease"} {:yield_preserves "YieldLock"} {:yield_preserves "YieldStoreBufferLockAddrAbsent", tid} LockRelease({:linear "tid"} tid: int)
  requires {:layer 1} mutatorOrGcTid(tid);
{
  call LockZero(tid);
  par YieldLock() | YieldStoreBufferLockAddrPresent(tid);
  call FlushStoreBufferEntryForLock(tid);
}

procedure {:atomic} {:layer 2} AtomicReadCollectorPhaseLocked({:linear "tid"} tid: int) returns (phase: int) {
  assert mutatorOrGcTid(tid);
  assert lock == tid;
  phase := collectorPhase;
}

procedure {:yields} {:layer 1} {:refines "AtomicReadCollectorPhaseLocked"} {:yield_preserves "YieldLock"} ReadCollectorPhaseLocked({:linear "tid"} tid: int) returns (phase: int)
  requires {:layer 1} mutatorOrGcTid(tid);
{
  call phase := PrimitiveRead(tid, collectorPhaseAddr);
}

procedure {:atomic} {:layer 2} AtomicReadCollectorPhaseUnlocked({:linear "tid"} tid: int) returns (phase: int) {
  assert mutatorOrGcTid(tid);
  assert lock != tid;
  phase := collectorPhaseDelayed;
}

procedure {:yields} {:layer 1} {:refines "AtomicReadCollectorPhaseUnlocked"} {:yield_preserves "YieldLock"} ReadCollectorPhaseUnlocked({:linear "tid"} tid: int) returns (phase: int)
  requires {:layer 1} mutatorOrGcTid(tid);
{
  call phase := PrimitiveRead(tid, collectorPhaseAddr);
}

procedure {:atomic} {:layer 2} AtomicSetCollectorPhase({:linear "tid"} tid: int, phase: int)
  modifies collectorPhase;
{
  assert mutatorOrGcTid(tid);
  assert lock == tid;
  assert collectorPhase == collectorPhaseDelayed;
  collectorPhase := phase;
}

procedure {:yields} {:layer 1} {:refines "AtomicSetCollectorPhase"} {:yield_preserves "YieldLock"} SetCollectorPhase({:linear "tid"} tid: int, phase: int)
  requires {:layer 1} mutatorOrGcTid(tid);
{
  call PrimitiveSetCollectorPhase(tid, phase);
}

procedure {:atomic} {:layer 2} AtomicSyncCollectorPhase({:linear "tid"} tid: int)
  modifies collectorPhaseDelayed;
{
  collectorPhaseDelayed := collectorPhase;
}

procedure {:yields} {:layer 1} {:refines "AtomicSyncCollectorPhase"} {:yield_preserves "YieldLock"} SyncCollectorPhase({:linear "tid"} tid: int) {
  call FlushStoreBufferEntryForCollectorPhase();
}

procedure {:atomic} {:layer 2} AtomicBarrier({:linear "tid"} tid: int) {
  assert mutatorOrGcTid(tid);
  assert lock == tid;
  assume collectorPhase == collectorPhaseDelayed;
}

procedure {:yields} {:layer 1} {:refines "AtomicBarrier"} {:yield_preserves "YieldLock"} Barrier({:linear "tid"} tid: int)
  requires {:layer 1} mutatorOrGcTid(tid);
{
  call WaitForFlush(tid);
}

procedure {:atomic} {:layer 1} AtomicLockCAS(tid: int) returns (status: bool)
  modifies Mem, lock;
{
  if (*) {
    assume Mem[lockAddr] == 0;
    Mem[lockAddr] := 1;
    lock := tid;
    status := true;
  } else {
    status := false;
  }
}

procedure {:yields} {:layer 0} {:refines "AtomicLockCAS"} LockCAS(tid: int) returns (status: bool);

procedure {:atomic} {:layer 1} AtomicLockZero(tid: int)
  modifies StoreBufferPresent, StoreBufferVal;
{
  assert !StoreBufferPresent[tid][lockAddr];
  StoreBufferPresent[tid][lockAddr] := true;
  StoreBufferVal[tid][lockAddr] := 0;
}

procedure {:yields} {:layer 0} {:refines "AtomicLockZero"} LockZero(tid: int);

procedure {:atomic} {:layer 1} AtomicFlushStoreBufferEntryForLock(tid: int)
  modifies Mem, StoreBufferPresent, lock;
{
  assert StoreBufferPresent[tid][lockAddr];
  assume StoreBufferPresent[tid] == MapConst(false)[lockAddr := true];
  Mem[lockAddr] := StoreBufferVal[tid][lockAddr];
  StoreBufferPresent[tid][lockAddr] := false;
  lock := 0;
}

procedure {:yields} {:layer 0} {:refines "AtomicFlushStoreBufferEntryForLock"} FlushStoreBufferEntryForLock(tid: int);

procedure {:atomic} {:layer 1} AtomicPrimitiveRead(tid: int, addr: int) returns (val: int) {
  if (StoreBufferPresent[tid][addr]) {
    val := StoreBufferVal[tid][addr];
  } else {
    val := Mem[addr];
  }
}

procedure {:yields} {:layer 0} {:refines "AtomicPrimitiveRead"} PrimitiveRead(tid: int, addr: int) returns (val: int);

procedure {:atomic} {:layer 1} AtomicPrimitiveSetCollectorPhase(tid: int, phase: int)
  modifies StoreBufferPresent, StoreBufferVal, collectorPhase;
{
  StoreBufferPresent[tid][collectorPhaseAddr] := true;
  StoreBufferVal[tid][collectorPhaseAddr] := phase;
  collectorPhase := phase;
}

procedure {:yields} {:layer 0} {:refines "AtomicPrimitiveSetCollectorPhase"} PrimitiveSetCollectorPhase(tid: int, phase: int);

procedure {:atomic} {:layer 1} AtomicFlushStoreBufferEntryForCollectorPhase()
  modifies Mem, StoreBufferPresent, collectorPhaseDelayed;
{
  var tid: int;

  assume mutatorOrGcTid(tid) && StoreBufferPresent[tid][collectorPhaseAddr];
  Mem[collectorPhaseAddr] := StoreBufferVal[tid][collectorPhaseAddr];
  StoreBufferPresent[tid][collectorPhaseAddr] := false;
  collectorPhaseDelayed := Mem[collectorPhaseAddr];
}

procedure {:yields} {:layer 0} {:refines "AtomicFlushStoreBufferEntryForCollectorPhase"} FlushStoreBufferEntryForCollectorPhase();

procedure {:atomic} {:layer 1} AtomicWaitForFlush(tid: int) {
  assume StoreBufferPresent[tid] == MapConst(false);
}

procedure {:yields} {:layer 0} {:refines "AtomicWaitForFlush"} WaitForFlush(tid: int);

[Input - ../../vendor/boogie/Test/civl/StoreBuffer.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
type {:linear "tid", "addr"} X = int;

const numMutators: int;
axiom 0 < numMutators;
function {:inline} mutatorTid(i: int) : bool { 1 <= i && i <= numMutators }

const GcTid: int;
axiom numMutators < GcTid;
function {:inline} mutatorOrGcTid(i: int) : bool { (1 <= i && i <= numMutators) || i == GcTid }

const lockAddr: int;
axiom 0 < lockAddr;
const collectorPhaseAddr: int;
axiom lockAddr < collectorPhaseAddr;

var {:layer 0,1} Mem: [int]int;
var {:layer 0,1} StoreBufferVal: [int][int]int;
var {:layer 0,1} StoreBufferPresent: [int][int]bool;

var {:layer 0,2} lock: int;
var {:layer 0,2} collectorPhase: int;
var {:layer 0,2} collectorPhaseDelayed: int;

function {:inline} LockInv(StoreBufferPresent:[int][int]bool, StoreBufferVal:[int][int]int, Mem:[int]int, lock:int, collectorPhase:int, collectorPhaseDelayed:int): bool
{
  (Mem[lockAddr] == 0 <==> lock == 0) &&
  (forall i:int :: mutatorOrGcTid(i) && StoreBufferPresent[i][lockAddr] ==> StoreBufferVal[i][lockAddr] == 0) &&
  (forall i:int :: mutatorOrGcTid(i) ==> lock == i || StoreBufferPresent[i] == MapConst(false)) &&
  (Mem[collectorPhaseAddr] == collectorPhase || (exists i:int :: mutatorOrGcTid(i) && StoreBufferPresent[i][collectorPhaseAddr])) &&
  (forall i:int :: mutatorOrGcTid(i) && StoreBufferPresent[i][collectorPhaseAddr] ==> StoreBufferVal[i][collectorPhaseAddr] == collectorPhase) &&
  collectorPhaseDelayed == Mem[collectorPhaseAddr]
}

// Layer 1
procedure {:yield_invariant} {:layer 1} YieldLock();
requires {:expand} LockInv(StoreBufferPresent, StoreBufferVal, Mem, lock, collectorPhase, collectorPhaseDelayed);

procedure {:yield_invariant} {:layer 1} YieldStoreBufferLockAddrPresent({:linear "tid"} tid:int);
requires StoreBufferPresent[tid][lockAddr];

procedure {:yield_invariant} {:layer 1} YieldStoreBufferLockAddrAbsent({:linear "tid"} tid:int);
requires !StoreBufferPresent[tid][lockAddr];

procedure {:right} {:layer 2} AtomicLockAcquire({:linear "tid"} tid: int)
modifies lock;
{ assert mutatorOrGcTid(tid); assume lock == 0; lock := tid; }

procedure {:yields} {:layer 1} {:refines "AtomicLockAcquire"}
{:yield_preserves "YieldLock"}
LockAcquire({:linear "tid"} tid: int)
requires {:layer 1} mutatorOrGcTid(tid);
{
    var status:bool;
    while (true)
    invariant {:yields} {:layer 1} {:yield_loop "YieldLock"} true;
    {
        call status := LockCAS(tid);
        if (status)
        {
            return;
        }
    }
}

procedure {:atomic} {:layer 2} AtomicLockRelease({:linear "tid"} tid:int)
modifies lock;
{ assert mutatorOrGcTid(tid); assert lock == tid; lock := 0; }

procedure {:yields} {:layer 1} {:refines "AtomicLockRelease"}
{:yield_preserves "YieldLock"}
{:yield_preserves "YieldStoreBufferLockAddrAbsent", tid}
LockRelease({:linear "tid"} tid:int)
requires {:layer 1} mutatorOrGcTid(tid);
{
    call LockZero(tid);
    par YieldLock() | YieldStoreBufferLockAddrPresent(tid);
    call FlushStoreBufferEntryForLock(tid);
}

procedure {:atomic} {:layer 2} AtomicReadCollectorPhaseLocked({:linear "tid"} tid: int) returns (phase: int)
{ assert mutatorOrGcTid(tid); assert lock == tid; phase := collectorPhase; }

procedure {:yields} {:layer 1} {:refines "AtomicReadCollectorPhaseLocked"}
{:yield_preserves "YieldLock"}
ReadCollectorPhaseLocked({:linear "tid"} tid: int) returns (phase: int)
requires {:layer 1} mutatorOrGcTid(tid);
{
    call phase := PrimitiveRead(tid, collectorPhaseAddr);
}

procedure {:atomic} {:layer 2} AtomicReadCollectorPhaseUnlocked({:linear "tid"} tid: int) returns (phase: int)
{ assert mutatorOrGcTid(tid); assert lock != tid; phase := collectorPhaseDelayed; }

procedure {:yields} {:layer 1} {:refines "AtomicReadCollectorPhaseUnlocked"}
{:yield_preserves "YieldLock"}
ReadCollectorPhaseUnlocked({:linear "tid"} tid: int) returns (phase: int)
requires {:layer 1} mutatorOrGcTid(tid);
{
    call phase := PrimitiveRead(tid, collectorPhaseAddr);
}

procedure {:atomic} {:layer 2} AtomicSetCollectorPhase({:linear "tid"} tid: int, phase: int)
modifies collectorPhase;
{ assert mutatorOrGcTid(tid); assert lock == tid; assert collectorPhase == collectorPhaseDelayed; collectorPhase := phase; }

procedure {:yields} {:layer 1} {:refines "AtomicSetCollectorPhase"}
{:yield_preserves "YieldLock"}
SetCollectorPhase({:linear "tid"} tid: int, phase: int)
requires {:layer 1} mutatorOrGcTid(tid);
{
    call PrimitiveSetCollectorPhase(tid, phase);
}

procedure {:atomic} {:layer 2} AtomicSyncCollectorPhase({:linear "tid"} tid: int)
modifies collectorPhaseDelayed;
{ collectorPhaseDelayed := collectorPhase; }

procedure {:yields} {:layer 1} {:refines "AtomicSyncCollectorPhase"}
{:yield_preserves "YieldLock"}
SyncCollectorPhase({:linear "tid"} tid: int)
{
    call FlushStoreBufferEntryForCollectorPhase();
}

procedure {:atomic} {:layer 2} AtomicBarrier({:linear "tid"} tid: int)
{ assert mutatorOrGcTid(tid); assert lock == tid; assume collectorPhase == collectorPhaseDelayed; }

procedure {:yields} {:layer 1} {:refines "AtomicBarrier"}
{:yield_preserves "YieldLock"}
Barrier({:linear "tid"} tid: int)
requires {:layer 1} mutatorOrGcTid(tid);
{
   call WaitForFlush(tid);
}

// Layer 0
procedure {:atomic} {:layer 1} AtomicLockCAS(tid: int) returns (status: bool)
modifies Mem, lock;
{
  if (*) {
    assume Mem[lockAddr] == 0;
    Mem[lockAddr] := 1;
    lock := tid;
    status := true;
  } else {
    status := false;
  }
}

procedure {:yields} {:layer 0} {:refines "AtomicLockCAS"} LockCAS(tid: int) returns (status: bool);

procedure {:atomic} {:layer 1} AtomicLockZero(tid: int)
modifies StoreBufferPresent, StoreBufferVal;
{ assert !StoreBufferPresent[tid][lockAddr]; StoreBufferPresent[tid][lockAddr] := true; StoreBufferVal[tid][lockAddr] := 0; }

procedure {:yields} {:layer 0} {:refines "AtomicLockZero"} LockZero(tid: int);

procedure {:atomic} {:layer 1} AtomicFlushStoreBufferEntryForLock(tid: int)
modifies Mem, StoreBufferPresent, lock;
{
  assert StoreBufferPresent[tid][lockAddr];
  assume StoreBufferPresent[tid] == MapConst(false)[lockAddr := true];
  Mem[lockAddr] := StoreBufferVal[tid][lockAddr];
  StoreBufferPresent[tid][lockAddr] := false;
  lock := 0;
}

procedure {:yields} {:layer 0} {:refines "AtomicFlushStoreBufferEntryForLock"} FlushStoreBufferEntryForLock(tid: int);

procedure {:atomic} {:layer 1} AtomicPrimitiveRead(tid: int, addr: int) returns (val: int)
{
  if (StoreBufferPresent[tid][addr]) {
    val := StoreBufferVal[tid][addr];
  } else {
    val := Mem[addr];
  }
}

procedure {:yields} {:layer 0} {:refines "AtomicPrimitiveRead"} PrimitiveRead(tid: int, addr: int) returns (val: int);

procedure {:atomic} {:layer 1} AtomicPrimitiveSetCollectorPhase(tid: int, phase:int)
modifies StoreBufferPresent, StoreBufferVal, collectorPhase;
{ StoreBufferPresent[tid][collectorPhaseAddr] := true; StoreBufferVal[tid][collectorPhaseAddr] := phase; collectorPhase := phase; }

procedure {:yields} {:layer 0} {:refines "AtomicPrimitiveSetCollectorPhase"} PrimitiveSetCollectorPhase(tid: int, phase:int);

procedure {:atomic} {:layer 1} AtomicFlushStoreBufferEntryForCollectorPhase()
modifies Mem, StoreBufferPresent, collectorPhaseDelayed;
{
  var tid:int;
  assume mutatorOrGcTid(tid) && StoreBufferPresent[tid][collectorPhaseAddr];
  Mem[collectorPhaseAddr] := StoreBufferVal[tid][collectorPhaseAddr];
  StoreBufferPresent[tid][collectorPhaseAddr] := false;
  collectorPhaseDelayed := Mem[collectorPhaseAddr];
}

procedure {:yields} {:layer 0} {:refines "AtomicFlushStoreBufferEntryForCollectorPhase"} FlushStoreBufferEntryForCollectorPhase();

procedure {:atomic} {:layer 1} AtomicWaitForFlush(tid: int)
{ assume StoreBufferPresent[tid] == MapConst(false); }

procedure {:yields} {:layer 0} {:refines "AtomicWaitForFlush"} WaitForFlush(tid: int);
