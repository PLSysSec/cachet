---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Vec",
                    type_params: [
                        "T",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Vec#Empty",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Vec#Unit",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Vec#Concat",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Vec#Extract",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pos",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "len",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Vec#Update",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pos",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Vec#Len",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Vec#Select",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pos",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Vec#IsEqual",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "ctor",
                        params: [
                            String(
                                StringLit {
                                    text: "Vec",
                                },
                            ),
                        ],
                    },
                ),
            ],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "U",
                        ],
                        bound_vars: [],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec#Len",
                                        args: [
                                            Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "Vec#Empty",
                                                            args: [],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "Vec",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "U",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "ctor",
                        params: [
                            String(
                                StringLit {
                                    text: "Vec",
                                },
                            ),
                        ],
                    },
                ),
            ],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "U",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "e",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "U",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec#Len",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Vec#Unit",
                                                    args: [
                                                        Var(
                                                            "e",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "1",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Set",
                    type_params: [
                        "T",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Empty",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Unit",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Add",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Remove",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Union",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Intersection",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Difference",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Size",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Contains",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#IsEqual",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "ctor",
                        params: [
                            String(
                                StringLit {
                                    text: "Set",
                                },
                            ),
                        ],
                    },
                ),
            ],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "U",
                        ],
                        bound_vars: [],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Size",
                                        args: [
                                            Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "Set#Empty",
                                                            args: [],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "Set",
                                                                    tail: Some(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "U",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "ctor",
                        params: [
                            String(
                                StringLit {
                                    text: "Set",
                                },
                            ),
                        ],
                    },
                ),
            ],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "U",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "e",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "U",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Size",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Set#Unit",
                                                    args: [
                                                        Var(
                                                            "e",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "1",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "empty_vec",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec#Len",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec#Empty",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "unit_vec",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec#Len",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "1",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec#Unit",
                                                args: [
                                                    Var(
                                                        "e",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "empty_set",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Set",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Size",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Set#Empty",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "unit_set",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Set",
                                        tail: Some(
                                            AtomApp(
                                                TypeApp {
                                                    head: Int,
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Size",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "1",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Set#Unit",
                                                args: [
                                                    Var(
                                                        "e",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "K",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "empty_vec_k",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "K",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Vec#Len",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Vec#Empty",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "empty_set_k",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Set",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "K",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Set#Size",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Set#Empty",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
type Vec T;

function Vec#Empty<T>(): Vec T;

function Vec#Unit<T>(t: T): Vec T;

function Vec#Concat<T>(s1: Vec T, s2: Vec T): Vec T;

function Vec#Extract<T>(s: Vec T, pos: int, len: int): Vec T;

function Vec#Update<T>(s: Vec T, pos: int, t: T): Vec T;

function Vec#Len<T>(s: Vec T): int;

function Vec#Select<T>(s: Vec T, pos: int): T;

function Vec#IsEqual<T>(s1: Vec T, s2: Vec T): bool;

axiom {:ctor "Vec"} (forall <U> :: Vec#Len(Vec#Empty() : Vec U) == 0);

axiom {:ctor "Vec"} (forall <U> e: U :: Vec#Len(Vec#Unit(e)) == 1);

type Set T;

function Set#Empty<T>(): Set T;

function Set#Unit<T>(t: T): Set T;

function Set#Add<T>(s: Set T, t: T): Set T;

function Set#Remove<T>(s: Set T, t: T): Set T;

function Set#Union<T>(s1: Set T, s2: Set T): Set T;

function Set#Intersection<T>(s1: Set T, s2: Set T): Set T;

function Set#Difference<T>(s1: Set T, s2: Set T): Set T;

function Set#Size<T>(s: Set T): int;

function Set#Contains<T>(s: Set T, t: T): bool;

function Set#IsEqual<T>(s1: Set T, s2: Set T): bool;

axiom {:ctor "Set"} (forall <U> :: Set#Size(Set#Empty() : Set U) == 0);

axiom {:ctor "Set"} (forall <U> e: U :: Set#Size(Set#Unit(e)) == 1);

procedure empty_vec() returns (v: Vec int)
  ensures Vec#Len(v) == 0;
{
  v := Vec#Empty();
}

procedure unit_vec(e: int) returns (v: Vec int)
  ensures Vec#Len(v) == 1;
{
  v := Vec#Unit(e);
}

procedure empty_set() returns (v: Set int)
  ensures Set#Size(v) == 0;
{
  v := Set#Empty();
}

procedure unit_set(e: int) returns (v: Set int)
  ensures Set#Size(v) == 1;
{
  v := Set#Unit(e);
}

type K;

procedure empty_vec_k() returns (v: Vec K)
  ensures Vec#Len(v) == 0;
{
  v := Vec#Empty();
}

procedure empty_set_k() returns (v: Set K)
  ensures Set#Size(v) == 0;
{
  v := Set#Empty();
}

[Input - ../../vendor/boogie/Test/monomorphize/monomorphize2.bpl]
// RUN: %boogie -monomorphize "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type Vec T;
function Vec#Empty<T>(): Vec T;
function Vec#Unit<T>(t: T): Vec T;
function Vec#Concat<T>(s1: Vec T, s2: Vec T): Vec T;
function Vec#Extract<T>(s: Vec T, pos: int, len: int): Vec T;
function Vec#Update<T>(s: Vec T, pos: int, t: T): Vec T;
function Vec#Len<T>(s: Vec T): int;
function Vec#Select<T>(s: Vec T, pos: int): T;
function Vec#IsEqual<T>(s1: Vec T, s2: Vec T): bool;
axiom {:ctor "Vec"} (forall<U> :: Vec#Len(Vec#Empty() : Vec U) == 0);
axiom {:ctor "Vec"} (forall<U> e: U :: Vec#Len(Vec#Unit(e)) == 1);

type Set T;
function Set#Empty<T>(): Set T;
function Set#Unit<T>(t: T): Set T;
function Set#Add<T>(s: Set T, t: T): Set T;
function Set#Remove<T>(s: Set T, t: T): Set T;
function Set#Union<T>(s1: Set T, s2: Set T): Set T;
function Set#Intersection<T>(s1: Set T, s2: Set T): Set T;
function Set#Difference<T>(s1: Set T, s2: Set T): Set T;
function Set#Size<T>(s: Set T): int;
function Set#Contains<T>(s: Set T, t: T): bool;
function Set#IsEqual<T>(s1: Set T, s2: Set T): bool;
axiom {:ctor "Set"} (forall<U> :: Set#Size(Set#Empty() : Set U) == 0);
axiom {:ctor "Set"} (forall<U> e: U :: Set#Size(Set#Unit(e)) == 1);

procedure empty_vec() returns (v: Vec int)
ensures Vec#Len(v) == 0;
{
    v := Vec#Empty();
}

procedure unit_vec(e: int) returns (v: Vec int)
ensures Vec#Len(v) == 1;
{
    v := Vec#Unit(e);
}

procedure empty_set() returns (v: Set int)
ensures Set#Size(v) == 0;
{
    v := Set#Empty();
}

procedure unit_set(e: int) returns (v: Set int)
ensures Set#Size(v) == 1;
{
    v := Set#Unit(e);
}

type K;

procedure empty_vec_k() returns (v: Vec K)
ensures Vec#Len(v) == 0;
{
    v := Vec#Empty();
}

procedure empty_set_k() returns (v: Set K)
ensures Set#Size(v) == 0;
{
    v := Set#Empty();
}
