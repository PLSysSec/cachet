---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [],
            ident: "f",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "j",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: Some(
                IfThenElse(
                    IfThenElseExpr {
                        cond: Rel(
                            RelExpr {
                                lhs: Var(
                                    "i",
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        then: Nat(
                            "0",
                        ),
                        else_: Term(
                            Term {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Term(
                                                Term {
                                                    lhs: Var(
                                                        "i",
                                                    ),
                                                    op: Sub,
                                                    rhs: Nat(
                                                        "1",
                                                    ),
                                                },
                                            ),
                                            Term(
                                                Term {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Mul,
                                                            rhs: Var(
                                                                "j",
                                                            ),
                                                        },
                                                    ),
                                                    op: Add,
                                                    rhs: Nat(
                                                        "1",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Add,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Term(
                                                Term {
                                                    lhs: Var(
                                                        "i",
                                                    ),
                                                    op: Sub,
                                                    rhs: Nat(
                                                        "1",
                                                    ),
                                                },
                                            ),
                                            Factor(
                                                Factor {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Nat(
                                                                "2",
                                                            ),
                                                            op: Mul,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: Mul,
                                                    rhs: Var(
                                                        "j",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test0",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Term(
                                                Term {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Sub,
                                                    rhs: Var(
                                                        "x",
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "rlimit",
                            params: [
                                Expr(
                                    Nat(
                                        "100000000",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "test1",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Nat(
                                                            "13",
                                                        ),
                                                        Nat(
                                                            "5",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
function f(i: int, j: int): int {
  if i == 0 then 0 else f(i - 1, i * j + 1) + f(i - 1, 2 * i * j)
}

procedure test0(x: int) {
  assert x - x == 0;
}

procedure {:rlimit 100000000} test1() {
  assert f(13, 5) == 0;
}

[Input - ../../vendor/boogie/Test/test2/git-issue-366.bpl]
// RUN: %boogie -rlimit:5 /proverOpt:O:smt.qi.eager_threshold=100 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

function f(i:int, j:int) returns (int)
{
    if i == 0 then 0 else f(i - 1, i * j + 1) + f(i - 1, 2 * i * j)
}

procedure test0(x:int)
{
    assert(x - x == 0);
}

procedure {:rlimit 100000000} test1()
{
    assert(f(13,5) == 0);
}
