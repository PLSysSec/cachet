---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.Mem",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "name",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.alloc",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.Mem_T.INT4",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.Mem_T.op1__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.Mem_T.op2__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.Mem_T.oper__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.Mem_T.result__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.detChoiceCnt",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.Res_KERNEL_SOURCE",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.Res_PROBED",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v4.isUnsigned",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.oper__EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.op1__EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.op2__EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.result__EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.INT4",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.PINT4",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.PPINT4",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.PP_EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T.P_EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.T._EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->op2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "23",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_9",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "24",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_10",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "op",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "26",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_11",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "41",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_12",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->op1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "22",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_6",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "23",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_7",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "23",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_8",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->oper",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "21",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_3",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "op",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "21",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_1",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "21",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_2",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->result",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "41",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_13",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "41",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_14",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "isUnsigned",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "29",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_15",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "isUnsigned",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "35",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_16",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "38",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_17",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "38",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_18",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "38",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_19",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "36",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_20",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "36",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_21",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "36",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_22",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "36",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_23",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "36",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_24",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "result.UnsignedSub",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "36",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_25",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "32",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_26",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "32",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_27",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "32",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_28",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "30",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_29",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "30",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_30",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "30",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_31",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "30",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_32",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "30",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_33",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "result.UnsignedAdd",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "30",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_34",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "isUnsigned",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "47",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_35",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "22",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_4",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "22",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_5",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "48",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_36",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "48",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_37",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "outval",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "49",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_38",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "*outval",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "49",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_39",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "49",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_40",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->result",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "49",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_41",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "isUnsigned",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "54",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_42",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "55",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_43",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "55",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v4.__ctobpl_const_44",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.OneByteToInt",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: App(
                        TypeApp {
                            head: "byte",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.TwoBytesToInt",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: App(
                        TypeApp {
                            head: "byte",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "byte",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.FourBytesToInt",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: App(
                        TypeApp {
                            head: "byte",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "byte",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "byte",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: App(
                        TypeApp {
                            head: "byte",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Field",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Base",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Match",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.MatchBase",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.HasType",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.T.Ptr",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.op1__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.op1__EXPRInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4._S_op1__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4._S_op1__EXPRInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.op2__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.op2__EXPRInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4._S_op2__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4._S_op2__EXPRInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.oper__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.oper__EXPRInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4._S_oper__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4._S_oper__EXPRInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.result__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.result__EXPRInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4._S_result__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4._S_result__EXPRInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_EQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_NEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_ADD",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_SUB",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_MULT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_DIV",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_LT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_ULT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_LEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_ULEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_GT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_UGT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_GEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.INT_UGEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.BV32_EQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.BV32_NEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvadd",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_ADD",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "bv32",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvsub",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_SUB",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "bv32",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvmul",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_MULT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "bv32",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvudiv",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_DIV",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "bv32",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvult",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_ULT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvslt",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_LT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvule",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_ULEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvsle",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_LEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvugt",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_UGT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvsgt",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_GT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvuge",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_UGEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "bvbuiltin",
                        params: [
                            String(
                                StringLit {
                                    text: "bvsge",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "v4.BV32_GEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: App(
                        TypeApp {
                            head: "bv32",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "size",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.MINUS_LEFT_PTR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a_size",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.PLUS",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a_size",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.MULT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.DIV",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.BINARY_BOTH_INT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.POW2",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.BIT_BAND",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.BIT_BOR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.BIT_BXOR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.BIT_BNOT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.choose",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "c",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.LIFT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.PTR_NOT",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.NULL_CHECK",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.NewAlloc",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.DetChoiceFunc",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Equal",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Subset",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Disjoint",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Empty",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.SetTrue",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Singleton",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Reachable",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Union",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Intersection",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Difference",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Dereference",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Inverse",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.AtLeast",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Rep",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Array",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.Unified",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "v4.value_is",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "c",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "e",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.OneByteToInt",
                                            args: [
                                                Var(
                                                    "b0",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.OneByteToInt",
                                            args: [
                                                Var(
                                                    "c0",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.OneByteToInt",
                                                args: [
                                                    Var(
                                                        "b0",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.OneByteToInt",
                                                args: [
                                                    Var(
                                                        "c0",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "b0",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "c0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.TwoBytesToInt",
                                            args: [
                                                Var(
                                                    "b0",
                                                ),
                                                Var(
                                                    "b1",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.TwoBytesToInt",
                                            args: [
                                                Var(
                                                    "c0",
                                                ),
                                                Var(
                                                    "c1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.TwoBytesToInt",
                                                args: [
                                                    Var(
                                                        "b0",
                                                    ),
                                                    Var(
                                                        "b1",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.TwoBytesToInt",
                                                args: [
                                                    Var(
                                                        "c0",
                                                    ),
                                                    Var(
                                                        "c1",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b0",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "c0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b1",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "c1",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b3",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c3",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.FourBytesToInt",
                                            args: [
                                                Var(
                                                    "b0",
                                                ),
                                                Var(
                                                    "b1",
                                                ),
                                                Var(
                                                    "b2",
                                                ),
                                                Var(
                                                    "b3",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.FourBytesToInt",
                                            args: [
                                                Var(
                                                    "c0",
                                                ),
                                                Var(
                                                    "c1",
                                                ),
                                                Var(
                                                    "c2",
                                                ),
                                                Var(
                                                    "c3",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.FourBytesToInt",
                                                args: [
                                                    Var(
                                                        "b0",
                                                    ),
                                                    Var(
                                                        "b1",
                                                    ),
                                                    Var(
                                                        "b2",
                                                    ),
                                                    Var(
                                                        "b3",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.FourBytesToInt",
                                                args: [
                                                    Var(
                                                        "c0",
                                                    ),
                                                    Var(
                                                        "c1",
                                                    ),
                                                    Var(
                                                        "c2",
                                                    ),
                                                    Var(
                                                        "c3",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "b0",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "c0",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "b1",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "c1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "b2",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "c2",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b3",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "c3",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Base",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "v4.INT_LEQ",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Base",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    Var(
                                        "x",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Match",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.T.Ptr",
                                                        args: [
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Match",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.T.Ptr",
                                                    args: [
                                                        Var(
                                                            "t",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Field",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.T.Ptr",
                                                args: [
                                                    Var(
                                                        "t",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MatchBase",
                                            args: [
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.T.Ptr",
                                                        args: [
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.MatchBase",
                                        args: [
                                            Var(
                                                "b",
                                            ),
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.T.Ptr",
                                                    args: [
                                                        Var(
                                                            "t",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Base",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.HasType",
                                            args: [
                                                Var(
                                                    "v",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.T.Ptr",
                                                        args: [
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.HasType",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.T.Ptr",
                                                    args: [
                                                        Var(
                                                            "t",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "v",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.INT_GT",
                                                                args: [
                                                                    Var(
                                                                        "v",
                                                                    ),
                                                                    Nat(
                                                                        "0",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.Match",
                                                                args: [
                                                                    Var(
                                                                        "v",
                                                                    ),
                                                                    Var(
                                                                        "t",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.MatchBase",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "v4.Base",
                                                                    args: [
                                                                        Var(
                                                                            "v",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            Var(
                                                                "v",
                                                            ),
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_op1__EXPR",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op1__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op1__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_op1__EXPRInv",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op1__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op1__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_op1__EXPR",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op1__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op1__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_op1__EXPRInv",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op1__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op1__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op1__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op1__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "4",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op1__EXPRInv",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op1__EXPRInv",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "4",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op1__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op1__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                            Nat(
                                                "4",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_op2__EXPR",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op2__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op2__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_op2__EXPRInv",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op2__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op2__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_op2__EXPR",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op2__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op2__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_op2__EXPRInv",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op2__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op2__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op2__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op2__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "8",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op2__EXPRInv",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op2__EXPRInv",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "8",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op2__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op2__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                            Nat(
                                                "8",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_oper__EXPR",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_oper__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.oper__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_oper__EXPRInv",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_oper__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.oper__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_oper__EXPR",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_oper__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.oper__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_oper__EXPRInv",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_oper__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.oper__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.oper__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.oper__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.oper__EXPRInv",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.oper__EXPRInv",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.oper__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.oper__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_result__EXPR",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_result__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.result__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_result__EXPRInv",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_result__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.result__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_result__EXPR",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_result__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.result__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_result__EXPRInv",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_result__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.result__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.result__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.result__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "12",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.result__EXPRInv",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.result__EXPRInv",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "12",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.result__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.result__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                            Nat(
                                                "12",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_EQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_EQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_NEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_NEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_ADD",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Int,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_ADD",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Int,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Add,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_SUB",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Int,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_SUB",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Int,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Sub,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Int,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_MULT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Int,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Factor(
                                    Factor {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Mul,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_DIV",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Int,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_DIV",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Int,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Factor(
                                    Factor {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Div,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_LT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_LT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_ULT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_ULT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_LEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_LEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_ULEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_ULEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_GT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_GT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Gt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_UGT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_UGT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Gt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_GEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_GEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_UGEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_UGEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.BV32_EQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.BV32_EQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.BV32_NEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.BV32_NEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "size",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "size",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LEQ",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "size",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                    Var(
                                                                        "size",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_SUB",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: And,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_SUB",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "size",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.INT_ADD",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                                                            args: [
                                                                                Var(
                                                                                    "a",
                                                                                ),
                                                                                Var(
                                                                                    "b",
                                                                                ),
                                                                                Var(
                                                                                    "size",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    Nat(
                                                                        "1",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "size",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "size",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a_size",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_LEFT_PTR",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "a_size",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.MINUS_LEFT_PTR",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "a_size",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "a_size",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a_size",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PLUS",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "a_size",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "a_size",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "a_size",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MULT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.MULT",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_MULT",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.DIV",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Ge,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Gt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.DIV",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.DIV",
                                                                        args: [
                                                                            Var(
                                                                                "a",
                                                                            ),
                                                                            Var(
                                                                                "b",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.DIV",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Ge,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.DIV",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.DIV",
                                                                        args: [
                                                                            Var(
                                                                                "a",
                                                                            ),
                                                                            Var(
                                                                                "b",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.DIV",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Gt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.DIV",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Ge,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Gt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.DIV",
                                                                        args: [
                                                                            Var(
                                                                                "a",
                                                                            ),
                                                                            Var(
                                                                                "b",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.DIV",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.DIV",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Ge,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Gt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.DIV",
                                                                        args: [
                                                                            Var(
                                                                                "a",
                                                                            ),
                                                                            Var(
                                                                                "b",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "1",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "2",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "4",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "8",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "16",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "32",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "64",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "128",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "256",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "512",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "1024",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "2048",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "4096",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "8192",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "16384",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "32768",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "65536",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "131072",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "262144",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "524288",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "1048576",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "2097152",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "4194304",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "8388608",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "16777216",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "33554432",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.BIT_BAND",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.BIT_BAND",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "a",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.BIT_BAND",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.POW2",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.POW2",
                                                        args: [
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "b",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.BIT_BAND",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.BIT_BAND",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.BIT_BAND",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.choose",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "c",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "a",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.choose",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                    Var(
                                                        "c",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.choose",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "c",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Var(
                                            "a",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.choose",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                    Var(
                                                        "c",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "c",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.LIFT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Var(
                                    "a",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.LIFT",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PTR_NOT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.PTR_NOT",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PTR_NOT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.PTR_NOT",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.NULL_CHECK",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.NULL_CHECK",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.NULL_CHECK",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.NULL_CHECK",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.AtLeast",
                                                    args: [
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.AtLeast",
                                                args: [
                                                    Var(
                                                        "n",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_LEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Rep",
                                                        args: [
                                                            Var(
                                                                "n",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Rep",
                                                        args: [
                                                            Var(
                                                                "n",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.AtLeast",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Rep",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Rep",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_LEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Rep",
                                                        args: [
                                                            Var(
                                                                "n",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Rep",
                                                        args: [
                                                            Var(
                                                                "n",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.AtLeast",
                                                args: [
                                                    Var(
                                                        "n",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.AtLeast",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "v4.AtLeast",
                                        args: [
                                            Var(
                                                "n",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PLUS",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Rep",
                                        args: [
                                            Var(
                                                "n",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Rep",
                                        args: [
                                            Var(
                                                "n",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.PLUS",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Rep",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Quant(
                            QuantExpr {
                                kind: Exists,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "k",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_SUB",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Rep",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "k",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Array",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LEQ",
                                        args: [
                                            Var(
                                                "z",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Array",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Empty",
                                                    args: [],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Array",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_GT",
                                        args: [
                                            Var(
                                                "z",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Array",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Difference",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.AtLeast",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.AtLeast",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.PLUS",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "n",
                                                                                ),
                                                                                Var(
                                                                                    "z",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Empty",
                                                args: [],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "v4.SetTrue",
                                        args: [],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Singleton",
                                                    args: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Singleton",
                                                args: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Singleton",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "v4.Singleton",
                                        args: [
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "y",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Union",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Union",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Union",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Union",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Or,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "T",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Intersection",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Intersection",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Intersection",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Intersection",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "T",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Difference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Difference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Difference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Difference",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "T",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Equal",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            Var(
                                                "S",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Subset",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Subset",
                                                args: [
                                                    Var(
                                                        "T",
                                                    ),
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Subset",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "T",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Subset",
                                        args: [
                                            Var(
                                                "S",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                op: Or,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "S",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "T",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Disjoint",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Disjoint",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "S",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Disjoint",
                                                        args: [
                                                            Var(
                                                                "S",
                                                            ),
                                                            Var(
                                                                "T",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "T",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Disjoint",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Disjoint",
                                        args: [
                                            Var(
                                                "S",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                op: Or,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "S",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "T",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "v4.Inverse",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "f",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "f",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Inverse",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "f",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "v4.Equal",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Union",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.Inverse",
                                                        args: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.Singleton",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "y",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "z",
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Inverse",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "f",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "y",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Difference",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Inverse",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "z",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Singleton",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "M",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Dereference",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "y",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "M",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "y",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "S",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "y",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "M",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Dereference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "M",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Dereference",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "M",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Dereference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "M",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "y",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "M",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Dereference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Equal",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.Intersection",
                                                            args: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.Inverse",
                                                                        args: [
                                                                            Var(
                                                                                "M",
                                                                            ),
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "M",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                Var(
                                                                    "S",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.Singleton",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "M",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "y",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Union",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Difference",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.Dereference",
                                                                            args: [
                                                                                Var(
                                                                                    "S",
                                                                                ),
                                                                                Var(
                                                                                    "M",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.Singleton",
                                                                            args: [
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "M",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Singleton",
                                                                args: [
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Dereference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Equal",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "v4.Intersection",
                                                                    args: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "v4.Inverse",
                                                                                args: [
                                                                                    Var(
                                                                                        "M",
                                                                                    ),
                                                                                    Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "M",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "x",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        Var(
                                                                            "S",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "v4.Singleton",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "M",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "y",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Union",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Dereference",
                                                                args: [
                                                                    Var(
                                                                        "S",
                                                                    ),
                                                                    Var(
                                                                        "M",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Singleton",
                                                                args: [
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Map(
                                                    MapType {
                                                        type_params: [],
                                                        keys: [
                                                            Atom(
                                                                Int,
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Unified",
                                                    args: [
                                                        Var(
                                                            "M",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Unified",
                                                args: [
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "M",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.Field",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Map(
                                                    MapType {
                                                        type_params: [],
                                                        keys: [
                                                            Atom(
                                                                Int,
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Unified",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.Field",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "M",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "v4.Field",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                    ],
                                                                                    value: Some(
                                                                                        Var(
                                                                                            "y",
                                                                                        ),
                                                                                    ),
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Unified",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "M",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.Field",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: Some(
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "M",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "v4.Field",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                                value: Some(
                                                                                    Var(
                                                                                        "y",
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Unified",
                                                args: [
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: Some(
                                                    Var(
                                                        "y",
                                                    ),
                                                ),
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.havoc_assert",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.havoc_assume",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.__HAVOC_free",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.__HAVOC_malloc",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "obj_size",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "new",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "new",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_malloc_new",
                                        args: [
                                            Var(
                                                "obj_size",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.__HAVOC_det_malloc",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "obj_size",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "new",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "new",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_det_malloc_new",
                                        args: [
                                            Var(
                                                "obj_size",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.__HAVOC_memset_split_1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "A",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "c",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_memset_split_1_ret",
                                        args: [
                                            Var(
                                                "A",
                                            ),
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "c",
                                            ),
                                            Var(
                                                "n",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.__HAVOC_memset_split_2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "A",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "c",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_memset_split_2_ret",
                                        args: [
                                            Var(
                                                "A",
                                            ),
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "c",
                                            ),
                                            Var(
                                                "n",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.__HAVOC_memset_split_4",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "A",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "c",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_memset_split_4_ret",
                                        args: [
                                            Var(
                                                "A",
                                            ),
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "c",
                                            ),
                                            Var(
                                                "n",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.nondet_choice",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.nondet_choice_x",
                                        args: [],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.det_choice",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.det_choice_x",
                                        args: [],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4._strdup",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "str",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "new",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "new",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4._strdup_new",
                                        args: [
                                            Var(
                                                "str",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4._xstrcasecmp",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a0",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4._xstrcasecmp_ret",
                                        args: [
                                            Var(
                                                "a0",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4._xstrcmp",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a0",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4._xstrcmp_ret",
                                        args: [
                                            Var(
                                                "a0",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.UnsignedAdd",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a0",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.UnsignedSub",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a0",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "inline",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "v4.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.Mem_T.result__EXPR",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.Mem_T.result__EXPR",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.Eval_v4.Mem_T.result__EXPR",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.EvalEntry1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outval_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.isUnsigned",
                            "v4.Mem_T.result__EXPR",
                            "v4.Mem_T.INT4",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.isUnsigned",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.EvalEntry1_v4.isUnsigned",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "outval_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.INT4",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.Mem_T.result__EXPR",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.EvalEntry1_v4.Mem_T.result__EXPR",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "outval_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.INT4",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.Mem_T.INT4",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.EvalEntry1_v4.Mem_T.INT4",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "outval_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.INT4",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.EvalEntry2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.isUnsigned",
                            "v4.Mem_T.result__EXPR",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.isUnsigned",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.EvalEntry2_v4.isUnsigned",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.Mem_T.result__EXPR",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.EvalEntry2_v4.Mem_T.result__EXPR",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.__havoc_heapglobal_init",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "inline",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "v4.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "havoc_stringTemp",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "condVal",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "a1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "a2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "e",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "op",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "res",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "result.UnsignedAdd$1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "result.UnsignedSub$2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie4",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie5",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie6",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie7",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie8",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie9",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie10",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie11",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie12",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie13",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie14",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie15",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie16",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie17",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie18",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie19",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "__havoc_dummy_return",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "havoc_stringTemp",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "start#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "op",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "result.UnsignedAdd$1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "result.UnsignedSub$2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_3#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_3#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_4#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_4#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_5#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_5#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_6#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_6#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_7#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_7#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "21",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "op",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.oper__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.oper__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_1",
                                            ),
                                            Var(
                                                "op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_2",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_3",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.oper__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_8#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_8#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "22",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.op1__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.op1__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_4",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_5",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_6",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.op1__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_9#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_9#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "23",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.op2__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.op2__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_7",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_8",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_9",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.op2__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_10#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_10#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "24",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_10",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_11#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_11#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "26",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_11_case_0#2",
                                    "label_11_case_1#2",
                                    "label_11_case_2#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_11_case_2#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_EQ",
                                        args: [
                                            Var(
                                                "op",
                                            ),
                                            Nat(
                                                "2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_14#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_14#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "35",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_14_true#2",
                                    "label_14_false#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_14_false#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v4.isUnsigned",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_16",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_15#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_15#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "38",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                            args: [
                                                Var(
                                                    "a1",
                                                ),
                                                Var(
                                                    "a2",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_17",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_18",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_19",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_14_true#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v4.isUnsigned",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_16",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_16#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_16#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "36",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "result.UnsignedSub$2",
                                    ],
                                    target: "v4.UnsignedSub",
                                    params: [
                                        Var(
                                            "a1",
                                        ),
                                        Var(
                                            "a2",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_20",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_21",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_22",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_23",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_19#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_19#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "36",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "result.UnsignedSub$2",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_24",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_25",
                                            ),
                                            Var(
                                                "result.UnsignedSub$2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_11_case_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_EQ",
                                        args: [
                                            Var(
                                                "op",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_13#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_13#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "29",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_13_true#2",
                                    "label_13_false#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_13_false#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v4.isUnsigned",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_15",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_20#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_20#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "32",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PLUS",
                                            args: [
                                                Var(
                                                    "a1",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                                Var(
                                                    "a2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_26",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_27",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_28",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_13_true#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v4.isUnsigned",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_15",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_21#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_21#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "30",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "result.UnsignedAdd$1",
                                    ],
                                    target: "v4.UnsignedAdd",
                                    params: [
                                        Var(
                                            "a1",
                                        ),
                                        Var(
                                            "a2",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_29",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_30",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_31",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_32",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_24#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_24#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "30",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "result.UnsignedAdd$1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_33",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_34",
                                            ),
                                            Var(
                                                "result.UnsignedAdd$1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_11_case_0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_NEQ",
                                        args: [
                                            Var(
                                                "op",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_NEQ",
                                        args: [
                                            Var(
                                                "op",
                                            ),
                                            Nat(
                                                "2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_12#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "41",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.result__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.result__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Var(
                                                            "res",
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_12",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_13",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.result__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_14",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_1#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "42",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.EvalEntry1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outval_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "havoc_stringTemp",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "condVal",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "e",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "outval",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie4",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie5",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie6",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie7",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie8",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie9",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie10",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie11",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie12",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie13",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie14",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie15",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie16",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie17",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie18",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie19",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "__havoc_dummy_return",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "havoc_stringTemp",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "start#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "outval_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "outval",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "outval",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "outval_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_3#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_3#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "47",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.isUnsigned",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_35",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_4#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_4#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "48",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "v4.Eval",
                                    params: [
                                        Var(
                                            "e",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_36",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_37",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_7#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_7#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "49",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.INT4",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.INT4",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "outval",
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "v4.Mem_T.result__EXPR",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "v4.result__EXPR",
                                                                                    args: [
                                                                                        Var(
                                                                                            "e",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_38",
                                            ),
                                            Var(
                                                "outval",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_39",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.INT4",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "outval",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_40",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_41",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.result__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_1#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "50",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.EvalEntry2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "havoc_stringTemp",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "condVal",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "e",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie4",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie5",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie6",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie7",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie8",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie9",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie10",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie11",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie12",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie13",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie14",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie15",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie16",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie17",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie18",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie19",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "__havoc_dummy_return",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "havoc_stringTemp",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "start#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_3#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_3#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "54",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.isUnsigned",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_42",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_4#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_4#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "55",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "v4.Eval",
                                    params: [
                                        Var(
                                            "e",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_43",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_44",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_1#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "56",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v4.__havoc_heapglobal_init",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0#2",
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.Mem",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "name",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.alloc",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.Mem_T.INT4",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.Mem_T.op1__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.Mem_T.op2__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.Mem_T.oper__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.Mem_T.result__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.detChoiceCnt",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.Res_KERNEL_SOURCE",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "v2.Res_PROBED",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.oper__EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.op1__EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.op2__EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.result__EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.INT4",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.PINT4",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.PPINT4",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.PP_EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T.P_EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.T._EXPR",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "21",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_7",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "21",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_8",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->oper",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "19",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_3",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "20",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_4",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "20",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_5",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->op1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "20",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_6",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->op2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "21",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_9",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "22",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_10",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "op",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "24",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_11",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "35",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_12",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->result",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "35",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_13",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "35",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_14",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "27",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_15",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "27",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_16",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "27",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_17",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "res",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "29",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_18",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a1",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "29",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_19",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "a2",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "29",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_20",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "40",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_21",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "40",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_22",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "outval",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "41",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_23",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "*outval",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "41",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_24",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "41",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_25",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e->result",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "41",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_26",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "46",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_27",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "46",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_28",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "op",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "19",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_1",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "model_const",
                        params: [
                            String(
                                StringLit {
                                    text: "e",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceFile",
                        params: [
                            String(
                                StringLit {
                                    text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "sourceLine",
                        params: [
                            Expr(
                                Nat(
                                    "19",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "v2.__ctobpl_const_2",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.OneByteToInt",
                                            args: [
                                                Var(
                                                    "b0",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.OneByteToInt",
                                            args: [
                                                Var(
                                                    "c0",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.OneByteToInt",
                                                args: [
                                                    Var(
                                                        "b0",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.OneByteToInt",
                                                args: [
                                                    Var(
                                                        "c0",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "b0",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "c0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.TwoBytesToInt",
                                            args: [
                                                Var(
                                                    "b0",
                                                ),
                                                Var(
                                                    "b1",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.TwoBytesToInt",
                                            args: [
                                                Var(
                                                    "c0",
                                                ),
                                                Var(
                                                    "c1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.TwoBytesToInt",
                                                args: [
                                                    Var(
                                                        "b0",
                                                    ),
                                                    Var(
                                                        "b1",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.TwoBytesToInt",
                                                args: [
                                                    Var(
                                                        "c0",
                                                    ),
                                                    Var(
                                                        "c1",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b0",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "c0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b1",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "c1",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b3",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c3",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "byte",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.FourBytesToInt",
                                            args: [
                                                Var(
                                                    "b0",
                                                ),
                                                Var(
                                                    "b1",
                                                ),
                                                Var(
                                                    "b2",
                                                ),
                                                Var(
                                                    "b3",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.FourBytesToInt",
                                            args: [
                                                Var(
                                                    "c0",
                                                ),
                                                Var(
                                                    "c1",
                                                ),
                                                Var(
                                                    "c2",
                                                ),
                                                Var(
                                                    "c3",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.FourBytesToInt",
                                                args: [
                                                    Var(
                                                        "b0",
                                                    ),
                                                    Var(
                                                        "b1",
                                                    ),
                                                    Var(
                                                        "b2",
                                                    ),
                                                    Var(
                                                        "b3",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.FourBytesToInt",
                                                args: [
                                                    Var(
                                                        "c0",
                                                    ),
                                                    Var(
                                                        "c1",
                                                    ),
                                                    Var(
                                                        "c2",
                                                    ),
                                                    Var(
                                                        "c3",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "b0",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "c0",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "b1",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "c1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "b2",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "c2",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b3",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "c3",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Base",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "v4.INT_LEQ",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Base",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    Var(
                                        "x",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Match",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.T.Ptr",
                                                        args: [
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Match",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.T.Ptr",
                                                    args: [
                                                        Var(
                                                            "t",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Field",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.T.Ptr",
                                                args: [
                                                    Var(
                                                        "t",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MatchBase",
                                            args: [
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.T.Ptr",
                                                        args: [
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.MatchBase",
                                        args: [
                                            Var(
                                                "b",
                                            ),
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.T.Ptr",
                                                    args: [
                                                        Var(
                                                            "t",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Base",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.HasType",
                                            args: [
                                                Var(
                                                    "v",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.T.Ptr",
                                                        args: [
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.HasType",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.T.Ptr",
                                                    args: [
                                                        Var(
                                                            "t",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "v",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.INT_GT",
                                                                args: [
                                                                    Var(
                                                                        "v",
                                                                    ),
                                                                    Nat(
                                                                        "0",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.Match",
                                                                args: [
                                                                    Var(
                                                                        "v",
                                                                    ),
                                                                    Var(
                                                                        "t",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.MatchBase",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "v4.Base",
                                                                    args: [
                                                                        Var(
                                                                            "v",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            Var(
                                                                "v",
                                                            ),
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_op1__EXPR",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op1__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op1__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_op1__EXPRInv",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op1__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op1__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_op1__EXPR",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op1__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op1__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_op1__EXPRInv",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op1__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op1__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op1__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op1__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "4",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op1__EXPRInv",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op1__EXPRInv",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "4",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op1__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op1__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                            Nat(
                                                "4",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_op2__EXPR",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op2__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op2__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_op2__EXPRInv",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op2__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op2__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_op2__EXPR",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op2__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op2__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_op2__EXPRInv",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_op2__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.op2__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op2__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op2__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "8",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op2__EXPRInv",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op2__EXPRInv",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "8",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.op2__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.op2__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                            Nat(
                                                "8",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_oper__EXPR",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_oper__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.oper__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_oper__EXPRInv",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_oper__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.oper__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_oper__EXPR",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_oper__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.oper__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_oper__EXPRInv",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_oper__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.oper__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.oper__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.oper__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.oper__EXPRInv",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.oper__EXPRInv",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.oper__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.oper__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_result__EXPR",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_result__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.result__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4._S_result__EXPRInv",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_result__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.result__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_result__EXPR",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_result__EXPR",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.result__EXPR",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4._S_result__EXPRInv",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4._S_result__EXPRInv",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.result__EXPRInv",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.result__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.result__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "12",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.result__EXPRInv",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.result__EXPRInv",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "12",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.result__EXPR",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.result__EXPR",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                            Nat(
                                                "12",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_EQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_EQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_NEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_NEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_ADD",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Int,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_ADD",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Int,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Add,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_SUB",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Int,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_SUB",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Int,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Sub,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Int,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_MULT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Int,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Factor(
                                    Factor {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Mul,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_DIV",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Int,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_DIV",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Int,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Factor(
                                    Factor {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Div,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_LT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_LT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_ULT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_ULT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Lt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_LEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_LEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_ULEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_ULEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_GT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_GT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Gt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_UGT",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_UGT",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Gt,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_GEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_GEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_UGEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_UGEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.BV32_EQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.BV32_EQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "bv32",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Coercion(
                                        CoercionExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.BV32_NEQ",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            coercions: [
                                                Type(
                                                    Atom(
                                                        Bool,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.BV32_NEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "size",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "size",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LEQ",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "size",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                    Var(
                                                                        "size",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_SUB",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: And,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_SUB",
                                                    args: [
                                                        Var(
                                                            "a",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "size",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.INT_ADD",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                                                            args: [
                                                                                Var(
                                                                                    "a",
                                                                                ),
                                                                                Var(
                                                                                    "b",
                                                                                ),
                                                                                Var(
                                                                                    "size",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    Nat(
                                                                        "1",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "size",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "size",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a_size",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_LEFT_PTR",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "a_size",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.MINUS_LEFT_PTR",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "a_size",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_SUB",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "a_size",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a_size",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PLUS",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "a_size",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.PLUS",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "a_size",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_ADD",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "a_size",
                                                        ),
                                                        Var(
                                                            "b",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MULT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.MULT",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_MULT",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "b",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.DIV",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Ge,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Gt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.DIV",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.DIV",
                                                                        args: [
                                                                            Var(
                                                                                "a",
                                                                            ),
                                                                            Var(
                                                                                "b",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.DIV",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Ge,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.DIV",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.DIV",
                                                                        args: [
                                                                            Var(
                                                                                "a",
                                                                            ),
                                                                            Var(
                                                                                "b",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.DIV",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Gt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.DIV",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Ge,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Gt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.DIV",
                                                                        args: [
                                                                            Var(
                                                                                "a",
                                                                            ),
                                                                            Var(
                                                                                "b",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.DIV",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "v4.DIV",
                                                                args: [
                                                                    Var(
                                                                        "a",
                                                                    ),
                                                                    Var(
                                                                        "b",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Ge,
                                                rhs: Var(
                                                    "a",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Gt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "b",
                                                        ),
                                                        op: Mul,
                                                        rhs: Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.DIV",
                                                                        args: [
                                                                            Var(
                                                                                "a",
                                                                            ),
                                                                            Var(
                                                                                "b",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "1",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "2",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "4",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "8",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "16",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "32",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "64",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "128",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "256",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "512",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "1024",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "2048",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "4096",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "8192",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "16384",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "32768",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "65536",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "131072",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "262144",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "524288",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "1048576",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "2097152",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "4194304",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "8388608",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "16777216",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "v4.POW2",
                    args: [
                        Nat(
                            "33554432",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.BIT_BAND",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.BIT_BAND",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "a",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.BIT_BAND",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.POW2",
                                                        args: [
                                                            Var(
                                                                "a",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.POW2",
                                                        args: [
                                                            Var(
                                                                "b",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "b",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.BIT_BAND",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.BIT_BAND",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "b",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.BIT_BAND",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.choose",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "c",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "a",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.choose",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                    Var(
                                                        "c",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.choose",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "c",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Var(
                                            "a",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.choose",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                    Var(
                                                        "c",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "c",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.LIFT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Var(
                                    "a",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.LIFT",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PTR_NOT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.PTR_NOT",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PTR_NOT",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.PTR_NOT",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.NULL_CHECK",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.NULL_CHECK",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.NULL_CHECK",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "a",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.NULL_CHECK",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.AtLeast",
                                                    args: [
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.AtLeast",
                                                args: [
                                                    Var(
                                                        "n",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_LEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Rep",
                                                        args: [
                                                            Var(
                                                                "n",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Rep",
                                                        args: [
                                                            Var(
                                                                "n",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.AtLeast",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Rep",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Rep",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.INT_LEQ",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Rep",
                                                        args: [
                                                            Var(
                                                                "n",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Rep",
                                                        args: [
                                                            Var(
                                                                "n",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.AtLeast",
                                                args: [
                                                    Var(
                                                        "n",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.AtLeast",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "v4.AtLeast",
                                        args: [
                                            Var(
                                                "n",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PLUS",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Rep",
                                        args: [
                                            Var(
                                                "n",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Rep",
                                        args: [
                                            Var(
                                                "n",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.PLUS",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Rep",
                                            args: [
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Quant(
                            QuantExpr {
                                kind: Exists,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "k",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_SUB",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Rep",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "v4.INT_MULT",
                                                    args: [
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "k",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Array",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LEQ",
                                        args: [
                                            Var(
                                                "z",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Array",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Empty",
                                                    args: [],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "n",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Array",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "n",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_GT",
                                        args: [
                                            Var(
                                                "z",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Array",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "n",
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Difference",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.AtLeast",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.AtLeast",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.PLUS",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                                Var(
                                                                                    "n",
                                                                                ),
                                                                                Var(
                                                                                    "z",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Empty",
                                                args: [],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "v4.SetTrue",
                                        args: [],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Singleton",
                                                    args: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Singleton",
                                                args: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Singleton",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "v4.Singleton",
                                        args: [
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "y",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Union",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Union",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Union",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Union",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Or,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "T",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Intersection",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Intersection",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Intersection",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Intersection",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "T",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Difference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Difference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Difference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Difference",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "T",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Equal",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            Var(
                                                "S",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Subset",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Subset",
                                                args: [
                                                    Var(
                                                        "T",
                                                    ),
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Subset",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "T",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Subset",
                                        args: [
                                            Var(
                                                "S",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                op: Or,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "S",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "T",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Disjoint",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Disjoint",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "S",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Disjoint",
                                                        args: [
                                                            Var(
                                                                "S",
                                                            ),
                                                            Var(
                                                                "T",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "T",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Disjoint",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Disjoint",
                                        args: [
                                            Var(
                                                "S",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                op: Or,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "S",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "T",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "v4.Inverse",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "f",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "f",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Inverse",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "f",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "v4.Equal",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Union",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.Inverse",
                                                        args: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "v4.Singleton",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Inverse",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "y",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "z",
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Inverse",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "f",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "y",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Difference",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Inverse",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "z",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Singleton",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "M",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Dereference",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "y",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "M",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "y",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "S",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "y",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "M",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Dereference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "M",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "S",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Dereference",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "M",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Dereference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "M",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "y",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "M",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Dereference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "v4.Equal",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.Intersection",
                                                            args: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.Inverse",
                                                                        args: [
                                                                            Var(
                                                                                "M",
                                                                            ),
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "M",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                Var(
                                                                    "S",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.Singleton",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "M",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "y",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Union",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Difference",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.Dereference",
                                                                            args: [
                                                                                Var(
                                                                                    "S",
                                                                                ),
                                                                                Var(
                                                                                    "M",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.Singleton",
                                                                            args: [
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "M",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Singleton",
                                                                args: [
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Dereference",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "v4.Equal",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "v4.Intersection",
                                                                    args: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "v4.Inverse",
                                                                                args: [
                                                                                    Var(
                                                                                        "M",
                                                                                    ),
                                                                                    Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "M",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "x",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        Var(
                                                                            "S",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "v4.Singleton",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Dereference",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "M",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "y",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "v4.Union",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Dereference",
                                                                args: [
                                                                    Var(
                                                                        "S",
                                                                    ),
                                                                    Var(
                                                                        "M",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.Singleton",
                                                                args: [
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Map(
                                                    MapType {
                                                        type_params: [],
                                                        keys: [
                                                            Atom(
                                                                Int,
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "v4.Unified",
                                                    args: [
                                                        Var(
                                                            "M",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Unified",
                                                args: [
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "M",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "v4.Field",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                value: None,
                                            },
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "M",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Map(
                                                    MapType {
                                                        type_params: [],
                                                        keys: [
                                                            Atom(
                                                                Int,
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.Unified",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "M",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "v4.Field",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "M",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "v4.Field",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "x",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                    ],
                                                                                    value: Some(
                                                                                        Var(
                                                                                            "y",
                                                                                        ),
                                                                                    ),
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "v4.Unified",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "M",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.Field",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: Some(
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "M",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "v4.Field",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "x",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                                value: Some(
                                                                                    Var(
                                                                                        "y",
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "v4.Unified",
                                                args: [
                                                    Var(
                                                        "M",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: Some(
                                                    Var(
                                                        "y",
                                                    ),
                                                ),
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.havoc_assert",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.havoc_assume",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.__HAVOC_free",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.__HAVOC_malloc",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "obj_size",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "new",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "new",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_malloc_new",
                                        args: [
                                            Var(
                                                "obj_size",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.__HAVOC_det_malloc",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "obj_size",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "new",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "new",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_det_malloc_new",
                                        args: [
                                            Var(
                                                "obj_size",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.__HAVOC_memset_split_1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "A",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "c",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_memset_split_1_ret",
                                        args: [
                                            Var(
                                                "A",
                                            ),
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "c",
                                            ),
                                            Var(
                                                "n",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.__HAVOC_memset_split_2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "A",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "c",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_memset_split_2_ret",
                                        args: [
                                            Var(
                                                "A",
                                            ),
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "c",
                                            ),
                                            Var(
                                                "n",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.__HAVOC_memset_split_4",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "A",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "c",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.__HAVOC_memset_split_4_ret",
                                        args: [
                                            Var(
                                                "A",
                                            ),
                                            Var(
                                                "p",
                                            ),
                                            Var(
                                                "c",
                                            ),
                                            Var(
                                                "n",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.nondet_choice",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.nondet_choice_x",
                                        args: [],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.det_choice",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.det_choice_x",
                                        args: [],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2._strdup",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "str",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "new",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "new",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4._strdup_new",
                                        args: [
                                            Var(
                                                "str",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2._xstrcasecmp",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a0",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4._xstrcasecmp_ret",
                                        args: [
                                            Var(
                                                "a0",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2._xstrcmp",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a0",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "ret",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4._xstrcmp_ret",
                                        args: [
                                            Var(
                                                "a0",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "inline",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "v2.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.Mem_T.result__EXPR",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.Mem_T.result__EXPR",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.Eval_v4.Mem_T.result__EXPR",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.EvalEntry1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outval_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.Mem_T.result__EXPR",
                            "v4.Mem_T.INT4",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.Mem_T.result__EXPR",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.EvalEntry1_v4.Mem_T.result__EXPR",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "outval_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.INT4",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.Mem_T.INT4",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.EvalEntry1_v4.Mem_T.INT4",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "outval_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.INT4",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.EvalEntry2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.Mem_T.result__EXPR",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "v4.Mem_T.result__EXPR",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "_uf_v4.EvalEntry2_v4.Mem_T.result__EXPR",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.alloc",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            Old(
                                                OldExpr {
                                                    expr: Var(
                                                        "v4.isUnsigned",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.__havoc_heapglobal_init",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "inline",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "v2.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "havoc_stringTemp",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "condVal",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "a1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "a2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "e",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "op",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "res",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie4",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie5",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie6",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie7",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie8",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie9",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie10",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie11",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie12",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie13",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie14",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie15",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie16",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie17",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie18",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie19",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "__havoc_dummy_return",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "havoc_stringTemp",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "start#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "op",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_3#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_3#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "17",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_4#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_4#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "17",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_5#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_5#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "17",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_6#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_6#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "17",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_7#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_7#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "op",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.oper__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.oper__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_1",
                                            ),
                                            Var(
                                                "op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_2",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_3",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.oper__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_8#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_8#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "20",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.op1__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.op1__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_4",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_5",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_6",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.op1__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_9#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_9#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "21",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.op2__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.op2__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_7",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_8",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_9",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.op2__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_10#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_10#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "22",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_10",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_11#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_11#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "24",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_11_case_0#2",
                                    "label_11_case_1#2",
                                    "label_11_case_2#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_11_case_2#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_EQ",
                                        args: [
                                            Var(
                                                "op",
                                            ),
                                            Nat(
                                                "2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_14#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_14#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "29",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                            args: [
                                                Var(
                                                    "a1",
                                                ),
                                                Var(
                                                    "a2",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_18",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_19",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_20",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_11_case_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_EQ",
                                        args: [
                                            Var(
                                                "op",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_13#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_13#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "27",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PLUS",
                                            args: [
                                                Var(
                                                    "a1",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                                Var(
                                                    "a2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_15",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_16",
                                            ),
                                            Var(
                                                "a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_17",
                                            ),
                                            Var(
                                                "a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_11_case_0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_NEQ",
                                        args: [
                                            Var(
                                                "op",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_NEQ",
                                        args: [
                                            Var(
                                                "op",
                                            ),
                                            Nat(
                                                "2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_12#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "35",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.result__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.result__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Var(
                                                            "res",
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_12",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_13",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.result__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_14",
                                            ),
                                            Var(
                                                "res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_1#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "36",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.EvalEntry1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outval_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "havoc_stringTemp",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "condVal",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "e",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "outval",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie4",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie5",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie6",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie7",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie8",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie9",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie10",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie11",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie12",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie13",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie14",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie15",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie16",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie17",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie18",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie19",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "__havoc_dummy_return",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "havoc_stringTemp",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "start#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "outval_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "outval",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "outval",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "outval_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_3#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_3#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "40",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "v2.Eval",
                                    params: [
                                        Var(
                                            "e",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_21",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_22",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_6#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_6#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "41",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.INT4",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.INT4",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "outval",
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "v4.Mem_T.result__EXPR",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "v4.result__EXPR",
                                                                                    args: [
                                                                                        Var(
                                                                                            "e",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_23",
                                            ),
                                            Var(
                                                "outval",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_24",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.INT4",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "outval",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_25",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_26",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.result__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_1#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "42",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.EvalEntry2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "havoc_stringTemp",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "condVal",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "e",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie4",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie5",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie6",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie7",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie8",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie9",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie10",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie11",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie12",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie13",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie14",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie15",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie16",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie17",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie18",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "tempBoogie19",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "__havoc_dummy_return",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "havoc_stringTemp",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "start#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "e_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_3#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_3#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "46",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "v2.Eval",
                                    params: [
                                        Var(
                                            "e",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_27",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_28",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "label_1#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "label_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "47",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "v2.__havoc_heapglobal_init",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0#2",
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "name",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "byte",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v2.Eval_v4.Mem_T.result__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v4.Eval_v4.Mem_T.result__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "EQ_v2.Eval__v4.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP30",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.Mem_T.result__EXPR",
                            "Output_of_v2.Eval_v4.Mem_T.result__EXPR",
                            "Output_of_v4.Eval_v4.Mem_T.result__EXPR",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Var(
                            "AA_TEMP30",
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "EQ_v2.Eval__v4.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP30",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP10",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP00",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$havoc_stringTemp",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$condVal",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$a1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$a2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$e",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$op",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$res",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie4",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie5",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie6",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie7",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie8",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie9",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie10",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie11",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie12",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie13",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie14",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie15",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie16",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie17",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie18",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$tempBoogie19",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$__havoc_dummy_return",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$e_.1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v2.Eval$0$v4.Mem_T.result__EXPR",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$havoc_stringTemp",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$condVal",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$a1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$a2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$e",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$op",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$res",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$result.UnsignedAdd$1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$result.UnsignedSub$2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie4",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie5",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie6",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie7",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie8",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie9",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie10",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie11",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie12",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie13",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie14",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie15",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie16",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie17",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie18",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$tempBoogie19",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$__havoc_dummy_return",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$e_.1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$v4.Eval$0$v4.Mem_T.result__EXPR",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "AA_INSTR_EQ_BODY",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP00",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$Entry",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$Entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$e_.1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$anon0#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$anon0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$havoc_stringTemp",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$start#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$start#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "inline$v2.Eval$0$e_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$a1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$a2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$op",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$v2.Eval$0$e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_3#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_3#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "17",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_4#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_4#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "17",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_5#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_5#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "17",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_6#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_6#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "17",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_7#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_7#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$op",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.oper__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.oper__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "inline$v2.Eval$0$e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_1",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_2",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_3",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.oper__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "inline$v2.Eval$0$e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_8#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_8#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "20",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$a1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.op1__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.op1__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "inline$v2.Eval$0$e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_4",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_5",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_6",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.op1__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "inline$v2.Eval$0$e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_9#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_9#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "21",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$a2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.op2__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.op2__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "inline$v2.Eval$0$e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_7",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_8",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_9",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.op2__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "inline$v2.Eval$0$e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_10#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_10#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "22",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_10",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_11#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_11#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "24",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_11_case_0#2",
                                    "inline$v2.Eval$0$label_11_case_1#2",
                                    "inline$v2.Eval$0$label_11_case_2#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_11_case_2#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_EQ",
                                        args: [
                                            Var(
                                                "inline$v2.Eval$0$op",
                                            ),
                                            Nat(
                                                "2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_14#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_14#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "29",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                            args: [
                                                Var(
                                                    "inline$v2.Eval$0$a1",
                                                ),
                                                Var(
                                                    "inline$v2.Eval$0$a2",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_18",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_19",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_20",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_11_case_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_EQ",
                                        args: [
                                            Var(
                                                "inline$v2.Eval$0$op",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_13#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_13#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "27",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v2.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PLUS",
                                            args: [
                                                Var(
                                                    "inline$v2.Eval$0$a1",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                                Var(
                                                    "inline$v2.Eval$0$a2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_15",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_16",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_17",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_11_case_0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_NEQ",
                                        args: [
                                            Var(
                                                "inline$v2.Eval$0$op",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_NEQ",
                                        args: [
                                            Var(
                                                "inline$v2.Eval$0$op",
                                            ),
                                            Nat(
                                                "2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_12#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "35",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.result__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.result__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "inline$v2.Eval$0$e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Var(
                                                            "inline$v2.Eval$0$res",
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_12",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_13",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.result__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "inline$v2.Eval$0$e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v2.__ctobpl_const_14",
                                            ),
                                            Var(
                                                "inline$v2.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$label_1#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$label_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v2\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "36",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v2.Eval$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v2.Eval$0$Return",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "AA_INSTR_EQ_BODY$1",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "AA_INSTR_EQ_BODY$1",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP10",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP00",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$Entry",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$Entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$e_.1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$anon0#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$anon0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$havoc_stringTemp",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$start#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$start#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_LT",
                                        args: [
                                            Var(
                                                "inline$v4.Eval$0$e_.1",
                                            ),
                                            Var(
                                                "v4.alloc",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$a1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$a2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$op",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$result.UnsignedAdd$1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$result.UnsignedSub$2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$e",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$v4.Eval$0$e_.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_3#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_3#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_4#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_4#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_5#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_5#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_6#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_6#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "19",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_7#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_7#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "21",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$op",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.oper__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.oper__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "inline$v4.Eval$0$e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_1",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_2",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_3",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.oper__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.oper__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "inline$v4.Eval$0$e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_8#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_8#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "22",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$a1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.op1__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.op1__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "inline$v4.Eval$0$e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_4",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_5",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_6",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op1__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.op1__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "inline$v4.Eval$0$e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_9#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_9#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "23",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$a2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.op2__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.op2__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "inline$v4.Eval$0$e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_7",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_8",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_9",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.op2__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.op2__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "inline$v4.Eval$0$e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_10#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_10#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "24",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_10",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_11#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_11#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "26",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_11_case_0#2",
                                    "inline$v4.Eval$0$label_11_case_1#2",
                                    "inline$v4.Eval$0$label_11_case_2#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_11_case_2#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_EQ",
                                        args: [
                                            Var(
                                                "inline$v4.Eval$0$op",
                                            ),
                                            Nat(
                                                "2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_14#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_14#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "35",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_14_true#2",
                                    "inline$v4.Eval$0$label_14_false#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_14_false#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v4.isUnsigned",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_16",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_15#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_15#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "38",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.MINUS_BOTH_PTR_OR_BOTH_INT",
                                            args: [
                                                Var(
                                                    "inline$v4.Eval$0$a1",
                                                ),
                                                Var(
                                                    "inline$v4.Eval$0$a2",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_17",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_18",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_19",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_14_true#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v4.isUnsigned",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_16",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_16#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_16#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "36",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "inline$v4.Eval$0$result.UnsignedSub$2",
                                    ],
                                    target: "v4.UnsignedSub",
                                    params: [
                                        Var(
                                            "inline$v4.Eval$0$a1",
                                        ),
                                        Var(
                                            "inline$v4.Eval$0$a2",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_20",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_21",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_22",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_23",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_19#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_19#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "36",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$v4.Eval$0$result.UnsignedSub$2",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_24",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_25",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$result.UnsignedSub$2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_11_case_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_EQ",
                                        args: [
                                            Var(
                                                "inline$v4.Eval$0$op",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_13#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_13#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "29",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_13_true#2",
                                    "inline$v4.Eval$0$label_13_false#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_13_false#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v4.isUnsigned",
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_15",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_20#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_20#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "32",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "v4.PLUS",
                                            args: [
                                                Var(
                                                    "inline$v4.Eval$0$a1",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                                Var(
                                                    "inline$v4.Eval$0$a2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_26",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_27",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_28",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_13_true#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "v4.isUnsigned",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_15",
                                            ),
                                            Var(
                                                "v4.isUnsigned",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_21#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_21#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "30",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "inline$v4.Eval$0$result.UnsignedAdd$1",
                                    ],
                                    target: "v4.UnsignedAdd",
                                    params: [
                                        Var(
                                            "inline$v4.Eval$0$a1",
                                        ),
                                        Var(
                                            "inline$v4.Eval$0$a2",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_29",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_30",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_31",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_32",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$a2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_24#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_24#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "30",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$v4.Eval$0$res",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$v4.Eval$0$result.UnsignedAdd$1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_33",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_34",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$result.UnsignedAdd$1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_11_case_0#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_NEQ",
                                        args: [
                                            Var(
                                                "inline$v4.Eval$0$op",
                                            ),
                                            Nat(
                                                "1",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.INT_NEQ",
                                        args: [
                                            Var(
                                                "inline$v4.Eval$0$op",
                                            ),
                                            Nat(
                                                "2",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_11",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$op",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_12#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_12#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "41",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "v4.Mem_T.result__EXPR",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "v4.result__EXPR",
                                                                args: [
                                                                    Var(
                                                                        "inline$v4.Eval$0$e",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Var(
                                                            "inline$v4.Eval$0$res",
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_12",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$e",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_13",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "v4.result__EXPR",
                                                                        args: [
                                                                            Var(
                                                                                "inline$v4.Eval$0$e",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "v4.value_is",
                                        args: [
                                            Var(
                                                "v4.__ctobpl_const_14",
                                            ),
                                            Var(
                                                "inline$v4.Eval$0$res",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$label_1#2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$label_1#2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "sourcefile",
                                            params: [
                                                String(
                                                    StringLit {
                                                        text: "c:\\tvm\\projects\\symb_diff\\symdiff\\test\\c_examples\\ex3\\v4\\foo.c",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                    Attr(
                                        AttrContent {
                                            ident: "sourceline",
                                            params: [
                                                Expr(
                                                    Nat(
                                                        "42",
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$v4.Eval$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$v4.Eval$0$Return",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "AA_INSTR_EQ_BODY$2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "AA_INSTR_EQ_BODY$2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v2.Eval_v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP10",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v4.Eval_v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP30",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "AA_TEMP10",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "_x0",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "AA_TEMP10",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "_x0",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "v4.Mem_T.result__EXPR",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "_x0",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v2.EvalEntry1_v4.Mem_T.INT4",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v4.EvalEntry1_v4.Mem_T.INT4",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v2.EvalEntry1_v4.isUnsigned",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v4.EvalEntry1_v4.isUnsigned",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "EQ_v2.EvalEntry1__v4.EvalEntry1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outval_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP80",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP81",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP82",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.Mem_T.result__EXPR",
                            "v4.Mem_T.INT4",
                            "v4.isUnsigned",
                            "Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR",
                            "Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR",
                            "Output_of_v2.EvalEntry1_v4.Mem_T.INT4",
                            "Output_of_v4.EvalEntry1_v4.Mem_T.INT4",
                            "Output_of_v2.EvalEntry1_v4.isUnsigned",
                            "Output_of_v4.EvalEntry1_v4.isUnsigned",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Var(
                                            "AA_TEMP82",
                                        ),
                                        op: And,
                                        rhs: Var(
                                            "AA_TEMP81",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Var(
                                    "AA_TEMP80",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "EQ_v2.EvalEntry1__v4.EvalEntry1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outval_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP80",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP81",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP82",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP60",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP61",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP62",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP50",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP51",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP52",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "AA_INSTR_EQ_BODY",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP50",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP51",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.INT4",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP52",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.isUnsigned",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "v2.EvalEntry1",
                                    params: [
                                        Var(
                                            "e_.1",
                                        ),
                                        Var(
                                            "outval_.1",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP60",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP61",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.INT4",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP62",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.isUnsigned",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP50",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.INT4",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP51",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.isUnsigned",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP52",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "v4.EvalEntry1",
                                    params: [
                                        Var(
                                            "e_.1",
                                        ),
                                        Var(
                                            "outval_.1",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP60",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v2.EvalEntry1_v4.Mem_T.INT4",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP61",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v4.EvalEntry1_v4.Mem_T.INT4",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.INT4",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v2.EvalEntry1_v4.isUnsigned",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP62",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v4.EvalEntry1_v4.isUnsigned",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.isUnsigned",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP80",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "AA_TEMP81",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "AA_TEMP82",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "AA_TEMP60",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "_x0",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "AA_TEMP60",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "_x0",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "v4.Mem_T.result__EXPR",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "_x0",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                    Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "AA_TEMP61",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "v4.Mem_T.INT4",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "_x0",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "AA_TEMP61",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "_x0",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "v4.Mem_T.INT4",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "_x0",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "AA_TEMP62",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "v4.isUnsigned",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v2.EvalEntry2_v4.isUnsigned",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Output_of_v4.EvalEntry2_v4.isUnsigned",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "EQ_v2.EvalEntry2__v4.EvalEntry2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP130",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP131",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "v4.Mem_T.result__EXPR",
                            "v4.isUnsigned",
                            "Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR",
                            "Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR",
                            "Output_of_v2.EvalEntry2_v4.isUnsigned",
                            "Output_of_v4.EvalEntry2_v4.isUnsigned",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Var(
                                    "AA_TEMP131",
                                ),
                                op: And,
                                rhs: Var(
                                    "AA_TEMP130",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "EQ_v2.EvalEntry2__v4.EvalEntry2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "e_.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP130",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "AA_TEMP131",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP110",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP111",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP100",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                Atom(
                                                    Int,
                                                ),
                                            ],
                                            value: Atom(
                                                Int,
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "AA_TEMP101",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "AA_INSTR_EQ_BODY",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP100",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP101",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.isUnsigned",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "v2.EvalEntry2",
                                    params: [
                                        Var(
                                            "e_.1",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP110",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP111",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.isUnsigned",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP100",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "v4.isUnsigned",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP101",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "v4.EvalEntry2",
                                    params: [
                                        Var(
                                            "e_.1",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP110",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.Mem_T.result__EXPR",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v2.EvalEntry2_v4.isUnsigned",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "AA_TEMP111",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "Output_of_v4.EvalEntry2_v4.isUnsigned",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "v4.isUnsigned",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "AA_TEMP130",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "AA_TEMP131",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "AA_TEMP110",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "v4.Mem_T.result__EXPR",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "_x0",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "AA_TEMP110",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "_x0",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "v4.Mem_T.result__EXPR",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "_x0",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "AA_TEMP111",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "v4.isUnsigned",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.__HAVOC_malloc_new",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.__HAVOC_malloc_new",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.__HAVOC_det_malloc_new",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.__HAVOC_det_malloc_new",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.__HAVOC_memset_split_1_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.__HAVOC_memset_split_1_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.__HAVOC_memset_split_2_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.__HAVOC_memset_split_2_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.__HAVOC_memset_split_4_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.__HAVOC_memset_split_4_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.nondet_choice_x",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.nondet_choice_x",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.det_choice_x",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.det_choice_x",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4._strdup_new",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2._strdup_new",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4._xstrcasecmp_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2._xstrcasecmp_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4._xstrcmp_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2._xstrcmp_ret",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.Eval_v4.Mem_T.result__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.Eval_v4.Mem_T.result__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.EvalEntry1_v4.Mem_T.result__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_7",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_8",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.EvalEntry1_v4.Mem_T.INT4",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_7",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_8",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.EvalEntry1_v4.isUnsigned",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_7",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_8",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.EvalEntry1_v4.Mem_T.result__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_7",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_8",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.EvalEntry1_v4.Mem_T.INT4",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_7",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_8",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.EvalEntry2_v4.Mem_T.result__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v4.EvalEntry2_v4.isUnsigned",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_uf_v2.EvalEntry2_v4.Mem_T.result__EXPR",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_2",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_3",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_4",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_5",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_6",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
]

[Printed]
var v4.Mem: [name][int]int;

var v4.alloc: int;

var v4.Mem_T.INT4: [int]int;

var v4.Mem_T.op1__EXPR: [int]int;

var v4.Mem_T.op2__EXPR: [int]int;

var v4.Mem_T.oper__EXPR: [int]int;

var v4.Mem_T.result__EXPR: [int]int;

var v4.detChoiceCnt: int;

var v4.Res_KERNEL_SOURCE: [int]int;

var v4.Res_PROBED: [int]int;

var v4.isUnsigned: int;

const unique v4.T.oper__EXPR: name;

const unique v4.T.op1__EXPR: name;

const unique v4.T.op2__EXPR: name;

const unique v4.T.result__EXPR: name;

const unique v4.T.INT4: name;

const unique v4.T.PINT4: name;

const unique v4.T.PPINT4: name;

const unique v4.T.PP_EXPR: name;

const unique v4.T.P_EXPR: name;

const unique v4.T._EXPR: name;

const {:model_const "e->op2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 23} unique v4.__ctobpl_const_9: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 24} unique v4.__ctobpl_const_10: int;

const {:model_const "op"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 26} unique v4.__ctobpl_const_11: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 41} unique v4.__ctobpl_const_12: int;

const {:model_const "e->op1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 22} unique v4.__ctobpl_const_6: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 23} unique v4.__ctobpl_const_7: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 23} unique v4.__ctobpl_const_8: int;

const {:model_const "e->oper"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 21} unique v4.__ctobpl_const_3: int;

const {:model_const "op"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 21} unique v4.__ctobpl_const_1: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 21} unique v4.__ctobpl_const_2: int;

const {:model_const "e->result"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 41} unique v4.__ctobpl_const_13: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 41} unique v4.__ctobpl_const_14: int;

const {:model_const "isUnsigned"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 29} unique v4.__ctobpl_const_15: int;

const {:model_const "isUnsigned"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 35} unique v4.__ctobpl_const_16: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 38} unique v4.__ctobpl_const_17: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 38} unique v4.__ctobpl_const_18: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 38} unique v4.__ctobpl_const_19: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_20: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_21: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_22: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_23: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_24: int;

const {:model_const "result.UnsignedSub"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_25: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 32} unique v4.__ctobpl_const_26: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 32} unique v4.__ctobpl_const_27: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 32} unique v4.__ctobpl_const_28: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_29: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_30: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_31: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_32: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_33: int;

const {:model_const "result.UnsignedAdd"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_34: int;

const {:model_const "isUnsigned"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 47} unique v4.__ctobpl_const_35: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 22} unique v4.__ctobpl_const_4: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 22} unique v4.__ctobpl_const_5: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 48} unique v4.__ctobpl_const_36: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 48} unique v4.__ctobpl_const_37: int;

const {:model_const "outval"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 49} unique v4.__ctobpl_const_38: int;

const {:model_const "*outval"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 49} unique v4.__ctobpl_const_39: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 49} unique v4.__ctobpl_const_40: int;

const {:model_const "e->result"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 49} unique v4.__ctobpl_const_41: int;

const {:model_const "isUnsigned"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 54} unique v4.__ctobpl_const_42: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 55} unique v4.__ctobpl_const_43: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 55} unique v4.__ctobpl_const_44: int;

function v4.OneByteToInt(arg_0: byte): int;

function v4.TwoBytesToInt(arg_0: byte, arg_1: byte): int;

function v4.FourBytesToInt(arg_0: byte, arg_1: byte, arg_2: byte, arg_3: byte): int;

function v4.Field(arg_0: int): name;

function v4.Base(arg_0: int): int;

function v4.Match(a: int, t: name): bool;

function v4.MatchBase(b: int, a: int, t: name): bool;

function v4.HasType(v: int, t: name): bool;

function v4.T.Ptr(t: name): name;

function v4.op1__EXPR(arg_0: int): int;

function v4.op1__EXPRInv(arg_0: int): int;

function v4._S_op1__EXPR(arg_0: [int]bool): [int]bool;

function v4._S_op1__EXPRInv(arg_0: [int]bool): [int]bool;

function v4.op2__EXPR(arg_0: int): int;

function v4.op2__EXPRInv(arg_0: int): int;

function v4._S_op2__EXPR(arg_0: [int]bool): [int]bool;

function v4._S_op2__EXPRInv(arg_0: [int]bool): [int]bool;

function v4.oper__EXPR(arg_0: int): int;

function v4.oper__EXPRInv(arg_0: int): int;

function v4._S_oper__EXPR(arg_0: [int]bool): [int]bool;

function v4._S_oper__EXPRInv(arg_0: [int]bool): [int]bool;

function v4.result__EXPR(arg_0: int): int;

function v4.result__EXPRInv(arg_0: int): int;

function v4._S_result__EXPR(arg_0: [int]bool): [int]bool;

function v4._S_result__EXPRInv(arg_0: [int]bool): [int]bool;

function v4.INT_EQ(x: int, y: int): bool;

function v4.INT_NEQ(x: int, y: int): bool;

function v4.INT_ADD(x: int, y: int): int;

function v4.INT_SUB(x: int, y: int): int;

function v4.INT_MULT(x: int, y: int): int;

function v4.INT_DIV(x: int, y: int): int;

function v4.INT_LT(x: int, y: int): bool;

function v4.INT_ULT(x: int, y: int): bool;

function v4.INT_LEQ(x: int, y: int): bool;

function v4.INT_ULEQ(x: int, y: int): bool;

function v4.INT_GT(x: int, y: int): bool;

function v4.INT_UGT(x: int, y: int): bool;

function v4.INT_GEQ(x: int, y: int): bool;

function v4.INT_UGEQ(x: int, y: int): bool;

function v4.BV32_EQ(x: bv32, y: bv32): bool;

function v4.BV32_NEQ(x: bv32, y: bv32): bool;

function {:bvbuiltin "bvadd"} v4.BV32_ADD(x: bv32, y: bv32): bv32;

function {:bvbuiltin "bvsub"} v4.BV32_SUB(x: bv32, y: bv32): bv32;

function {:bvbuiltin "bvmul"} v4.BV32_MULT(x: bv32, y: bv32): bv32;

function {:bvbuiltin "bvudiv"} v4.BV32_DIV(x: bv32, y: bv32): bv32;

function {:bvbuiltin "bvult"} v4.BV32_ULT(x: bv32, y: bv32): bool;

function {:bvbuiltin "bvslt"} v4.BV32_LT(x: bv32, y: bv32): bool;

function {:bvbuiltin "bvule"} v4.BV32_ULEQ(x: bv32, y: bv32): bool;

function {:bvbuiltin "bvsle"} v4.BV32_LEQ(x: bv32, y: bv32): bool;

function {:bvbuiltin "bvugt"} v4.BV32_UGT(x: bv32, y: bv32): bool;

function {:bvbuiltin "bvsgt"} v4.BV32_GT(x: bv32, y: bv32): bool;

function {:bvbuiltin "bvuge"} v4.BV32_UGEQ(x: bv32, y: bv32): bool;

function {:bvbuiltin "bvsge"} v4.BV32_GEQ(x: bv32, y: bv32): bool;

function v4.MINUS_BOTH_PTR_OR_BOTH_INT(a: int, b: int, size: int): int;

function v4.MINUS_LEFT_PTR(a: int, a_size: int, b: int): int;

function v4.PLUS(a: int, a_size: int, b: int): int;

function v4.MULT(a: int, b: int): int;

function v4.DIV(a: int, b: int): int;

function v4.BINARY_BOTH_INT(a: int, b: int): int;

function v4.POW2(a: int): bool;

function v4.BIT_BAND(a: int, b: int): int;

function v4.BIT_BOR(a: int, b: int): int;

function v4.BIT_BXOR(a: int, b: int): int;

function v4.BIT_BNOT(a: int): int;

function v4.choose(a: bool, b: int, c: int): int;

function v4.LIFT(a: bool): int;

function v4.PTR_NOT(a: int): int;

function v4.NULL_CHECK(a: int): int;

function v4.NewAlloc(x: int, y: int): int;

function v4.DetChoiceFunc(a: int): int;

function v4.Equal(arg_0: [int]bool, arg_1: [int]bool): bool;

function v4.Subset(arg_0: [int]bool, arg_1: [int]bool): bool;

function v4.Disjoint(arg_0: [int]bool, arg_1: [int]bool): bool;

function v4.Empty(): [int]bool;

function v4.SetTrue(): [int]bool;

function v4.Singleton(arg_0: int): [int]bool;

function v4.Reachable(arg_0: [int, int]bool, arg_1: int): [int]bool;

function v4.Union(arg_0: [int]bool, arg_1: [int]bool): [int]bool;

function v4.Intersection(arg_0: [int]bool, arg_1: [int]bool): [int]bool;

function v4.Difference(arg_0: [int]bool, arg_1: [int]bool): [int]bool;

function v4.Dereference(arg_0: [int]bool, arg_1: [int]int): [int]bool;

function v4.Inverse(f: [int]int, x: int): [int]bool;

function v4.AtLeast(arg_0: int, arg_1: int): [int]bool;

function v4.Rep(arg_0: int, arg_1: int): int;

function v4.Array(arg_0: int, arg_1: int, arg_2: int): [int]bool;

function v4.Unified(arg_0: [name][int]int): [int]int;

function v4.value_is(c: int, e: int): bool;

axiom (forall b0: byte, c0: byte :: {v4.OneByteToInt(b0), v4.OneByteToInt(c0)} v4.OneByteToInt(b0) == v4.OneByteToInt(c0) ==> b0 == c0);

axiom (forall b0: byte, b1: byte, c0: byte, c1: byte :: {v4.TwoBytesToInt(b0, b1), v4.TwoBytesToInt(c0, c1)} v4.TwoBytesToInt(b0, b1) == v4.TwoBytesToInt(c0, c1) ==> b0 == c0 && b1 == c1);

axiom (forall b0: byte, b1: byte, b2: byte, b3: byte, c0: byte, c1: byte, c2: byte, c3: byte :: {v4.FourBytesToInt(b0, b1, b2, b3), v4.FourBytesToInt(c0, c1, c2, c3)} v4.FourBytesToInt(b0, b1, b2, b3) == v4.FourBytesToInt(c0, c1, c2, c3) ==> b0 == c0 && b1 == c1 && b2 == c2 && b3 == c3);

axiom (forall x: int :: {v4.Base(x)} v4.INT_LEQ(v4.Base(x), x));

axiom (forall a: int, t: name :: {v4.Match(a, v4.T.Ptr(t))} v4.Match(a, v4.T.Ptr(t)) <==> v4.Field(a) == v4.T.Ptr(t));

axiom (forall b: int, a: int, t: name :: {v4.MatchBase(b, a, v4.T.Ptr(t))} v4.MatchBase(b, a, v4.T.Ptr(t)) <==> v4.Base(a) == b);

axiom (forall v: int, t: name :: {v4.HasType(v, v4.T.Ptr(t))} v4.HasType(v, v4.T.Ptr(t)) <==> v == 0 || (v4.INT_GT(v, 0) && v4.Match(v, t) && v4.MatchBase(v4.Base(v), v, t)));

axiom (forall x: int, S: [int]bool :: {v4._S_op1__EXPR(S)[x]} v4._S_op1__EXPR(S)[x] <==> S[v4.op1__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: {v4._S_op1__EXPRInv(S)[x]} v4._S_op1__EXPRInv(S)[x] <==> S[v4.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_op1__EXPR(S)} S[x] ==> v4._S_op1__EXPR(S)[v4.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_op1__EXPRInv(S)} S[x] ==> v4._S_op1__EXPRInv(S)[v4.op1__EXPRInv(x)]);

axiom (forall x: int :: {v4.op1__EXPR(x)} v4.op1__EXPR(x) == v4.INT_ADD(x, 4));

axiom (forall x: int :: {v4.op1__EXPRInv(x)} v4.op1__EXPRInv(x) == v4.INT_SUB(x, 4));

axiom (forall x: int :: {v4.op1__EXPR(x)} v4.op1__EXPR(x) == v4.PLUS(x, 1, 4));

axiom (forall x: int, S: [int]bool :: {v4._S_op2__EXPR(S)[x]} v4._S_op2__EXPR(S)[x] <==> S[v4.op2__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: {v4._S_op2__EXPRInv(S)[x]} v4._S_op2__EXPRInv(S)[x] <==> S[v4.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_op2__EXPR(S)} S[x] ==> v4._S_op2__EXPR(S)[v4.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_op2__EXPRInv(S)} S[x] ==> v4._S_op2__EXPRInv(S)[v4.op2__EXPRInv(x)]);

axiom (forall x: int :: {v4.op2__EXPR(x)} v4.op2__EXPR(x) == v4.INT_ADD(x, 8));

axiom (forall x: int :: {v4.op2__EXPRInv(x)} v4.op2__EXPRInv(x) == v4.INT_SUB(x, 8));

axiom (forall x: int :: {v4.op2__EXPR(x)} v4.op2__EXPR(x) == v4.PLUS(x, 1, 8));

axiom (forall x: int, S: [int]bool :: {v4._S_oper__EXPR(S)[x]} v4._S_oper__EXPR(S)[x] <==> S[v4.oper__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: {v4._S_oper__EXPRInv(S)[x]} v4._S_oper__EXPRInv(S)[x] <==> S[v4.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_oper__EXPR(S)} S[x] ==> v4._S_oper__EXPR(S)[v4.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_oper__EXPRInv(S)} S[x] ==> v4._S_oper__EXPRInv(S)[v4.oper__EXPRInv(x)]);

axiom (forall x: int :: {v4.oper__EXPR(x)} v4.oper__EXPR(x) == v4.INT_ADD(x, 0));

axiom (forall x: int :: {v4.oper__EXPRInv(x)} v4.oper__EXPRInv(x) == v4.INT_SUB(x, 0));

axiom (forall x: int :: {v4.oper__EXPR(x)} v4.oper__EXPR(x) == v4.PLUS(x, 1, 0));

axiom (forall x: int, S: [int]bool :: {v4._S_result__EXPR(S)[x]} v4._S_result__EXPR(S)[x] <==> S[v4.result__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: {v4._S_result__EXPRInv(S)[x]} v4._S_result__EXPRInv(S)[x] <==> S[v4.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_result__EXPR(S)} S[x] ==> v4._S_result__EXPR(S)[v4.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_result__EXPRInv(S)} S[x] ==> v4._S_result__EXPRInv(S)[v4.result__EXPRInv(x)]);

axiom (forall x: int :: {v4.result__EXPR(x)} v4.result__EXPR(x) == v4.INT_ADD(x, 12));

axiom (forall x: int :: {v4.result__EXPRInv(x)} v4.result__EXPRInv(x) == v4.INT_SUB(x, 12));

axiom (forall x: int :: {v4.result__EXPR(x)} v4.result__EXPR(x) == v4.PLUS(x, 1, 12));

axiom (forall x: int, y: int :: {v4.INT_EQ(x, y) : bool} v4.INT_EQ(x, y) : bool <==> x == y);

axiom (forall x: int, y: int :: {v4.INT_NEQ(x, y) : bool} v4.INT_NEQ(x, y) : bool <==> x != y);

axiom (forall x: int, y: int :: {v4.INT_ADD(x, y) : int} v4.INT_ADD(x, y) : int == x + y);

axiom (forall x: int, y: int :: {v4.INT_SUB(x, y) : int} v4.INT_SUB(x, y) : int == x - y);

axiom (forall x: int, y: int :: {v4.INT_MULT(x, y) : int} v4.INT_MULT(x, y) : int == x * y);

axiom (forall x: int, y: int :: {v4.INT_DIV(x, y) : int} v4.INT_DIV(x, y) : int == x div y);

axiom (forall x: int, y: int :: {v4.INT_LT(x, y) : bool} v4.INT_LT(x, y) : bool <==> x < y);

axiom (forall x: int, y: int :: {v4.INT_ULT(x, y) : bool} v4.INT_ULT(x, y) : bool <==> x < y);

axiom (forall x: int, y: int :: {v4.INT_LEQ(x, y) : bool} v4.INT_LEQ(x, y) : bool <==> x <= y);

axiom (forall x: int, y: int :: {v4.INT_ULEQ(x, y) : bool} v4.INT_ULEQ(x, y) : bool <==> x <= y);

axiom (forall x: int, y: int :: {v4.INT_GT(x, y) : bool} v4.INT_GT(x, y) : bool <==> x > y);

axiom (forall x: int, y: int :: {v4.INT_UGT(x, y) : bool} v4.INT_UGT(x, y) : bool <==> x > y);

axiom (forall x: int, y: int :: {v4.INT_GEQ(x, y) : bool} v4.INT_GEQ(x, y) : bool <==> x >= y);

axiom (forall x: int, y: int :: {v4.INT_UGEQ(x, y) : bool} v4.INT_UGEQ(x, y) : bool <==> x >= y);

axiom (forall x: bv32, y: bv32 :: {v4.BV32_EQ(x, y) : bool} v4.BV32_EQ(x, y) : bool <==> x == y);

axiom (forall x: bv32, y: bv32 :: {v4.BV32_NEQ(x, y) : bool} v4.BV32_NEQ(x, y) : bool <==> x != y);

axiom (forall a: int, b: int, size: int :: {v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size)} v4.INT_LEQ(v4.INT_MULT(size, v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size)), v4.INT_SUB(a, b)) && v4.INT_LT(v4.INT_SUB(a, b), v4.INT_MULT(size, v4.INT_ADD(v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size), 1))));

axiom (forall a: int, b: int, size: int :: {v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size)} v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, 1) == v4.INT_SUB(a, b));

axiom (forall a: int, a_size: int, b: int :: {v4.MINUS_LEFT_PTR(a, a_size, b)} v4.MINUS_LEFT_PTR(a, a_size, b) == v4.INT_SUB(a, v4.INT_MULT(a_size, b)));

axiom (forall a: int, a_size: int, b: int :: {v4.PLUS(a, a_size, b)} v4.PLUS(a, a_size, b) == v4.INT_ADD(a, v4.INT_MULT(a_size, b)));

axiom (forall a: int, b: int :: {v4.MULT(a, b)} v4.MULT(a, b) == v4.INT_MULT(a, b));

axiom (forall a: int, b: int :: {v4.DIV(a, b)} a >= 0 && b > 0 ==> b * v4.DIV(a, b) <= a && a < b * (v4.DIV(a, b) + 1));

axiom (forall a: int, b: int :: {v4.DIV(a, b)} a >= 0 && b < 0 ==> b * v4.DIV(a, b) <= a && a < b * (v4.DIV(a, b) - 1));

axiom (forall a: int, b: int :: {v4.DIV(a, b)} a < 0 && b > 0 ==> b * v4.DIV(a, b) >= a && a > b * (v4.DIV(a, b) - 1));

axiom (forall a: int, b: int :: {v4.DIV(a, b)} a < 0 && b < 0 ==> b * v4.DIV(a, b) >= a && a > b * (v4.DIV(a, b) + 1));

axiom v4.POW2(1);

axiom v4.POW2(2);

axiom v4.POW2(4);

axiom v4.POW2(8);

axiom v4.POW2(16);

axiom v4.POW2(32);

axiom v4.POW2(64);

axiom v4.POW2(128);

axiom v4.POW2(256);

axiom v4.POW2(512);

axiom v4.POW2(1024);

axiom v4.POW2(2048);

axiom v4.POW2(4096);

axiom v4.POW2(8192);

axiom v4.POW2(16384);

axiom v4.POW2(32768);

axiom v4.POW2(65536);

axiom v4.POW2(131072);

axiom v4.POW2(262144);

axiom v4.POW2(524288);

axiom v4.POW2(1048576);

axiom v4.POW2(2097152);

axiom v4.POW2(4194304);

axiom v4.POW2(8388608);

axiom v4.POW2(16777216);

axiom v4.POW2(33554432);

axiom (forall a: int, b: int :: {v4.BIT_BAND(a, b)} a == b ==> v4.BIT_BAND(a, b) == a);

axiom (forall a: int, b: int :: {v4.BIT_BAND(a, b)} v4.POW2(a) && v4.POW2(b) && a != b ==> v4.BIT_BAND(a, b) == 0);

axiom (forall a: int, b: int :: {v4.BIT_BAND(a, b)} a == 0 || b == 0 ==> v4.BIT_BAND(a, b) == 0);

axiom (forall a: bool, b: int, c: int :: {v4.choose(a, b, c)} a ==> v4.choose(a, b, c) == b);

axiom (forall a: bool, b: int, c: int :: {v4.choose(a, b, c)} !a ==> v4.choose(a, b, c) == c);

axiom (forall a: bool :: {v4.LIFT(a)} a <==> v4.LIFT(a) != 0);

axiom (forall a: int :: {v4.PTR_NOT(a)} a == 0 ==> v4.PTR_NOT(a) != 0);

axiom (forall a: int :: {v4.PTR_NOT(a)} a != 0 ==> v4.PTR_NOT(a) == 0);

axiom (forall a: int :: {v4.NULL_CHECK(a)} a == 0 ==> v4.NULL_CHECK(a) != 0);

axiom (forall a: int :: {v4.NULL_CHECK(a)} a != 0 ==> v4.NULL_CHECK(a) == 0);

axiom (forall n: int, x: int, y: int :: {v4.AtLeast(n, x)[y]} v4.AtLeast(n, x)[y] ==> v4.INT_LEQ(x, y) && v4.Rep(n, x) == v4.Rep(n, y));

axiom (forall n: int, x: int, y: int :: {v4.AtLeast(n, x), v4.Rep(n, x), v4.Rep(n, y)} v4.INT_LEQ(x, y) && v4.Rep(n, x) == v4.Rep(n, y) ==> v4.AtLeast(n, x)[y]);

axiom (forall n: int, x: int :: {v4.AtLeast(n, x)} v4.AtLeast(n, x)[x]);

axiom (forall n: int, x: int, z: int :: {v4.PLUS(x, n, z)} v4.Rep(n, x) == v4.Rep(n, v4.PLUS(x, n, z)));

axiom (forall n: int, x: int :: {v4.Rep(n, x)} (exists k: int :: v4.INT_SUB(v4.Rep(n, x), x) == v4.INT_MULT(n, k)));

axiom (forall x: int, n: int, z: int :: {v4.Array(x, n, z)} v4.INT_LEQ(z, 0) ==> v4.Equal(v4.Array(x, n, z), v4.Empty()));

axiom (forall x: int, n: int, z: int :: {v4.Array(x, n, z)} v4.INT_GT(z, 0) ==> v4.Equal(v4.Array(x, n, z), v4.Difference(v4.AtLeast(n, x), v4.AtLeast(n, v4.PLUS(x, n, z)))));

axiom (forall x: int :: !v4.Empty()[x]);

axiom (forall x: int :: v4.SetTrue()[x]);

axiom (forall x: int, y: int :: {v4.Singleton(y)[x]} v4.Singleton(y)[x] <==> x == y);

axiom (forall y: int :: {v4.Singleton(y)} v4.Singleton(y)[y]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: {v4.Union(S, T)[x]} {v4.Union(S, T), S[x]} {v4.Union(S, T), T[x]} v4.Union(S, T)[x] <==> S[x] || T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: {v4.Intersection(S, T)[x]} {v4.Intersection(S, T), S[x]} {v4.Intersection(S, T), T[x]} v4.Intersection(S, T)[x] <==> S[x] && T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: {v4.Difference(S, T)[x]} {v4.Difference(S, T), S[x]} {v4.Difference(S, T), T[x]} v4.Difference(S, T)[x] <==> S[x] && !T[x]);

axiom (forall S: [int]bool, T: [int]bool :: {v4.Equal(S, T)} v4.Equal(S, T) <==> v4.Subset(S, T) && v4.Subset(T, S));

axiom (forall x: int, S: [int]bool, T: [int]bool :: {S[x], v4.Subset(S, T)} {T[x], v4.Subset(S, T)} S[x] && v4.Subset(S, T) ==> T[x]);

axiom (forall S: [int]bool, T: [int]bool :: {v4.Subset(S, T)} v4.Subset(S, T) || (exists x: int :: S[x] && !T[x]));

axiom (forall x: int, S: [int]bool, T: [int]bool :: {S[x], v4.Disjoint(S, T)} {T[x], v4.Disjoint(S, T)} !(S[x] && v4.Disjoint(S, T) && T[x]));

axiom (forall S: [int]bool, T: [int]bool :: {v4.Disjoint(S, T)} v4.Disjoint(S, T) || (exists x: int :: S[x] && T[x]));

axiom (forall f: [int]int, x: int :: {v4.Inverse(f, f[x])} v4.Inverse(f, f[x])[x]);

axiom (forall f: [int]int, x: int, y: int :: {v4.Inverse(f, y), f[x]} v4.Inverse(f, y)[x] ==> f[x] == y);

axiom (forall f: [int]int, x: int, y: int :: {v4.Inverse(f[x := y], y)} v4.Equal(v4.Inverse(f[x := y], y), v4.Union(v4.Inverse(f, y), v4.Singleton(x))));

axiom (forall f: [int]int, x: int, y: int, z: int :: {v4.Inverse(f[x := y], z)} y == z || v4.Equal(v4.Inverse(f[x := y], z), v4.Difference(v4.Inverse(f, z), v4.Singleton(x))));

axiom (forall x: int, S: [int]bool, M: [int]int :: {v4.Dereference(S, M)[x]} v4.Dereference(S, M)[x] ==> (exists y: int :: x == M[y] && S[y]));

axiom (forall x: int, S: [int]bool, M: [int]int :: {M[x], S[x], v4.Dereference(S, M)} S[x] ==> v4.Dereference(S, M)[M[x]]);

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: {v4.Dereference(S, M[x := y])} !S[x] ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Dereference(S, M)));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: {v4.Dereference(S, M[x := y])} S[x] && v4.Equal(v4.Intersection(v4.Inverse(M, M[x]), S), v4.Singleton(x)) ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Union(v4.Difference(v4.Dereference(S, M), v4.Singleton(M[x])), v4.Singleton(y))));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: {v4.Dereference(S, M[x := y])} S[x] && !v4.Equal(v4.Intersection(v4.Inverse(M, M[x]), S), v4.Singleton(x)) ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Union(v4.Dereference(S, M), v4.Singleton(y))));

axiom (forall M: [name][int]int, x: int :: {v4.Unified(M)[x]} v4.Unified(M)[x] == M[v4.Field(x)][x]);

axiom (forall M: [name][int]int, x: int, y: int :: {v4.Unified(M[v4.Field(x) := M[v4.Field(x)][x := y]])} v4.Unified(M[v4.Field(x) := M[v4.Field(x)][x := y]]) == v4.Unified(M)[x := y]);

procedure v4.havoc_assert(i: int);

procedure v4.havoc_assume(i: int);

procedure v4.__HAVOC_free(a: int);

procedure v4.__HAVOC_malloc(obj_size: int) returns (new: int);
  free ensures new == _uf_v4.__HAVOC_malloc_new(obj_size);

procedure v4.__HAVOC_det_malloc(obj_size: int) returns (new: int);
  free ensures new == _uf_v4.__HAVOC_det_malloc_new(obj_size);

procedure v4.__HAVOC_memset_split_1(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_1_ret(A, p, c, n);

procedure v4.__HAVOC_memset_split_2(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_2_ret(A, p, c, n);

procedure v4.__HAVOC_memset_split_4(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_4_ret(A, p, c, n);

procedure v4.nondet_choice() returns (x: int);
  free ensures x == _uf_v4.nondet_choice_x();

procedure v4.det_choice() returns (x: int);
  free ensures x == _uf_v4.det_choice_x();

procedure v4._strdup(str: int) returns (new: int);
  free ensures new == _uf_v4._strdup_new(str);

procedure v4._xstrcasecmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v4._xstrcasecmp_ret(a0, a1);

procedure v4._xstrcmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v4._xstrcmp_ret(a0, a1);

procedure v4.UnsignedAdd(a0: int, a1: int) returns (ret: int);

procedure v4.UnsignedSub(a0: int, a1: int) returns (ret: int);

procedure {:inline 1} v4.Eval(e_.1: int);
  modifies v4.Mem_T.result__EXPR;
  free ensures v4.Mem_T.result__EXPR == _uf_v4.Eval_v4.Mem_T.result__EXPR(e_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.isUnsigned));

procedure v4.EvalEntry1(e_.1: int, outval_.1: int);
  modifies v4.isUnsigned, v4.Mem_T.result__EXPR, v4.Mem_T.INT4;
  free ensures v4.isUnsigned == _uf_v4.EvalEntry1_v4.isUnsigned(e_.1, outval_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.Mem_T.INT4), old (v4.isUnsigned));
  free ensures v4.Mem_T.result__EXPR == _uf_v4.EvalEntry1_v4.Mem_T.result__EXPR(e_.1, outval_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.Mem_T.INT4), old (v4.isUnsigned));
  free ensures v4.Mem_T.INT4 == _uf_v4.EvalEntry1_v4.Mem_T.INT4(e_.1, outval_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.Mem_T.INT4), old (v4.isUnsigned));

procedure v4.EvalEntry2(e_.1: int);
  modifies v4.isUnsigned, v4.Mem_T.result__EXPR;
  free ensures v4.isUnsigned == _uf_v4.EvalEntry2_v4.isUnsigned(e_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.isUnsigned));
  free ensures v4.Mem_T.result__EXPR == _uf_v4.EvalEntry2_v4.Mem_T.result__EXPR(e_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.isUnsigned));

procedure v4.__havoc_heapglobal_init();

implementation {:inline 1} v4.Eval(e_.1: int) {
  var havoc_stringTemp: int;
  var condVal: int;
  var a1: int;
  var a2: int;
  var e: int;
  var op: int;
  var res: int;
  var result.UnsignedAdd$1: int;
  var result.UnsignedSub$2: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
  havoc_stringTemp := 0;
  goto start#2;
  start#2:
  assume v4.INT_LT(e_.1, v4.alloc);
  a1 := 0;
  a2 := 0;
  e := 0;
  op := 0;
  res := 0;
  result.UnsignedAdd$1 := 0;
  result.UnsignedSub$2 := 0;
  e := e_.1;
  goto label_3#2;
  label_3#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
  goto label_4#2;
  label_4#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
  goto label_5#2;
  label_5#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
  goto label_6#2;
  label_6#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
  goto label_7#2;
  label_7#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 21} true;
  assert true;
  op := v4.Mem_T.oper__EXPR[v4.oper__EXPR(e)];
  assume v4.value_is(v4.__ctobpl_const_1, op);
  assume v4.value_is(v4.__ctobpl_const_2, e);
  assume v4.value_is(v4.__ctobpl_const_3, v4.Mem_T.oper__EXPR[v4.oper__EXPR(e)]);
  goto label_8#2;
  label_8#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 22} true;
  assert true;
  a1 := v4.Mem_T.op1__EXPR[v4.op1__EXPR(e)];
  assume v4.value_is(v4.__ctobpl_const_4, a1);
  assume v4.value_is(v4.__ctobpl_const_5, e);
  assume v4.value_is(v4.__ctobpl_const_6, v4.Mem_T.op1__EXPR[v4.op1__EXPR(e)]);
  goto label_9#2;
  label_9#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 23} true;
  assert true;
  a2 := v4.Mem_T.op2__EXPR[v4.op2__EXPR(e)];
  assume v4.value_is(v4.__ctobpl_const_7, a2);
  assume v4.value_is(v4.__ctobpl_const_8, e);
  assume v4.value_is(v4.__ctobpl_const_9, v4.Mem_T.op2__EXPR[v4.op2__EXPR(e)]);
  goto label_10#2;
  label_10#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 24} true;
  res := 0 - 1;
  assume v4.value_is(v4.__ctobpl_const_10, res);
  goto label_11#2;
  label_11#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 26} true;
  goto label_11_case_0#2, label_11_case_1#2, label_11_case_2#2;
  label_11_case_2#2:
  assume v4.INT_EQ(op, 2);
  assume v4.value_is(v4.__ctobpl_const_11, op);
  goto label_14#2;
  label_14#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 35} true;
  goto label_14_true#2, label_14_false#2;
  label_14_false#2:
  assume v4.isUnsigned == 0;
  assume v4.value_is(v4.__ctobpl_const_16, v4.isUnsigned);
  goto label_15#2;
  label_15#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 38} true;
  res := v4.MINUS_BOTH_PTR_OR_BOTH_INT(a1, a2, 1);
  assume v4.value_is(v4.__ctobpl_const_17, res);
  assume v4.value_is(v4.__ctobpl_const_18, a1);
  assume v4.value_is(v4.__ctobpl_const_19, a2);
  goto label_12#2;
  label_14_true#2:
  assume v4.isUnsigned != 0;
  assume v4.value_is(v4.__ctobpl_const_16, v4.isUnsigned);
  goto label_16#2;
  label_16#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 36} true;
  call result.UnsignedSub$2 := v4.UnsignedSub(a1, a2);
  assume v4.value_is(v4.__ctobpl_const_20, a1);
  assume v4.value_is(v4.__ctobpl_const_21, a2);
  assume v4.value_is(v4.__ctobpl_const_22, a1);
  assume v4.value_is(v4.__ctobpl_const_23, a2);
  goto label_19#2;
  label_19#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 36} true;
  res := result.UnsignedSub$2;
  assume v4.value_is(v4.__ctobpl_const_24, res);
  assume v4.value_is(v4.__ctobpl_const_25, result.UnsignedSub$2);
  goto label_12#2;
  label_11_case_1#2:
  assume v4.INT_EQ(op, 1);
  assume v4.value_is(v4.__ctobpl_const_11, op);
  goto label_13#2;
  label_13#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 29} true;
  goto label_13_true#2, label_13_false#2;
  label_13_false#2:
  assume v4.isUnsigned == 0;
  assume v4.value_is(v4.__ctobpl_const_15, v4.isUnsigned);
  goto label_20#2;
  label_20#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 32} true;
  res := v4.PLUS(a1, 1, a2);
  assume v4.value_is(v4.__ctobpl_const_26, res);
  assume v4.value_is(v4.__ctobpl_const_27, a1);
  assume v4.value_is(v4.__ctobpl_const_28, a2);
  goto label_12#2;
  label_13_true#2:
  assume v4.isUnsigned != 0;
  assume v4.value_is(v4.__ctobpl_const_15, v4.isUnsigned);
  goto label_21#2;
  label_21#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 30} true;
  call result.UnsignedAdd$1 := v4.UnsignedAdd(a1, a2);
  assume v4.value_is(v4.__ctobpl_const_29, a1);
  assume v4.value_is(v4.__ctobpl_const_30, a2);
  assume v4.value_is(v4.__ctobpl_const_31, a1);
  assume v4.value_is(v4.__ctobpl_const_32, a2);
  goto label_24#2;
  label_24#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 30} true;
  res := result.UnsignedAdd$1;
  assume v4.value_is(v4.__ctobpl_const_33, res);
  assume v4.value_is(v4.__ctobpl_const_34, result.UnsignedAdd$1);
  goto label_12#2;
  label_11_case_0#2:
  assume v4.INT_NEQ(op, 1);
  assume v4.INT_NEQ(op, 2);
  assume v4.value_is(v4.__ctobpl_const_11, op);
  goto label_12#2;
  label_12#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 41} true;
  assert true;
  v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR[v4.result__EXPR(e) := res];
  assume v4.value_is(v4.__ctobpl_const_12, e);
  assume v4.value_is(v4.__ctobpl_const_13, v4.Mem_T.result__EXPR[v4.result__EXPR(e)]);
  assume v4.value_is(v4.__ctobpl_const_14, res);
  goto label_1#2;
  label_1#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 42} true;
  return;
}

implementation v4.EvalEntry1(e_.1: int, outval_.1: int) {
  var havoc_stringTemp: int;
  var condVal: int;
  var e: int;
  var outval: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
  havoc_stringTemp := 0;
  goto start#2;
  start#2:
  assume v4.INT_LT(e_.1, v4.alloc);
  assume v4.INT_LT(outval_.1, v4.alloc);
  e := 0;
  outval := 0;
  e := e_.1;
  outval := outval_.1;
  goto label_3#2;
  label_3#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 47} true;
  v4.isUnsigned := 1;
  assume v4.value_is(v4.__ctobpl_const_35, v4.isUnsigned);
  goto label_4#2;
  label_4#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 48} true;
  call v4.Eval(e);
  assume v4.value_is(v4.__ctobpl_const_36, e);
  assume v4.value_is(v4.__ctobpl_const_37, e);
  goto label_7#2;
  label_7#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 49} true;
  assert true;
  assert true;
  v4.Mem_T.INT4 := v4.Mem_T.INT4[outval := v4.Mem_T.result__EXPR[v4.result__EXPR(e)]];
  assume v4.value_is(v4.__ctobpl_const_38, outval);
  assume v4.value_is(v4.__ctobpl_const_39, v4.Mem_T.INT4[outval]);
  assume v4.value_is(v4.__ctobpl_const_40, e);
  assume v4.value_is(v4.__ctobpl_const_41, v4.Mem_T.result__EXPR[v4.result__EXPR(e)]);
  goto label_1#2;
  label_1#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 50} true;
  return;
}

implementation v4.EvalEntry2(e_.1: int) {
  var havoc_stringTemp: int;
  var condVal: int;
  var e: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
  havoc_stringTemp := 0;
  goto start#2;
  start#2:
  assume v4.INT_LT(e_.1, v4.alloc);
  e := 0;
  e := e_.1;
  goto label_3#2;
  label_3#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 54} true;
  v4.isUnsigned := 0;
  assume v4.value_is(v4.__ctobpl_const_42, v4.isUnsigned);
  goto label_4#2;
  label_4#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 55} true;
  call v4.Eval(e);
  assume v4.value_is(v4.__ctobpl_const_43, e);
  assume v4.value_is(v4.__ctobpl_const_44, e);
  goto label_1#2;
  label_1#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 56} true;
  return;
}

implementation v4.__havoc_heapglobal_init() {
  anon0#2:
  return;
}

var v2.Mem: [name][int]int;

var v2.alloc: int;

var v2.Mem_T.INT4: [int]int;

var v2.Mem_T.op1__EXPR: [int]int;

var v2.Mem_T.op2__EXPR: [int]int;

var v2.Mem_T.oper__EXPR: [int]int;

var v2.Mem_T.result__EXPR: [int]int;

var v2.detChoiceCnt: int;

var v2.Res_KERNEL_SOURCE: [int]int;

var v2.Res_PROBED: [int]int;

const unique v2.T.oper__EXPR: name;

const unique v2.T.op1__EXPR: name;

const unique v2.T.op2__EXPR: name;

const unique v2.T.result__EXPR: name;

const unique v2.T.INT4: name;

const unique v2.T.PINT4: name;

const unique v2.T.PPINT4: name;

const unique v2.T.PP_EXPR: name;

const unique v2.T.P_EXPR: name;

const unique v2.T._EXPR: name;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 21} unique v2.__ctobpl_const_7: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 21} unique v2.__ctobpl_const_8: int;

const {:model_const "e->oper"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 19} unique v2.__ctobpl_const_3: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 20} unique v2.__ctobpl_const_4: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 20} unique v2.__ctobpl_const_5: int;

const {:model_const "e->op1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 20} unique v2.__ctobpl_const_6: int;

const {:model_const "e->op2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 21} unique v2.__ctobpl_const_9: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 22} unique v2.__ctobpl_const_10: int;

const {:model_const "op"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 24} unique v2.__ctobpl_const_11: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 35} unique v2.__ctobpl_const_12: int;

const {:model_const "e->result"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 35} unique v2.__ctobpl_const_13: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 35} unique v2.__ctobpl_const_14: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 27} unique v2.__ctobpl_const_15: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 27} unique v2.__ctobpl_const_16: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 27} unique v2.__ctobpl_const_17: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 29} unique v2.__ctobpl_const_18: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 29} unique v2.__ctobpl_const_19: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 29} unique v2.__ctobpl_const_20: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 40} unique v2.__ctobpl_const_21: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 40} unique v2.__ctobpl_const_22: int;

const {:model_const "outval"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 41} unique v2.__ctobpl_const_23: int;

const {:model_const "*outval"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 41} unique v2.__ctobpl_const_24: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 41} unique v2.__ctobpl_const_25: int;

const {:model_const "e->result"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 41} unique v2.__ctobpl_const_26: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 46} unique v2.__ctobpl_const_27: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 46} unique v2.__ctobpl_const_28: int;

const {:model_const "op"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 19} unique v2.__ctobpl_const_1: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 19} unique v2.__ctobpl_const_2: int;

axiom (forall b0: byte, c0: byte :: {v4.OneByteToInt(b0), v4.OneByteToInt(c0)} v4.OneByteToInt(b0) == v4.OneByteToInt(c0) ==> b0 == c0);

axiom (forall b0: byte, b1: byte, c0: byte, c1: byte :: {v4.TwoBytesToInt(b0, b1), v4.TwoBytesToInt(c0, c1)} v4.TwoBytesToInt(b0, b1) == v4.TwoBytesToInt(c0, c1) ==> b0 == c0 && b1 == c1);

axiom (forall b0: byte, b1: byte, b2: byte, b3: byte, c0: byte, c1: byte, c2: byte, c3: byte :: {v4.FourBytesToInt(b0, b1, b2, b3), v4.FourBytesToInt(c0, c1, c2, c3)} v4.FourBytesToInt(b0, b1, b2, b3) == v4.FourBytesToInt(c0, c1, c2, c3) ==> b0 == c0 && b1 == c1 && b2 == c2 && b3 == c3);

axiom (forall x: int :: {v4.Base(x)} v4.INT_LEQ(v4.Base(x), x));

axiom (forall a: int, t: name :: {v4.Match(a, v4.T.Ptr(t))} v4.Match(a, v4.T.Ptr(t)) <==> v4.Field(a) == v4.T.Ptr(t));

axiom (forall b: int, a: int, t: name :: {v4.MatchBase(b, a, v4.T.Ptr(t))} v4.MatchBase(b, a, v4.T.Ptr(t)) <==> v4.Base(a) == b);

axiom (forall v: int, t: name :: {v4.HasType(v, v4.T.Ptr(t))} v4.HasType(v, v4.T.Ptr(t)) <==> v == 0 || (v4.INT_GT(v, 0) && v4.Match(v, t) && v4.MatchBase(v4.Base(v), v, t)));

axiom (forall x: int, S: [int]bool :: {v4._S_op1__EXPR(S)[x]} v4._S_op1__EXPR(S)[x] <==> S[v4.op1__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: {v4._S_op1__EXPRInv(S)[x]} v4._S_op1__EXPRInv(S)[x] <==> S[v4.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_op1__EXPR(S)} S[x] ==> v4._S_op1__EXPR(S)[v4.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_op1__EXPRInv(S)} S[x] ==> v4._S_op1__EXPRInv(S)[v4.op1__EXPRInv(x)]);

axiom (forall x: int :: {v4.op1__EXPR(x)} v4.op1__EXPR(x) == v4.INT_ADD(x, 4));

axiom (forall x: int :: {v4.op1__EXPRInv(x)} v4.op1__EXPRInv(x) == v4.INT_SUB(x, 4));

axiom (forall x: int :: {v4.op1__EXPR(x)} v4.op1__EXPR(x) == v4.PLUS(x, 1, 4));

axiom (forall x: int, S: [int]bool :: {v4._S_op2__EXPR(S)[x]} v4._S_op2__EXPR(S)[x] <==> S[v4.op2__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: {v4._S_op2__EXPRInv(S)[x]} v4._S_op2__EXPRInv(S)[x] <==> S[v4.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_op2__EXPR(S)} S[x] ==> v4._S_op2__EXPR(S)[v4.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_op2__EXPRInv(S)} S[x] ==> v4._S_op2__EXPRInv(S)[v4.op2__EXPRInv(x)]);

axiom (forall x: int :: {v4.op2__EXPR(x)} v4.op2__EXPR(x) == v4.INT_ADD(x, 8));

axiom (forall x: int :: {v4.op2__EXPRInv(x)} v4.op2__EXPRInv(x) == v4.INT_SUB(x, 8));

axiom (forall x: int :: {v4.op2__EXPR(x)} v4.op2__EXPR(x) == v4.PLUS(x, 1, 8));

axiom (forall x: int, S: [int]bool :: {v4._S_oper__EXPR(S)[x]} v4._S_oper__EXPR(S)[x] <==> S[v4.oper__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: {v4._S_oper__EXPRInv(S)[x]} v4._S_oper__EXPRInv(S)[x] <==> S[v4.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_oper__EXPR(S)} S[x] ==> v4._S_oper__EXPR(S)[v4.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_oper__EXPRInv(S)} S[x] ==> v4._S_oper__EXPRInv(S)[v4.oper__EXPRInv(x)]);

axiom (forall x: int :: {v4.oper__EXPR(x)} v4.oper__EXPR(x) == v4.INT_ADD(x, 0));

axiom (forall x: int :: {v4.oper__EXPRInv(x)} v4.oper__EXPRInv(x) == v4.INT_SUB(x, 0));

axiom (forall x: int :: {v4.oper__EXPR(x)} v4.oper__EXPR(x) == v4.PLUS(x, 1, 0));

axiom (forall x: int, S: [int]bool :: {v4._S_result__EXPR(S)[x]} v4._S_result__EXPR(S)[x] <==> S[v4.result__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: {v4._S_result__EXPRInv(S)[x]} v4._S_result__EXPRInv(S)[x] <==> S[v4.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_result__EXPR(S)} S[x] ==> v4._S_result__EXPR(S)[v4.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: {S[x], v4._S_result__EXPRInv(S)} S[x] ==> v4._S_result__EXPRInv(S)[v4.result__EXPRInv(x)]);

axiom (forall x: int :: {v4.result__EXPR(x)} v4.result__EXPR(x) == v4.INT_ADD(x, 12));

axiom (forall x: int :: {v4.result__EXPRInv(x)} v4.result__EXPRInv(x) == v4.INT_SUB(x, 12));

axiom (forall x: int :: {v4.result__EXPR(x)} v4.result__EXPR(x) == v4.PLUS(x, 1, 12));

axiom (forall x: int, y: int :: {v4.INT_EQ(x, y) : bool} v4.INT_EQ(x, y) : bool <==> x == y);

axiom (forall x: int, y: int :: {v4.INT_NEQ(x, y) : bool} v4.INT_NEQ(x, y) : bool <==> x != y);

axiom (forall x: int, y: int :: {v4.INT_ADD(x, y) : int} v4.INT_ADD(x, y) : int == x + y);

axiom (forall x: int, y: int :: {v4.INT_SUB(x, y) : int} v4.INT_SUB(x, y) : int == x - y);

axiom (forall x: int, y: int :: {v4.INT_MULT(x, y) : int} v4.INT_MULT(x, y) : int == x * y);

axiom (forall x: int, y: int :: {v4.INT_DIV(x, y) : int} v4.INT_DIV(x, y) : int == x div y);

axiom (forall x: int, y: int :: {v4.INT_LT(x, y) : bool} v4.INT_LT(x, y) : bool <==> x < y);

axiom (forall x: int, y: int :: {v4.INT_ULT(x, y) : bool} v4.INT_ULT(x, y) : bool <==> x < y);

axiom (forall x: int, y: int :: {v4.INT_LEQ(x, y) : bool} v4.INT_LEQ(x, y) : bool <==> x <= y);

axiom (forall x: int, y: int :: {v4.INT_ULEQ(x, y) : bool} v4.INT_ULEQ(x, y) : bool <==> x <= y);

axiom (forall x: int, y: int :: {v4.INT_GT(x, y) : bool} v4.INT_GT(x, y) : bool <==> x > y);

axiom (forall x: int, y: int :: {v4.INT_UGT(x, y) : bool} v4.INT_UGT(x, y) : bool <==> x > y);

axiom (forall x: int, y: int :: {v4.INT_GEQ(x, y) : bool} v4.INT_GEQ(x, y) : bool <==> x >= y);

axiom (forall x: int, y: int :: {v4.INT_UGEQ(x, y) : bool} v4.INT_UGEQ(x, y) : bool <==> x >= y);

axiom (forall x: bv32, y: bv32 :: {v4.BV32_EQ(x, y) : bool} v4.BV32_EQ(x, y) : bool <==> x == y);

axiom (forall x: bv32, y: bv32 :: {v4.BV32_NEQ(x, y) : bool} v4.BV32_NEQ(x, y) : bool <==> x != y);

axiom (forall a: int, b: int, size: int :: {v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size)} v4.INT_LEQ(v4.INT_MULT(size, v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size)), v4.INT_SUB(a, b)) && v4.INT_LT(v4.INT_SUB(a, b), v4.INT_MULT(size, v4.INT_ADD(v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size), 1))));

axiom (forall a: int, b: int, size: int :: {v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size)} v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, 1) == v4.INT_SUB(a, b));

axiom (forall a: int, a_size: int, b: int :: {v4.MINUS_LEFT_PTR(a, a_size, b)} v4.MINUS_LEFT_PTR(a, a_size, b) == v4.INT_SUB(a, v4.INT_MULT(a_size, b)));

axiom (forall a: int, a_size: int, b: int :: {v4.PLUS(a, a_size, b)} v4.PLUS(a, a_size, b) == v4.INT_ADD(a, v4.INT_MULT(a_size, b)));

axiom (forall a: int, b: int :: {v4.MULT(a, b)} v4.MULT(a, b) == v4.INT_MULT(a, b));

axiom (forall a: int, b: int :: {v4.DIV(a, b)} a >= 0 && b > 0 ==> b * v4.DIV(a, b) <= a && a < b * (v4.DIV(a, b) + 1));

axiom (forall a: int, b: int :: {v4.DIV(a, b)} a >= 0 && b < 0 ==> b * v4.DIV(a, b) <= a && a < b * (v4.DIV(a, b) - 1));

axiom (forall a: int, b: int :: {v4.DIV(a, b)} a < 0 && b > 0 ==> b * v4.DIV(a, b) >= a && a > b * (v4.DIV(a, b) - 1));

axiom (forall a: int, b: int :: {v4.DIV(a, b)} a < 0 && b < 0 ==> b * v4.DIV(a, b) >= a && a > b * (v4.DIV(a, b) + 1));

axiom v4.POW2(1);

axiom v4.POW2(2);

axiom v4.POW2(4);

axiom v4.POW2(8);

axiom v4.POW2(16);

axiom v4.POW2(32);

axiom v4.POW2(64);

axiom v4.POW2(128);

axiom v4.POW2(256);

axiom v4.POW2(512);

axiom v4.POW2(1024);

axiom v4.POW2(2048);

axiom v4.POW2(4096);

axiom v4.POW2(8192);

axiom v4.POW2(16384);

axiom v4.POW2(32768);

axiom v4.POW2(65536);

axiom v4.POW2(131072);

axiom v4.POW2(262144);

axiom v4.POW2(524288);

axiom v4.POW2(1048576);

axiom v4.POW2(2097152);

axiom v4.POW2(4194304);

axiom v4.POW2(8388608);

axiom v4.POW2(16777216);

axiom v4.POW2(33554432);

axiom (forall a: int, b: int :: {v4.BIT_BAND(a, b)} a == b ==> v4.BIT_BAND(a, b) == a);

axiom (forall a: int, b: int :: {v4.BIT_BAND(a, b)} v4.POW2(a) && v4.POW2(b) && a != b ==> v4.BIT_BAND(a, b) == 0);

axiom (forall a: int, b: int :: {v4.BIT_BAND(a, b)} a == 0 || b == 0 ==> v4.BIT_BAND(a, b) == 0);

axiom (forall a: bool, b: int, c: int :: {v4.choose(a, b, c)} a ==> v4.choose(a, b, c) == b);

axiom (forall a: bool, b: int, c: int :: {v4.choose(a, b, c)} !a ==> v4.choose(a, b, c) == c);

axiom (forall a: bool :: {v4.LIFT(a)} a <==> v4.LIFT(a) != 0);

axiom (forall a: int :: {v4.PTR_NOT(a)} a == 0 ==> v4.PTR_NOT(a) != 0);

axiom (forall a: int :: {v4.PTR_NOT(a)} a != 0 ==> v4.PTR_NOT(a) == 0);

axiom (forall a: int :: {v4.NULL_CHECK(a)} a == 0 ==> v4.NULL_CHECK(a) != 0);

axiom (forall a: int :: {v4.NULL_CHECK(a)} a != 0 ==> v4.NULL_CHECK(a) == 0);

axiom (forall n: int, x: int, y: int :: {v4.AtLeast(n, x)[y]} v4.AtLeast(n, x)[y] ==> v4.INT_LEQ(x, y) && v4.Rep(n, x) == v4.Rep(n, y));

axiom (forall n: int, x: int, y: int :: {v4.AtLeast(n, x), v4.Rep(n, x), v4.Rep(n, y)} v4.INT_LEQ(x, y) && v4.Rep(n, x) == v4.Rep(n, y) ==> v4.AtLeast(n, x)[y]);

axiom (forall n: int, x: int :: {v4.AtLeast(n, x)} v4.AtLeast(n, x)[x]);

axiom (forall n: int, x: int, z: int :: {v4.PLUS(x, n, z)} v4.Rep(n, x) == v4.Rep(n, v4.PLUS(x, n, z)));

axiom (forall n: int, x: int :: {v4.Rep(n, x)} (exists k: int :: v4.INT_SUB(v4.Rep(n, x), x) == v4.INT_MULT(n, k)));

axiom (forall x: int, n: int, z: int :: {v4.Array(x, n, z)} v4.INT_LEQ(z, 0) ==> v4.Equal(v4.Array(x, n, z), v4.Empty()));

axiom (forall x: int, n: int, z: int :: {v4.Array(x, n, z)} v4.INT_GT(z, 0) ==> v4.Equal(v4.Array(x, n, z), v4.Difference(v4.AtLeast(n, x), v4.AtLeast(n, v4.PLUS(x, n, z)))));

axiom (forall x: int :: !v4.Empty()[x]);

axiom (forall x: int :: v4.SetTrue()[x]);

axiom (forall x: int, y: int :: {v4.Singleton(y)[x]} v4.Singleton(y)[x] <==> x == y);

axiom (forall y: int :: {v4.Singleton(y)} v4.Singleton(y)[y]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: {v4.Union(S, T)[x]} {v4.Union(S, T), S[x]} {v4.Union(S, T), T[x]} v4.Union(S, T)[x] <==> S[x] || T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: {v4.Intersection(S, T)[x]} {v4.Intersection(S, T), S[x]} {v4.Intersection(S, T), T[x]} v4.Intersection(S, T)[x] <==> S[x] && T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: {v4.Difference(S, T)[x]} {v4.Difference(S, T), S[x]} {v4.Difference(S, T), T[x]} v4.Difference(S, T)[x] <==> S[x] && !T[x]);

axiom (forall S: [int]bool, T: [int]bool :: {v4.Equal(S, T)} v4.Equal(S, T) <==> v4.Subset(S, T) && v4.Subset(T, S));

axiom (forall x: int, S: [int]bool, T: [int]bool :: {S[x], v4.Subset(S, T)} {T[x], v4.Subset(S, T)} S[x] && v4.Subset(S, T) ==> T[x]);

axiom (forall S: [int]bool, T: [int]bool :: {v4.Subset(S, T)} v4.Subset(S, T) || (exists x: int :: S[x] && !T[x]));

axiom (forall x: int, S: [int]bool, T: [int]bool :: {S[x], v4.Disjoint(S, T)} {T[x], v4.Disjoint(S, T)} !(S[x] && v4.Disjoint(S, T) && T[x]));

axiom (forall S: [int]bool, T: [int]bool :: {v4.Disjoint(S, T)} v4.Disjoint(S, T) || (exists x: int :: S[x] && T[x]));

axiom (forall f: [int]int, x: int :: {v4.Inverse(f, f[x])} v4.Inverse(f, f[x])[x]);

axiom (forall f: [int]int, x: int, y: int :: {v4.Inverse(f, y), f[x]} v4.Inverse(f, y)[x] ==> f[x] == y);

axiom (forall f: [int]int, x: int, y: int :: {v4.Inverse(f[x := y], y)} v4.Equal(v4.Inverse(f[x := y], y), v4.Union(v4.Inverse(f, y), v4.Singleton(x))));

axiom (forall f: [int]int, x: int, y: int, z: int :: {v4.Inverse(f[x := y], z)} y == z || v4.Equal(v4.Inverse(f[x := y], z), v4.Difference(v4.Inverse(f, z), v4.Singleton(x))));

axiom (forall x: int, S: [int]bool, M: [int]int :: {v4.Dereference(S, M)[x]} v4.Dereference(S, M)[x] ==> (exists y: int :: x == M[y] && S[y]));

axiom (forall x: int, S: [int]bool, M: [int]int :: {M[x], S[x], v4.Dereference(S, M)} S[x] ==> v4.Dereference(S, M)[M[x]]);

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: {v4.Dereference(S, M[x := y])} !S[x] ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Dereference(S, M)));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: {v4.Dereference(S, M[x := y])} S[x] && v4.Equal(v4.Intersection(v4.Inverse(M, M[x]), S), v4.Singleton(x)) ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Union(v4.Difference(v4.Dereference(S, M), v4.Singleton(M[x])), v4.Singleton(y))));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: {v4.Dereference(S, M[x := y])} S[x] && !v4.Equal(v4.Intersection(v4.Inverse(M, M[x]), S), v4.Singleton(x)) ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Union(v4.Dereference(S, M), v4.Singleton(y))));

axiom (forall M: [name][int]int, x: int :: {v4.Unified(M)[x]} v4.Unified(M)[x] == M[v4.Field(x)][x]);

axiom (forall M: [name][int]int, x: int, y: int :: {v4.Unified(M[v4.Field(x) := M[v4.Field(x)][x := y]])} v4.Unified(M[v4.Field(x) := M[v4.Field(x)][x := y]]) == v4.Unified(M)[x := y]);

procedure v2.havoc_assert(i: int);

procedure v2.havoc_assume(i: int);

procedure v2.__HAVOC_free(a: int);

procedure v2.__HAVOC_malloc(obj_size: int) returns (new: int);
  free ensures new == _uf_v4.__HAVOC_malloc_new(obj_size);

procedure v2.__HAVOC_det_malloc(obj_size: int) returns (new: int);
  free ensures new == _uf_v4.__HAVOC_det_malloc_new(obj_size);

procedure v2.__HAVOC_memset_split_1(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_1_ret(A, p, c, n);

procedure v2.__HAVOC_memset_split_2(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_2_ret(A, p, c, n);

procedure v2.__HAVOC_memset_split_4(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_4_ret(A, p, c, n);

procedure v2.nondet_choice() returns (x: int);
  free ensures x == _uf_v4.nondet_choice_x();

procedure v2.det_choice() returns (x: int);
  free ensures x == _uf_v4.det_choice_x();

procedure v2._strdup(str: int) returns (new: int);
  free ensures new == _uf_v4._strdup_new(str);

procedure v2._xstrcasecmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v4._xstrcasecmp_ret(a0, a1);

procedure v2._xstrcmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v4._xstrcmp_ret(a0, a1);

procedure {:inline 1} v2.Eval(e_.1: int);
  modifies v4.Mem_T.result__EXPR;
  free ensures v4.Mem_T.result__EXPR == _uf_v4.Eval_v4.Mem_T.result__EXPR(e_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.isUnsigned));

procedure v2.EvalEntry1(e_.1: int, outval_.1: int);
  modifies v4.Mem_T.result__EXPR, v4.Mem_T.INT4;
  free ensures v4.Mem_T.result__EXPR == _uf_v4.EvalEntry1_v4.Mem_T.result__EXPR(e_.1, outval_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.Mem_T.INT4), old (v4.isUnsigned));
  free ensures v4.Mem_T.INT4 == _uf_v4.EvalEntry1_v4.Mem_T.INT4(e_.1, outval_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.Mem_T.INT4), old (v4.isUnsigned));

procedure v2.EvalEntry2(e_.1: int);
  modifies v4.Mem_T.result__EXPR;
  free ensures v4.Mem_T.result__EXPR == _uf_v4.EvalEntry2_v4.Mem_T.result__EXPR(e_.1, old (v4.alloc), old (v4.Mem_T.oper__EXPR), old (v4.Mem_T.op1__EXPR), old (v4.Mem_T.op2__EXPR), old (v4.Mem_T.result__EXPR), old (v4.isUnsigned));

procedure v2.__havoc_heapglobal_init();

implementation {:inline 1} v2.Eval(e_.1: int) {
  var havoc_stringTemp: int;
  var condVal: int;
  var a1: int;
  var a2: int;
  var e: int;
  var op: int;
  var res: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
  havoc_stringTemp := 0;
  goto start#2;
  start#2:
  assume v4.INT_LT(e_.1, v4.alloc);
  a1 := 0;
  a2 := 0;
  e := 0;
  op := 0;
  res := 0;
  e := e_.1;
  goto label_3#2;
  label_3#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
  goto label_4#2;
  label_4#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
  goto label_5#2;
  label_5#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
  goto label_6#2;
  label_6#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
  goto label_7#2;
  label_7#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 19} true;
  assert true;
  op := v4.Mem_T.oper__EXPR[v4.oper__EXPR(e)];
  assume v4.value_is(v2.__ctobpl_const_1, op);
  assume v4.value_is(v2.__ctobpl_const_2, e);
  assume v4.value_is(v2.__ctobpl_const_3, v4.Mem_T.oper__EXPR[v4.oper__EXPR(e)]);
  goto label_8#2;
  label_8#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 20} true;
  assert true;
  a1 := v4.Mem_T.op1__EXPR[v4.op1__EXPR(e)];
  assume v4.value_is(v2.__ctobpl_const_4, a1);
  assume v4.value_is(v2.__ctobpl_const_5, e);
  assume v4.value_is(v2.__ctobpl_const_6, v4.Mem_T.op1__EXPR[v4.op1__EXPR(e)]);
  goto label_9#2;
  label_9#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 21} true;
  assert true;
  a2 := v4.Mem_T.op2__EXPR[v4.op2__EXPR(e)];
  assume v4.value_is(v2.__ctobpl_const_7, a2);
  assume v4.value_is(v2.__ctobpl_const_8, e);
  assume v4.value_is(v2.__ctobpl_const_9, v4.Mem_T.op2__EXPR[v4.op2__EXPR(e)]);
  goto label_10#2;
  label_10#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 22} true;
  res := 0 - 1;
  assume v4.value_is(v2.__ctobpl_const_10, res);
  goto label_11#2;
  label_11#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 24} true;
  goto label_11_case_0#2, label_11_case_1#2, label_11_case_2#2;
  label_11_case_2#2:
  assume v4.INT_EQ(op, 2);
  assume v4.value_is(v2.__ctobpl_const_11, op);
  goto label_14#2;
  label_14#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 29} true;
  res := v4.MINUS_BOTH_PTR_OR_BOTH_INT(a1, a2, 1);
  assume v4.value_is(v2.__ctobpl_const_18, res);
  assume v4.value_is(v2.__ctobpl_const_19, a1);
  assume v4.value_is(v2.__ctobpl_const_20, a2);
  goto label_12#2;
  label_11_case_1#2:
  assume v4.INT_EQ(op, 1);
  assume v4.value_is(v2.__ctobpl_const_11, op);
  goto label_13#2;
  label_13#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 27} true;
  res := v4.PLUS(a1, 1, a2);
  assume v4.value_is(v2.__ctobpl_const_15, res);
  assume v4.value_is(v2.__ctobpl_const_16, a1);
  assume v4.value_is(v2.__ctobpl_const_17, a2);
  goto label_12#2;
  label_11_case_0#2:
  assume v4.INT_NEQ(op, 1);
  assume v4.INT_NEQ(op, 2);
  assume v4.value_is(v2.__ctobpl_const_11, op);
  goto label_12#2;
  label_12#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 35} true;
  assert true;
  v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR[v4.result__EXPR(e) := res];
  assume v4.value_is(v2.__ctobpl_const_12, e);
  assume v4.value_is(v2.__ctobpl_const_13, v4.Mem_T.result__EXPR[v4.result__EXPR(e)]);
  assume v4.value_is(v2.__ctobpl_const_14, res);
  goto label_1#2;
  label_1#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 36} true;
  return;
}

implementation v2.EvalEntry1(e_.1: int, outval_.1: int) {
  var havoc_stringTemp: int;
  var condVal: int;
  var e: int;
  var outval: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
  havoc_stringTemp := 0;
  goto start#2;
  start#2:
  assume v4.INT_LT(e_.1, v4.alloc);
  assume v4.INT_LT(outval_.1, v4.alloc);
  e := 0;
  outval := 0;
  e := e_.1;
  outval := outval_.1;
  goto label_3#2;
  label_3#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 40} true;
  call v2.Eval(e);
  assume v4.value_is(v2.__ctobpl_const_21, e);
  assume v4.value_is(v2.__ctobpl_const_22, e);
  goto label_6#2;
  label_6#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 41} true;
  assert true;
  assert true;
  v4.Mem_T.INT4 := v4.Mem_T.INT4[outval := v4.Mem_T.result__EXPR[v4.result__EXPR(e)]];
  assume v4.value_is(v2.__ctobpl_const_23, outval);
  assume v4.value_is(v2.__ctobpl_const_24, v4.Mem_T.INT4[outval]);
  assume v4.value_is(v2.__ctobpl_const_25, e);
  assume v4.value_is(v2.__ctobpl_const_26, v4.Mem_T.result__EXPR[v4.result__EXPR(e)]);
  goto label_1#2;
  label_1#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 42} true;
  return;
}

implementation v2.EvalEntry2(e_.1: int) {
  var havoc_stringTemp: int;
  var condVal: int;
  var e: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
  havoc_stringTemp := 0;
  goto start#2;
  start#2:
  assume v4.INT_LT(e_.1, v4.alloc);
  e := 0;
  e := e_.1;
  goto label_3#2;
  label_3#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 46} true;
  call v2.Eval(e);
  assume v4.value_is(v2.__ctobpl_const_27, e);
  assume v4.value_is(v2.__ctobpl_const_28, e);
  goto label_1#2;
  label_1#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 47} true;
  return;
}

implementation v2.__havoc_heapglobal_init() {
  anon0#2:
  return;
}

type name;

type byte;

var Output_of_v2.Eval_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v4.Eval_v4.Mem_T.result__EXPR: [int]int;

procedure EQ_v2.Eval__v4.Eval(e_.1: int) returns (AA_TEMP30: bool);
  modifies v4.Mem_T.result__EXPR, Output_of_v2.Eval_v4.Mem_T.result__EXPR, Output_of_v4.Eval_v4.Mem_T.result__EXPR;
  ensures AA_TEMP30;

implementation EQ_v2.Eval__v4.Eval(e_.1: int) returns (AA_TEMP30: bool) {
  var AA_TEMP10: [int]int;
  var AA_TEMP00: [int]int;
  var inline$v2.Eval$0$havoc_stringTemp: int;
  var inline$v2.Eval$0$condVal: int;
  var inline$v2.Eval$0$a1: int;
  var inline$v2.Eval$0$a2: int;
  var inline$v2.Eval$0$e: int;
  var inline$v2.Eval$0$op: int;
  var inline$v2.Eval$0$res: int;
  var inline$v2.Eval$0$tempBoogie0: int;
  var inline$v2.Eval$0$tempBoogie1: int;
  var inline$v2.Eval$0$tempBoogie2: int;
  var inline$v2.Eval$0$tempBoogie3: int;
  var inline$v2.Eval$0$tempBoogie4: int;
  var inline$v2.Eval$0$tempBoogie5: int;
  var inline$v2.Eval$0$tempBoogie6: int;
  var inline$v2.Eval$0$tempBoogie7: int;
  var inline$v2.Eval$0$tempBoogie8: int;
  var inline$v2.Eval$0$tempBoogie9: int;
  var inline$v2.Eval$0$tempBoogie10: int;
  var inline$v2.Eval$0$tempBoogie11: int;
  var inline$v2.Eval$0$tempBoogie12: int;
  var inline$v2.Eval$0$tempBoogie13: int;
  var inline$v2.Eval$0$tempBoogie14: int;
  var inline$v2.Eval$0$tempBoogie15: int;
  var inline$v2.Eval$0$tempBoogie16: int;
  var inline$v2.Eval$0$tempBoogie17: int;
  var inline$v2.Eval$0$tempBoogie18: int;
  var inline$v2.Eval$0$tempBoogie19: int;
  var inline$v2.Eval$0$__havoc_dummy_return: int;
  var inline$v2.Eval$0$e_.1: int;
  var inline$v2.Eval$0$v4.Mem_T.result__EXPR: [int]int;
  var inline$v4.Eval$0$havoc_stringTemp: int;
  var inline$v4.Eval$0$condVal: int;
  var inline$v4.Eval$0$a1: int;
  var inline$v4.Eval$0$a2: int;
  var inline$v4.Eval$0$e: int;
  var inline$v4.Eval$0$op: int;
  var inline$v4.Eval$0$res: int;
  var inline$v4.Eval$0$result.UnsignedAdd$1: int;
  var inline$v4.Eval$0$result.UnsignedSub$2: int;
  var inline$v4.Eval$0$tempBoogie0: int;
  var inline$v4.Eval$0$tempBoogie1: int;
  var inline$v4.Eval$0$tempBoogie2: int;
  var inline$v4.Eval$0$tempBoogie3: int;
  var inline$v4.Eval$0$tempBoogie4: int;
  var inline$v4.Eval$0$tempBoogie5: int;
  var inline$v4.Eval$0$tempBoogie6: int;
  var inline$v4.Eval$0$tempBoogie7: int;
  var inline$v4.Eval$0$tempBoogie8: int;
  var inline$v4.Eval$0$tempBoogie9: int;
  var inline$v4.Eval$0$tempBoogie10: int;
  var inline$v4.Eval$0$tempBoogie11: int;
  var inline$v4.Eval$0$tempBoogie12: int;
  var inline$v4.Eval$0$tempBoogie13: int;
  var inline$v4.Eval$0$tempBoogie14: int;
  var inline$v4.Eval$0$tempBoogie15: int;
  var inline$v4.Eval$0$tempBoogie16: int;
  var inline$v4.Eval$0$tempBoogie17: int;
  var inline$v4.Eval$0$tempBoogie18: int;
  var inline$v4.Eval$0$tempBoogie19: int;
  var inline$v4.Eval$0$__havoc_dummy_return: int;
  var inline$v4.Eval$0$e_.1: int;
  var inline$v4.Eval$0$v4.Mem_T.result__EXPR: [int]int;

  AA_INSTR_EQ_BODY:
  AA_TEMP00 := v4.Mem_T.result__EXPR;
  goto inline$v2.Eval$0$Entry;
  inline$v2.Eval$0$Entry:
  inline$v2.Eval$0$e_.1 := e_.1;
  inline$v2.Eval$0$v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
  goto inline$v2.Eval$0$anon0#2;
  inline$v2.Eval$0$anon0#2:
  inline$v2.Eval$0$havoc_stringTemp := 0;
  goto inline$v2.Eval$0$start#2;
  inline$v2.Eval$0$start#2:
  assume v4.INT_LT(inline$v2.Eval$0$e_.1, v4.alloc);
  inline$v2.Eval$0$a1 := 0;
  inline$v2.Eval$0$a2 := 0;
  inline$v2.Eval$0$e := 0;
  inline$v2.Eval$0$op := 0;
  inline$v2.Eval$0$res := 0;
  inline$v2.Eval$0$e := inline$v2.Eval$0$e_.1;
  goto inline$v2.Eval$0$label_3#2;
  inline$v2.Eval$0$label_3#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
  goto inline$v2.Eval$0$label_4#2;
  inline$v2.Eval$0$label_4#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
  goto inline$v2.Eval$0$label_5#2;
  inline$v2.Eval$0$label_5#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
  goto inline$v2.Eval$0$label_6#2;
  inline$v2.Eval$0$label_6#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
  goto inline$v2.Eval$0$label_7#2;
  inline$v2.Eval$0$label_7#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 19} true;
  assert true;
  inline$v2.Eval$0$op := v4.Mem_T.oper__EXPR[v4.oper__EXPR(inline$v2.Eval$0$e)];
  assume v4.value_is(v2.__ctobpl_const_1, inline$v2.Eval$0$op);
  assume v4.value_is(v2.__ctobpl_const_2, inline$v2.Eval$0$e);
  assume v4.value_is(v2.__ctobpl_const_3, v4.Mem_T.oper__EXPR[v4.oper__EXPR(inline$v2.Eval$0$e)]);
  goto inline$v2.Eval$0$label_8#2;
  inline$v2.Eval$0$label_8#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 20} true;
  assert true;
  inline$v2.Eval$0$a1 := v4.Mem_T.op1__EXPR[v4.op1__EXPR(inline$v2.Eval$0$e)];
  assume v4.value_is(v2.__ctobpl_const_4, inline$v2.Eval$0$a1);
  assume v4.value_is(v2.__ctobpl_const_5, inline$v2.Eval$0$e);
  assume v4.value_is(v2.__ctobpl_const_6, v4.Mem_T.op1__EXPR[v4.op1__EXPR(inline$v2.Eval$0$e)]);
  goto inline$v2.Eval$0$label_9#2;
  inline$v2.Eval$0$label_9#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 21} true;
  assert true;
  inline$v2.Eval$0$a2 := v4.Mem_T.op2__EXPR[v4.op2__EXPR(inline$v2.Eval$0$e)];
  assume v4.value_is(v2.__ctobpl_const_7, inline$v2.Eval$0$a2);
  assume v4.value_is(v2.__ctobpl_const_8, inline$v2.Eval$0$e);
  assume v4.value_is(v2.__ctobpl_const_9, v4.Mem_T.op2__EXPR[v4.op2__EXPR(inline$v2.Eval$0$e)]);
  goto inline$v2.Eval$0$label_10#2;
  inline$v2.Eval$0$label_10#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 22} true;
  inline$v2.Eval$0$res := 0 - 1;
  assume v4.value_is(v2.__ctobpl_const_10, inline$v2.Eval$0$res);
  goto inline$v2.Eval$0$label_11#2;
  inline$v2.Eval$0$label_11#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 24} true;
  goto inline$v2.Eval$0$label_11_case_0#2, inline$v2.Eval$0$label_11_case_1#2, inline$v2.Eval$0$label_11_case_2#2;
  inline$v2.Eval$0$label_11_case_2#2:
  assume v4.INT_EQ(inline$v2.Eval$0$op, 2);
  assume v4.value_is(v2.__ctobpl_const_11, inline$v2.Eval$0$op);
  goto inline$v2.Eval$0$label_14#2;
  inline$v2.Eval$0$label_14#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 29} true;
  inline$v2.Eval$0$res := v4.MINUS_BOTH_PTR_OR_BOTH_INT(inline$v2.Eval$0$a1, inline$v2.Eval$0$a2, 1);
  assume v4.value_is(v2.__ctobpl_const_18, inline$v2.Eval$0$res);
  assume v4.value_is(v2.__ctobpl_const_19, inline$v2.Eval$0$a1);
  assume v4.value_is(v2.__ctobpl_const_20, inline$v2.Eval$0$a2);
  goto inline$v2.Eval$0$label_12#2;
  inline$v2.Eval$0$label_11_case_1#2:
  assume v4.INT_EQ(inline$v2.Eval$0$op, 1);
  assume v4.value_is(v2.__ctobpl_const_11, inline$v2.Eval$0$op);
  goto inline$v2.Eval$0$label_13#2;
  inline$v2.Eval$0$label_13#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 27} true;
  inline$v2.Eval$0$res := v4.PLUS(inline$v2.Eval$0$a1, 1, inline$v2.Eval$0$a2);
  assume v4.value_is(v2.__ctobpl_const_15, inline$v2.Eval$0$res);
  assume v4.value_is(v2.__ctobpl_const_16, inline$v2.Eval$0$a1);
  assume v4.value_is(v2.__ctobpl_const_17, inline$v2.Eval$0$a2);
  goto inline$v2.Eval$0$label_12#2;
  inline$v2.Eval$0$label_11_case_0#2:
  assume v4.INT_NEQ(inline$v2.Eval$0$op, 1);
  assume v4.INT_NEQ(inline$v2.Eval$0$op, 2);
  assume v4.value_is(v2.__ctobpl_const_11, inline$v2.Eval$0$op);
  goto inline$v2.Eval$0$label_12#2;
  inline$v2.Eval$0$label_12#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 35} true;
  assert true;
  v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR[v4.result__EXPR(inline$v2.Eval$0$e) := inline$v2.Eval$0$res];
  assume v4.value_is(v2.__ctobpl_const_12, inline$v2.Eval$0$e);
  assume v4.value_is(v2.__ctobpl_const_13, v4.Mem_T.result__EXPR[v4.result__EXPR(inline$v2.Eval$0$e)]);
  assume v4.value_is(v2.__ctobpl_const_14, inline$v2.Eval$0$res);
  goto inline$v2.Eval$0$label_1#2;
  inline$v2.Eval$0$label_1#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 36} true;
  goto inline$v2.Eval$0$Return;
  inline$v2.Eval$0$Return:
  goto AA_INSTR_EQ_BODY$1;
  AA_INSTR_EQ_BODY$1:
  AA_TEMP10 := v4.Mem_T.result__EXPR;
  v4.Mem_T.result__EXPR := AA_TEMP00;
  goto inline$v4.Eval$0$Entry;
  inline$v4.Eval$0$Entry:
  inline$v4.Eval$0$e_.1 := e_.1;
  inline$v4.Eval$0$v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
  goto inline$v4.Eval$0$anon0#2;
  inline$v4.Eval$0$anon0#2:
  inline$v4.Eval$0$havoc_stringTemp := 0;
  goto inline$v4.Eval$0$start#2;
  inline$v4.Eval$0$start#2:
  assume v4.INT_LT(inline$v4.Eval$0$e_.1, v4.alloc);
  inline$v4.Eval$0$a1 := 0;
  inline$v4.Eval$0$a2 := 0;
  inline$v4.Eval$0$e := 0;
  inline$v4.Eval$0$op := 0;
  inline$v4.Eval$0$res := 0;
  inline$v4.Eval$0$result.UnsignedAdd$1 := 0;
  inline$v4.Eval$0$result.UnsignedSub$2 := 0;
  inline$v4.Eval$0$e := inline$v4.Eval$0$e_.1;
  goto inline$v4.Eval$0$label_3#2;
  inline$v4.Eval$0$label_3#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
  goto inline$v4.Eval$0$label_4#2;
  inline$v4.Eval$0$label_4#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
  goto inline$v4.Eval$0$label_5#2;
  inline$v4.Eval$0$label_5#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
  goto inline$v4.Eval$0$label_6#2;
  inline$v4.Eval$0$label_6#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
  goto inline$v4.Eval$0$label_7#2;
  inline$v4.Eval$0$label_7#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 21} true;
  assert true;
  inline$v4.Eval$0$op := v4.Mem_T.oper__EXPR[v4.oper__EXPR(inline$v4.Eval$0$e)];
  assume v4.value_is(v4.__ctobpl_const_1, inline$v4.Eval$0$op);
  assume v4.value_is(v4.__ctobpl_const_2, inline$v4.Eval$0$e);
  assume v4.value_is(v4.__ctobpl_const_3, v4.Mem_T.oper__EXPR[v4.oper__EXPR(inline$v4.Eval$0$e)]);
  goto inline$v4.Eval$0$label_8#2;
  inline$v4.Eval$0$label_8#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 22} true;
  assert true;
  inline$v4.Eval$0$a1 := v4.Mem_T.op1__EXPR[v4.op1__EXPR(inline$v4.Eval$0$e)];
  assume v4.value_is(v4.__ctobpl_const_4, inline$v4.Eval$0$a1);
  assume v4.value_is(v4.__ctobpl_const_5, inline$v4.Eval$0$e);
  assume v4.value_is(v4.__ctobpl_const_6, v4.Mem_T.op1__EXPR[v4.op1__EXPR(inline$v4.Eval$0$e)]);
  goto inline$v4.Eval$0$label_9#2;
  inline$v4.Eval$0$label_9#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 23} true;
  assert true;
  inline$v4.Eval$0$a2 := v4.Mem_T.op2__EXPR[v4.op2__EXPR(inline$v4.Eval$0$e)];
  assume v4.value_is(v4.__ctobpl_const_7, inline$v4.Eval$0$a2);
  assume v4.value_is(v4.__ctobpl_const_8, inline$v4.Eval$0$e);
  assume v4.value_is(v4.__ctobpl_const_9, v4.Mem_T.op2__EXPR[v4.op2__EXPR(inline$v4.Eval$0$e)]);
  goto inline$v4.Eval$0$label_10#2;
  inline$v4.Eval$0$label_10#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 24} true;
  inline$v4.Eval$0$res := 0 - 1;
  assume v4.value_is(v4.__ctobpl_const_10, inline$v4.Eval$0$res);
  goto inline$v4.Eval$0$label_11#2;
  inline$v4.Eval$0$label_11#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 26} true;
  goto inline$v4.Eval$0$label_11_case_0#2, inline$v4.Eval$0$label_11_case_1#2, inline$v4.Eval$0$label_11_case_2#2;
  inline$v4.Eval$0$label_11_case_2#2:
  assume v4.INT_EQ(inline$v4.Eval$0$op, 2);
  assume v4.value_is(v4.__ctobpl_const_11, inline$v4.Eval$0$op);
  goto inline$v4.Eval$0$label_14#2;
  inline$v4.Eval$0$label_14#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 35} true;
  goto inline$v4.Eval$0$label_14_true#2, inline$v4.Eval$0$label_14_false#2;
  inline$v4.Eval$0$label_14_false#2:
  assume v4.isUnsigned == 0;
  assume v4.value_is(v4.__ctobpl_const_16, v4.isUnsigned);
  goto inline$v4.Eval$0$label_15#2;
  inline$v4.Eval$0$label_15#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 38} true;
  inline$v4.Eval$0$res := v4.MINUS_BOTH_PTR_OR_BOTH_INT(inline$v4.Eval$0$a1, inline$v4.Eval$0$a2, 1);
  assume v4.value_is(v4.__ctobpl_const_17, inline$v4.Eval$0$res);
  assume v4.value_is(v4.__ctobpl_const_18, inline$v4.Eval$0$a1);
  assume v4.value_is(v4.__ctobpl_const_19, inline$v4.Eval$0$a2);
  goto inline$v4.Eval$0$label_12#2;
  inline$v4.Eval$0$label_14_true#2:
  assume v4.isUnsigned != 0;
  assume v4.value_is(v4.__ctobpl_const_16, v4.isUnsigned);
  goto inline$v4.Eval$0$label_16#2;
  inline$v4.Eval$0$label_16#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 36} true;
  call inline$v4.Eval$0$result.UnsignedSub$2 := v4.UnsignedSub(inline$v4.Eval$0$a1, inline$v4.Eval$0$a2);
  assume v4.value_is(v4.__ctobpl_const_20, inline$v4.Eval$0$a1);
  assume v4.value_is(v4.__ctobpl_const_21, inline$v4.Eval$0$a2);
  assume v4.value_is(v4.__ctobpl_const_22, inline$v4.Eval$0$a1);
  assume v4.value_is(v4.__ctobpl_const_23, inline$v4.Eval$0$a2);
  goto inline$v4.Eval$0$label_19#2;
  inline$v4.Eval$0$label_19#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 36} true;
  inline$v4.Eval$0$res := inline$v4.Eval$0$result.UnsignedSub$2;
  assume v4.value_is(v4.__ctobpl_const_24, inline$v4.Eval$0$res);
  assume v4.value_is(v4.__ctobpl_const_25, inline$v4.Eval$0$result.UnsignedSub$2);
  goto inline$v4.Eval$0$label_12#2;
  inline$v4.Eval$0$label_11_case_1#2:
  assume v4.INT_EQ(inline$v4.Eval$0$op, 1);
  assume v4.value_is(v4.__ctobpl_const_11, inline$v4.Eval$0$op);
  goto inline$v4.Eval$0$label_13#2;
  inline$v4.Eval$0$label_13#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 29} true;
  goto inline$v4.Eval$0$label_13_true#2, inline$v4.Eval$0$label_13_false#2;
  inline$v4.Eval$0$label_13_false#2:
  assume v4.isUnsigned == 0;
  assume v4.value_is(v4.__ctobpl_const_15, v4.isUnsigned);
  goto inline$v4.Eval$0$label_20#2;
  inline$v4.Eval$0$label_20#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 32} true;
  inline$v4.Eval$0$res := v4.PLUS(inline$v4.Eval$0$a1, 1, inline$v4.Eval$0$a2);
  assume v4.value_is(v4.__ctobpl_const_26, inline$v4.Eval$0$res);
  assume v4.value_is(v4.__ctobpl_const_27, inline$v4.Eval$0$a1);
  assume v4.value_is(v4.__ctobpl_const_28, inline$v4.Eval$0$a2);
  goto inline$v4.Eval$0$label_12#2;
  inline$v4.Eval$0$label_13_true#2:
  assume v4.isUnsigned != 0;
  assume v4.value_is(v4.__ctobpl_const_15, v4.isUnsigned);
  goto inline$v4.Eval$0$label_21#2;
  inline$v4.Eval$0$label_21#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 30} true;
  call inline$v4.Eval$0$result.UnsignedAdd$1 := v4.UnsignedAdd(inline$v4.Eval$0$a1, inline$v4.Eval$0$a2);
  assume v4.value_is(v4.__ctobpl_const_29, inline$v4.Eval$0$a1);
  assume v4.value_is(v4.__ctobpl_const_30, inline$v4.Eval$0$a2);
  assume v4.value_is(v4.__ctobpl_const_31, inline$v4.Eval$0$a1);
  assume v4.value_is(v4.__ctobpl_const_32, inline$v4.Eval$0$a2);
  goto inline$v4.Eval$0$label_24#2;
  inline$v4.Eval$0$label_24#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 30} true;
  inline$v4.Eval$0$res := inline$v4.Eval$0$result.UnsignedAdd$1;
  assume v4.value_is(v4.__ctobpl_const_33, inline$v4.Eval$0$res);
  assume v4.value_is(v4.__ctobpl_const_34, inline$v4.Eval$0$result.UnsignedAdd$1);
  goto inline$v4.Eval$0$label_12#2;
  inline$v4.Eval$0$label_11_case_0#2:
  assume v4.INT_NEQ(inline$v4.Eval$0$op, 1);
  assume v4.INT_NEQ(inline$v4.Eval$0$op, 2);
  assume v4.value_is(v4.__ctobpl_const_11, inline$v4.Eval$0$op);
  goto inline$v4.Eval$0$label_12#2;
  inline$v4.Eval$0$label_12#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 41} true;
  assert true;
  v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR[v4.result__EXPR(inline$v4.Eval$0$e) := inline$v4.Eval$0$res];
  assume v4.value_is(v4.__ctobpl_const_12, inline$v4.Eval$0$e);
  assume v4.value_is(v4.__ctobpl_const_13, v4.Mem_T.result__EXPR[v4.result__EXPR(inline$v4.Eval$0$e)]);
  assume v4.value_is(v4.__ctobpl_const_14, inline$v4.Eval$0$res);
  goto inline$v4.Eval$0$label_1#2;
  inline$v4.Eval$0$label_1#2:
  assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 42} true;
  goto inline$v4.Eval$0$Return;
  inline$v4.Eval$0$Return:
  goto AA_INSTR_EQ_BODY$2;
  AA_INSTR_EQ_BODY$2:
  Output_of_v2.Eval_v4.Mem_T.result__EXPR := AA_TEMP10;
  Output_of_v4.Eval_v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
  AA_TEMP30 := AA_TEMP10 == v4.Mem_T.result__EXPR || (forall _x0: int :: AA_TEMP10[_x0] == v4.Mem_T.result__EXPR[_x0]);
  return;
}

var Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v2.EvalEntry1_v4.Mem_T.INT4: [int]int;

var Output_of_v4.EvalEntry1_v4.Mem_T.INT4: [int]int;

var Output_of_v2.EvalEntry1_v4.isUnsigned: int;

var Output_of_v4.EvalEntry1_v4.isUnsigned: int;

procedure EQ_v2.EvalEntry1__v4.EvalEntry1(e_.1: int, outval_.1: int) returns (AA_TEMP80: bool, AA_TEMP81: bool, AA_TEMP82: bool);
  modifies v4.Mem_T.result__EXPR, v4.Mem_T.INT4, v4.isUnsigned, Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR, Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR, Output_of_v2.EvalEntry1_v4.Mem_T.INT4, Output_of_v4.EvalEntry1_v4.Mem_T.INT4, Output_of_v2.EvalEntry1_v4.isUnsigned, Output_of_v4.EvalEntry1_v4.isUnsigned;
  ensures AA_TEMP82 && AA_TEMP81 && AA_TEMP80;

implementation EQ_v2.EvalEntry1__v4.EvalEntry1(e_.1: int, outval_.1: int) returns (AA_TEMP80: bool, AA_TEMP81: bool, AA_TEMP82: bool) {
  var AA_TEMP60: [int]int;
  var AA_TEMP61: [int]int;
  var AA_TEMP62: int;
  var AA_TEMP50: [int]int;
  var AA_TEMP51: [int]int;
  var AA_TEMP52: int;

  AA_INSTR_EQ_BODY:
  AA_TEMP50 := v4.Mem_T.result__EXPR;
  AA_TEMP51 := v4.Mem_T.INT4;
  AA_TEMP52 := v4.isUnsigned;
  call v2.EvalEntry1(e_.1, outval_.1);
  AA_TEMP60 := v4.Mem_T.result__EXPR;
  AA_TEMP61 := v4.Mem_T.INT4;
  AA_TEMP62 := v4.isUnsigned;
  v4.Mem_T.result__EXPR := AA_TEMP50;
  v4.Mem_T.INT4 := AA_TEMP51;
  v4.isUnsigned := AA_TEMP52;
  call v4.EvalEntry1(e_.1, outval_.1);
  Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR := AA_TEMP60;
  Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
  Output_of_v2.EvalEntry1_v4.Mem_T.INT4 := AA_TEMP61;
  Output_of_v4.EvalEntry1_v4.Mem_T.INT4 := v4.Mem_T.INT4;
  Output_of_v2.EvalEntry1_v4.isUnsigned := AA_TEMP62;
  Output_of_v4.EvalEntry1_v4.isUnsigned := v4.isUnsigned;
  AA_TEMP80, AA_TEMP81, AA_TEMP82 := AA_TEMP60 == v4.Mem_T.result__EXPR || (forall _x0: int :: AA_TEMP60[_x0] == v4.Mem_T.result__EXPR[_x0]), AA_TEMP61 == v4.Mem_T.INT4 || (forall _x0: int :: AA_TEMP61[_x0] == v4.Mem_T.INT4[_x0]), AA_TEMP62 == v4.isUnsigned;
  return;
}

var Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v2.EvalEntry2_v4.isUnsigned: int;

var Output_of_v4.EvalEntry2_v4.isUnsigned: int;

procedure EQ_v2.EvalEntry2__v4.EvalEntry2(e_.1: int) returns (AA_TEMP130: bool, AA_TEMP131: bool);
  modifies v4.Mem_T.result__EXPR, v4.isUnsigned, Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR, Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR, Output_of_v2.EvalEntry2_v4.isUnsigned, Output_of_v4.EvalEntry2_v4.isUnsigned;
  ensures AA_TEMP131 && AA_TEMP130;

implementation EQ_v2.EvalEntry2__v4.EvalEntry2(e_.1: int) returns (AA_TEMP130: bool, AA_TEMP131: bool) {
  var AA_TEMP110: [int]int;
  var AA_TEMP111: int;
  var AA_TEMP100: [int]int;
  var AA_TEMP101: int;

  AA_INSTR_EQ_BODY:
  AA_TEMP100 := v4.Mem_T.result__EXPR;
  AA_TEMP101 := v4.isUnsigned;
  call v2.EvalEntry2(e_.1);
  AA_TEMP110 := v4.Mem_T.result__EXPR;
  AA_TEMP111 := v4.isUnsigned;
  v4.Mem_T.result__EXPR := AA_TEMP100;
  v4.isUnsigned := AA_TEMP101;
  call v4.EvalEntry2(e_.1);
  Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR := AA_TEMP110;
  Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
  Output_of_v2.EvalEntry2_v4.isUnsigned := AA_TEMP111;
  Output_of_v4.EvalEntry2_v4.isUnsigned := v4.isUnsigned;
  AA_TEMP130, AA_TEMP131 := AA_TEMP110 == v4.Mem_T.result__EXPR || (forall _x0: int :: AA_TEMP110[_x0] == v4.Mem_T.result__EXPR[_x0]), AA_TEMP111 == v4.isUnsigned;
  return;
}

function _uf_v4.__HAVOC_malloc_new(arg_0: int): int;

function _uf_v2.__HAVOC_malloc_new(arg_0: int): int;

function _uf_v4.__HAVOC_det_malloc_new(arg_0: int): int;

function _uf_v2.__HAVOC_det_malloc_new(arg_0: int): int;

function _uf_v4.__HAVOC_memset_split_1_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int): [int]int;

function _uf_v2.__HAVOC_memset_split_1_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int): [int]int;

function _uf_v4.__HAVOC_memset_split_2_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int): [int]int;

function _uf_v2.__HAVOC_memset_split_2_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int): [int]int;

function _uf_v4.__HAVOC_memset_split_4_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int): [int]int;

function _uf_v2.__HAVOC_memset_split_4_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int): [int]int;

function _uf_v4.nondet_choice_x(): int;

function _uf_v2.nondet_choice_x(): int;

function _uf_v4.det_choice_x(): int;

function _uf_v2.det_choice_x(): int;

function _uf_v4._strdup_new(arg_0: int): int;

function _uf_v2._strdup_new(arg_0: int): int;

function _uf_v4._xstrcasecmp_ret(arg_0: int, arg_1: int): int;

function _uf_v2._xstrcasecmp_ret(arg_0: int, arg_1: int): int;

function _uf_v4._xstrcmp_ret(arg_0: int, arg_1: int): int;

function _uf_v2._xstrcmp_ret(arg_0: int, arg_1: int): int;

function _uf_v4.Eval_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int): [int]int;

function _uf_v2.Eval_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int): [int]int;

function _uf_v4.EvalEntry1_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int): [int]int;

function _uf_v4.EvalEntry1_v4.Mem_T.INT4(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int): [int]int;

function _uf_v4.EvalEntry1_v4.isUnsigned(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int): int;

function _uf_v2.EvalEntry1_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int): [int]int;

function _uf_v2.EvalEntry1_v4.Mem_T.INT4(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int): [int]int;

function _uf_v4.EvalEntry2_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int): [int]int;

function _uf_v4.EvalEntry2_v4.isUnsigned(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int): int;

function _uf_v2.EvalEntry2_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int): [int]int;

[Input - ../../vendor/boogie/Test/prover/EQ_v2.Eval__v4.Eval_out.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
var v4.Mem: [name][int]int;

var v4.alloc: int;

var v4.Mem_T.INT4: [int]int;

var v4.Mem_T.op1__EXPR: [int]int;

var v4.Mem_T.op2__EXPR: [int]int;

var v4.Mem_T.oper__EXPR: [int]int;

var v4.Mem_T.result__EXPR: [int]int;

var v4.detChoiceCnt: int;

var v4.Res_KERNEL_SOURCE: [int]int;

var v4.Res_PROBED: [int]int;

var v4.isUnsigned: int;

const unique v4.T.oper__EXPR: name;

const unique v4.T.op1__EXPR: name;

const unique v4.T.op2__EXPR: name;

const unique v4.T.result__EXPR: name;

const unique v4.T.INT4: name;

const unique v4.T.PINT4: name;

const unique v4.T.PPINT4: name;

const unique v4.T.PP_EXPR: name;

const unique v4.T.P_EXPR: name;

const unique v4.T._EXPR: name;

const {:model_const "e->op2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 23} unique v4.__ctobpl_const_9: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 24} unique v4.__ctobpl_const_10: int;

const {:model_const "op"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 26} unique v4.__ctobpl_const_11: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 41} unique v4.__ctobpl_const_12: int;

const {:model_const "e->op1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 22} unique v4.__ctobpl_const_6: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 23} unique v4.__ctobpl_const_7: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 23} unique v4.__ctobpl_const_8: int;

const {:model_const "e->oper"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 21} unique v4.__ctobpl_const_3: int;

const {:model_const "op"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 21} unique v4.__ctobpl_const_1: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 21} unique v4.__ctobpl_const_2: int;

const {:model_const "e->result"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 41} unique v4.__ctobpl_const_13: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 41} unique v4.__ctobpl_const_14: int;

const {:model_const "isUnsigned"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 29} unique v4.__ctobpl_const_15: int;

const {:model_const "isUnsigned"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 35} unique v4.__ctobpl_const_16: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 38} unique v4.__ctobpl_const_17: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 38} unique v4.__ctobpl_const_18: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 38} unique v4.__ctobpl_const_19: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_20: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_21: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_22: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_23: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_24: int;

const {:model_const "result.UnsignedSub"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 36} unique v4.__ctobpl_const_25: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 32} unique v4.__ctobpl_const_26: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 32} unique v4.__ctobpl_const_27: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 32} unique v4.__ctobpl_const_28: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_29: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_30: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_31: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_32: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_33: int;

const {:model_const "result.UnsignedAdd"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 30} unique v4.__ctobpl_const_34: int;

const {:model_const "isUnsigned"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 47} unique v4.__ctobpl_const_35: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 22} unique v4.__ctobpl_const_4: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 22} unique v4.__ctobpl_const_5: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 48} unique v4.__ctobpl_const_36: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 48} unique v4.__ctobpl_const_37: int;

const {:model_const "outval"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 49} unique v4.__ctobpl_const_38: int;

const {:model_const "*outval"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 49} unique v4.__ctobpl_const_39: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 49} unique v4.__ctobpl_const_40: int;

const {:model_const "e->result"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 49} unique v4.__ctobpl_const_41: int;

const {:model_const "isUnsigned"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 54} unique v4.__ctobpl_const_42: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 55} unique v4.__ctobpl_const_43: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceLine 55} unique v4.__ctobpl_const_44: int;

function v4.OneByteToInt(arg_0: byte) : int;

function v4.TwoBytesToInt(arg_0: byte, arg_1: byte) : int;

function v4.FourBytesToInt(arg_0: byte, arg_1: byte, arg_2: byte, arg_3: byte) : int;

function v4.Field(arg_0: int) : name;

function v4.Base(arg_0: int) : int;

function v4.Match(a: int, t: name) : bool;

function v4.MatchBase(b: int, a: int, t: name) : bool;

function v4.HasType(v: int, t: name) : bool;

function v4.T.Ptr(t: name) : name;

function v4.op1__EXPR(arg_0: int) : int;

function v4.op1__EXPRInv(arg_0: int) : int;

function v4._S_op1__EXPR(arg_0: [int]bool) : [int]bool;

function v4._S_op1__EXPRInv(arg_0: [int]bool) : [int]bool;

function v4.op2__EXPR(arg_0: int) : int;

function v4.op2__EXPRInv(arg_0: int) : int;

function v4._S_op2__EXPR(arg_0: [int]bool) : [int]bool;

function v4._S_op2__EXPRInv(arg_0: [int]bool) : [int]bool;

function v4.oper__EXPR(arg_0: int) : int;

function v4.oper__EXPRInv(arg_0: int) : int;

function v4._S_oper__EXPR(arg_0: [int]bool) : [int]bool;

function v4._S_oper__EXPRInv(arg_0: [int]bool) : [int]bool;

function v4.result__EXPR(arg_0: int) : int;

function v4.result__EXPRInv(arg_0: int) : int;

function v4._S_result__EXPR(arg_0: [int]bool) : [int]bool;

function v4._S_result__EXPRInv(arg_0: [int]bool) : [int]bool;

function v4.INT_EQ(x: int, y: int) : bool;

function v4.INT_NEQ(x: int, y: int) : bool;

function v4.INT_ADD(x: int, y: int) : int;

function v4.INT_SUB(x: int, y: int) : int;

function v4.INT_MULT(x: int, y: int) : int;

function v4.INT_DIV(x: int, y: int) : int;

function v4.INT_LT(x: int, y: int) : bool;

function v4.INT_ULT(x: int, y: int) : bool;

function v4.INT_LEQ(x: int, y: int) : bool;

function v4.INT_ULEQ(x: int, y: int) : bool;

function v4.INT_GT(x: int, y: int) : bool;

function v4.INT_UGT(x: int, y: int) : bool;

function v4.INT_GEQ(x: int, y: int) : bool;

function v4.INT_UGEQ(x: int, y: int) : bool;

function v4.BV32_EQ(x: bv32, y: bv32) : bool;

function v4.BV32_NEQ(x: bv32, y: bv32) : bool;

function {:bvbuiltin "bvadd"} v4.BV32_ADD(x: bv32, y: bv32) : bv32;

function {:bvbuiltin "bvsub"} v4.BV32_SUB(x: bv32, y: bv32) : bv32;

function {:bvbuiltin "bvmul"} v4.BV32_MULT(x: bv32, y: bv32) : bv32;

function {:bvbuiltin "bvudiv"} v4.BV32_DIV(x: bv32, y: bv32) : bv32;

function {:bvbuiltin "bvult"} v4.BV32_ULT(x: bv32, y: bv32) : bool;

function {:bvbuiltin "bvslt"} v4.BV32_LT(x: bv32, y: bv32) : bool;

function {:bvbuiltin "bvule"} v4.BV32_ULEQ(x: bv32, y: bv32) : bool;

function {:bvbuiltin "bvsle"} v4.BV32_LEQ(x: bv32, y: bv32) : bool;

function {:bvbuiltin "bvugt"} v4.BV32_UGT(x: bv32, y: bv32) : bool;

function {:bvbuiltin "bvsgt"} v4.BV32_GT(x: bv32, y: bv32) : bool;

function {:bvbuiltin "bvuge"} v4.BV32_UGEQ(x: bv32, y: bv32) : bool;

function {:bvbuiltin "bvsge"} v4.BV32_GEQ(x: bv32, y: bv32) : bool;

function v4.MINUS_BOTH_PTR_OR_BOTH_INT(a: int, b: int, size: int) : int;

function v4.MINUS_LEFT_PTR(a: int, a_size: int, b: int) : int;

function v4.PLUS(a: int, a_size: int, b: int) : int;

function v4.MULT(a: int, b: int) : int;

function v4.DIV(a: int, b: int) : int;

function v4.BINARY_BOTH_INT(a: int, b: int) : int;

function v4.POW2(a: int) : bool;

function v4.BIT_BAND(a: int, b: int) : int;

function v4.BIT_BOR(a: int, b: int) : int;

function v4.BIT_BXOR(a: int, b: int) : int;

function v4.BIT_BNOT(a: int) : int;

function v4.choose(a: bool, b: int, c: int) : int;

function v4.LIFT(a: bool) : int;

function v4.PTR_NOT(a: int) : int;

function v4.NULL_CHECK(a: int) : int;

function v4.NewAlloc(x: int, y: int) : int;

function v4.DetChoiceFunc(a: int) : int;

function v4.Equal(arg_0: [int]bool, arg_1: [int]bool) : bool;

function v4.Subset(arg_0: [int]bool, arg_1: [int]bool) : bool;

function v4.Disjoint(arg_0: [int]bool, arg_1: [int]bool) : bool;

function v4.Empty() : [int]bool;

function v4.SetTrue() : [int]bool;

function v4.Singleton(arg_0: int) : [int]bool;

function v4.Reachable(arg_0: [int,int]bool, arg_1: int) : [int]bool;

function v4.Union(arg_0: [int]bool, arg_1: [int]bool) : [int]bool;

function v4.Intersection(arg_0: [int]bool, arg_1: [int]bool) : [int]bool;

function v4.Difference(arg_0: [int]bool, arg_1: [int]bool) : [int]bool;

function v4.Dereference(arg_0: [int]bool, arg_1: [int]int) : [int]bool;

function v4.Inverse(f: [int]int, x: int) : [int]bool;

function v4.AtLeast(arg_0: int, arg_1: int) : [int]bool;

function v4.Rep(arg_0: int, arg_1: int) : int;

function v4.Array(arg_0: int, arg_1: int, arg_2: int) : [int]bool;

function v4.Unified(arg_0: [name][int]int) : [int]int;

function v4.value_is(c: int, e: int) : bool;

axiom (forall b0: byte, c0: byte :: { v4.OneByteToInt(b0), v4.OneByteToInt(c0) } v4.OneByteToInt(b0) == v4.OneByteToInt(c0) ==> b0 == c0);

axiom (forall b0: byte, b1: byte, c0: byte, c1: byte :: { v4.TwoBytesToInt(b0, b1), v4.TwoBytesToInt(c0, c1) } v4.TwoBytesToInt(b0, b1) == v4.TwoBytesToInt(c0, c1) ==> b0 == c0 && b1 == c1);

axiom (forall b0: byte, b1: byte, b2: byte, b3: byte, c0: byte, c1: byte, c2: byte, c3: byte :: { v4.FourBytesToInt(b0, b1, b2, b3), v4.FourBytesToInt(c0, c1, c2, c3) } v4.FourBytesToInt(b0, b1, b2, b3) == v4.FourBytesToInt(c0, c1, c2, c3) ==> b0 == c0 && b1 == c1 && b2 == c2 && b3 == c3);

axiom (forall x: int :: { v4.Base(x) } v4.INT_LEQ(v4.Base(x), x));

axiom (forall a: int, t: name :: { v4.Match(a, v4.T.Ptr(t)) } v4.Match(a, v4.T.Ptr(t)) <==> v4.Field(a) == v4.T.Ptr(t));

axiom (forall b: int, a: int, t: name :: { v4.MatchBase(b, a, v4.T.Ptr(t)) } v4.MatchBase(b, a, v4.T.Ptr(t)) <==> v4.Base(a) == b);

axiom (forall v: int, t: name :: { v4.HasType(v, v4.T.Ptr(t)) } v4.HasType(v, v4.T.Ptr(t)) <==> v == 0 || (v4.INT_GT(v, 0) && v4.Match(v, t) && v4.MatchBase(v4.Base(v), v, t)));

axiom (forall x: int, S: [int]bool :: { v4._S_op1__EXPR(S)[x] } v4._S_op1__EXPR(S)[x] <==> S[v4.op1__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v4._S_op1__EXPRInv(S)[x] } v4._S_op1__EXPRInv(S)[x] <==> S[v4.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_op1__EXPR(S) } S[x] ==> v4._S_op1__EXPR(S)[v4.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_op1__EXPRInv(S) } S[x] ==> v4._S_op1__EXPRInv(S)[v4.op1__EXPRInv(x)]);

axiom (forall x: int :: { v4.op1__EXPR(x) } v4.op1__EXPR(x) == v4.INT_ADD(x, 4));

axiom (forall x: int :: { v4.op1__EXPRInv(x) } v4.op1__EXPRInv(x) == v4.INT_SUB(x, 4));

axiom (forall x: int :: { v4.op1__EXPR(x) } v4.op1__EXPR(x) == v4.PLUS(x, 1, 4));

axiom (forall x: int, S: [int]bool :: { v4._S_op2__EXPR(S)[x] } v4._S_op2__EXPR(S)[x] <==> S[v4.op2__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v4._S_op2__EXPRInv(S)[x] } v4._S_op2__EXPRInv(S)[x] <==> S[v4.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_op2__EXPR(S) } S[x] ==> v4._S_op2__EXPR(S)[v4.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_op2__EXPRInv(S) } S[x] ==> v4._S_op2__EXPRInv(S)[v4.op2__EXPRInv(x)]);

axiom (forall x: int :: { v4.op2__EXPR(x) } v4.op2__EXPR(x) == v4.INT_ADD(x, 8));

axiom (forall x: int :: { v4.op2__EXPRInv(x) } v4.op2__EXPRInv(x) == v4.INT_SUB(x, 8));

axiom (forall x: int :: { v4.op2__EXPR(x) } v4.op2__EXPR(x) == v4.PLUS(x, 1, 8));

axiom (forall x: int, S: [int]bool :: { v4._S_oper__EXPR(S)[x] } v4._S_oper__EXPR(S)[x] <==> S[v4.oper__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v4._S_oper__EXPRInv(S)[x] } v4._S_oper__EXPRInv(S)[x] <==> S[v4.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_oper__EXPR(S) } S[x] ==> v4._S_oper__EXPR(S)[v4.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_oper__EXPRInv(S) } S[x] ==> v4._S_oper__EXPRInv(S)[v4.oper__EXPRInv(x)]);

axiom (forall x: int :: { v4.oper__EXPR(x) } v4.oper__EXPR(x) == v4.INT_ADD(x, 0));

axiom (forall x: int :: { v4.oper__EXPRInv(x) } v4.oper__EXPRInv(x) == v4.INT_SUB(x, 0));

axiom (forall x: int :: { v4.oper__EXPR(x) } v4.oper__EXPR(x) == v4.PLUS(x, 1, 0));

axiom (forall x: int, S: [int]bool :: { v4._S_result__EXPR(S)[x] } v4._S_result__EXPR(S)[x] <==> S[v4.result__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v4._S_result__EXPRInv(S)[x] } v4._S_result__EXPRInv(S)[x] <==> S[v4.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_result__EXPR(S) } S[x] ==> v4._S_result__EXPR(S)[v4.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_result__EXPRInv(S) } S[x] ==> v4._S_result__EXPRInv(S)[v4.result__EXPRInv(x)]);

axiom (forall x: int :: { v4.result__EXPR(x) } v4.result__EXPR(x) == v4.INT_ADD(x, 12));

axiom (forall x: int :: { v4.result__EXPRInv(x) } v4.result__EXPRInv(x) == v4.INT_SUB(x, 12));

axiom (forall x: int :: { v4.result__EXPR(x) } v4.result__EXPR(x) == v4.PLUS(x, 1, 12));

axiom (forall x: int, y: int :: { v4.INT_EQ(x, y): bool } v4.INT_EQ(x, y): bool <==> x == y);

axiom (forall x: int, y: int :: { v4.INT_NEQ(x, y): bool } v4.INT_NEQ(x, y): bool <==> x != y);

axiom (forall x: int, y: int :: { v4.INT_ADD(x, y): int } v4.INT_ADD(x, y): int == x + y);

axiom (forall x: int, y: int :: { v4.INT_SUB(x, y): int } v4.INT_SUB(x, y): int == x - y);

axiom (forall x: int, y: int :: { v4.INT_MULT(x, y): int } v4.INT_MULT(x, y): int == x * y);

axiom (forall x: int, y: int :: { v4.INT_DIV(x, y): int } v4.INT_DIV(x, y): int == x div y);

axiom (forall x: int, y: int :: { v4.INT_LT(x, y): bool } v4.INT_LT(x, y): bool <==> x < y);

axiom (forall x: int, y: int :: { v4.INT_ULT(x, y): bool } v4.INT_ULT(x, y): bool <==> x < y);

axiom (forall x: int, y: int :: { v4.INT_LEQ(x, y): bool } v4.INT_LEQ(x, y): bool <==> x <= y);

axiom (forall x: int, y: int :: { v4.INT_ULEQ(x, y): bool } v4.INT_ULEQ(x, y): bool <==> x <= y);

axiom (forall x: int, y: int :: { v4.INT_GT(x, y): bool } v4.INT_GT(x, y): bool <==> x > y);

axiom (forall x: int, y: int :: { v4.INT_UGT(x, y): bool } v4.INT_UGT(x, y): bool <==> x > y);

axiom (forall x: int, y: int :: { v4.INT_GEQ(x, y): bool } v4.INT_GEQ(x, y): bool <==> x >= y);

axiom (forall x: int, y: int :: { v4.INT_UGEQ(x, y): bool } v4.INT_UGEQ(x, y): bool <==> x >= y);

axiom (forall x: bv32, y: bv32 :: { v4.BV32_EQ(x, y): bool } v4.BV32_EQ(x, y): bool <==> x == y);

axiom (forall x: bv32, y: bv32 :: { v4.BV32_NEQ(x, y): bool } v4.BV32_NEQ(x, y): bool <==> x != y);

axiom (forall a: int, b: int, size: int :: { v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) } v4.INT_LEQ(v4.INT_MULT(size, v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size)), v4.INT_SUB(a, b)) && v4.INT_LT(v4.INT_SUB(a, b), v4.INT_MULT(size, v4.INT_ADD(v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size), 1))));

axiom (forall a: int, b: int, size: int :: { v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) } v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, 1) == v4.INT_SUB(a, b));

axiom (forall a: int, a_size: int, b: int :: { v4.MINUS_LEFT_PTR(a, a_size, b) } v4.MINUS_LEFT_PTR(a, a_size, b) == v4.INT_SUB(a, v4.INT_MULT(a_size, b)));

axiom (forall a: int, a_size: int, b: int :: { v4.PLUS(a, a_size, b) } v4.PLUS(a, a_size, b) == v4.INT_ADD(a, v4.INT_MULT(a_size, b)));

axiom (forall a: int, b: int :: { v4.MULT(a, b) } v4.MULT(a, b) == v4.INT_MULT(a, b));

axiom (forall a: int, b: int :: { v4.DIV(a, b) } a >= 0 && b > 0 ==> b * v4.DIV(a, b) <= a && a < b * (v4.DIV(a, b) + 1));

axiom (forall a: int, b: int :: { v4.DIV(a, b) } a >= 0 && b < 0 ==> b * v4.DIV(a, b) <= a && a < b * (v4.DIV(a, b) - 1));

axiom (forall a: int, b: int :: { v4.DIV(a, b) } a < 0 && b > 0 ==> b * v4.DIV(a, b) >= a && a > b * (v4.DIV(a, b) - 1));

axiom (forall a: int, b: int :: { v4.DIV(a, b) } a < 0 && b < 0 ==> b * v4.DIV(a, b) >= a && a > b * (v4.DIV(a, b) + 1));

axiom v4.POW2(1);

axiom v4.POW2(2);

axiom v4.POW2(4);

axiom v4.POW2(8);

axiom v4.POW2(16);

axiom v4.POW2(32);

axiom v4.POW2(64);

axiom v4.POW2(128);

axiom v4.POW2(256);

axiom v4.POW2(512);

axiom v4.POW2(1024);

axiom v4.POW2(2048);

axiom v4.POW2(4096);

axiom v4.POW2(8192);

axiom v4.POW2(16384);

axiom v4.POW2(32768);

axiom v4.POW2(65536);

axiom v4.POW2(131072);

axiom v4.POW2(262144);

axiom v4.POW2(524288);

axiom v4.POW2(1048576);

axiom v4.POW2(2097152);

axiom v4.POW2(4194304);

axiom v4.POW2(8388608);

axiom v4.POW2(16777216);

axiom v4.POW2(33554432);

axiom (forall a: int, b: int :: { v4.BIT_BAND(a, b) } a == b ==> v4.BIT_BAND(a, b) == a);

axiom (forall a: int, b: int :: { v4.BIT_BAND(a, b) } v4.POW2(a) && v4.POW2(b) && a != b ==> v4.BIT_BAND(a, b) == 0);

axiom (forall a: int, b: int :: { v4.BIT_BAND(a, b) } a == 0 || b == 0 ==> v4.BIT_BAND(a, b) == 0);

axiom (forall a: bool, b: int, c: int :: { v4.choose(a, b, c) } a ==> v4.choose(a, b, c) == b);

axiom (forall a: bool, b: int, c: int :: { v4.choose(a, b, c) } !a ==> v4.choose(a, b, c) == c);

axiom (forall a: bool :: { v4.LIFT(a) } a <==> v4.LIFT(a) != 0);

axiom (forall a: int :: { v4.PTR_NOT(a) } a == 0 ==> v4.PTR_NOT(a) != 0);

axiom (forall a: int :: { v4.PTR_NOT(a) } a != 0 ==> v4.PTR_NOT(a) == 0);

axiom (forall a: int :: { v4.NULL_CHECK(a) } a == 0 ==> v4.NULL_CHECK(a) != 0);

axiom (forall a: int :: { v4.NULL_CHECK(a) } a != 0 ==> v4.NULL_CHECK(a) == 0);

axiom (forall n: int, x: int, y: int :: { v4.AtLeast(n, x)[y] } v4.AtLeast(n, x)[y] ==> v4.INT_LEQ(x, y) && v4.Rep(n, x) == v4.Rep(n, y));

axiom (forall n: int, x: int, y: int :: { v4.AtLeast(n, x), v4.Rep(n, x), v4.Rep(n, y) } v4.INT_LEQ(x, y) && v4.Rep(n, x) == v4.Rep(n, y) ==> v4.AtLeast(n, x)[y]);

axiom (forall n: int, x: int :: { v4.AtLeast(n, x) } v4.AtLeast(n, x)[x]);

axiom (forall n: int, x: int, z: int :: { v4.PLUS(x, n, z) } v4.Rep(n, x) == v4.Rep(n, v4.PLUS(x, n, z)));

axiom (forall n: int, x: int :: { v4.Rep(n, x) } (exists k: int :: v4.INT_SUB(v4.Rep(n, x), x) == v4.INT_MULT(n, k)));

axiom (forall x: int, n: int, z: int :: { v4.Array(x, n, z) } v4.INT_LEQ(z, 0) ==> v4.Equal(v4.Array(x, n, z), v4.Empty()));

axiom (forall x: int, n: int, z: int :: { v4.Array(x, n, z) } v4.INT_GT(z, 0) ==> v4.Equal(v4.Array(x, n, z), v4.Difference(v4.AtLeast(n, x), v4.AtLeast(n, v4.PLUS(x, n, z)))));

axiom (forall x: int :: !v4.Empty()[x]);

axiom (forall x: int :: v4.SetTrue()[x]);

axiom (forall x: int, y: int :: { v4.Singleton(y)[x] } v4.Singleton(y)[x] <==> x == y);

axiom (forall y: int :: { v4.Singleton(y) } v4.Singleton(y)[y]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v4.Union(S, T)[x] } { v4.Union(S, T), S[x] } { v4.Union(S, T), T[x] } v4.Union(S, T)[x] <==> S[x] || T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v4.Intersection(S, T)[x] } { v4.Intersection(S, T), S[x] } { v4.Intersection(S, T), T[x] } v4.Intersection(S, T)[x] <==> S[x] && T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v4.Difference(S, T)[x] } { v4.Difference(S, T), S[x] } { v4.Difference(S, T), T[x] } v4.Difference(S, T)[x] <==> S[x] && !T[x]);

axiom (forall S: [int]bool, T: [int]bool :: { v4.Equal(S, T) } v4.Equal(S, T) <==> v4.Subset(S, T) && v4.Subset(T, S));

axiom (forall x: int, S: [int]bool, T: [int]bool :: { S[x], v4.Subset(S, T) } { T[x], v4.Subset(S, T) } S[x] && v4.Subset(S, T) ==> T[x]);

axiom (forall S: [int]bool, T: [int]bool :: { v4.Subset(S, T) } v4.Subset(S, T) || (exists x: int :: S[x] && !T[x]));

axiom (forall x: int, S: [int]bool, T: [int]bool :: { S[x], v4.Disjoint(S, T) } { T[x], v4.Disjoint(S, T) } !(S[x] && v4.Disjoint(S, T) && T[x]));

axiom (forall S: [int]bool, T: [int]bool :: { v4.Disjoint(S, T) } v4.Disjoint(S, T) || (exists x: int :: S[x] && T[x]));

axiom (forall f: [int]int, x: int :: { v4.Inverse(f, f[x]) } v4.Inverse(f, f[x])[x]);

axiom (forall f: [int]int, x: int, y: int :: { v4.Inverse(f, y), f[x] } v4.Inverse(f, y)[x] ==> f[x] == y);

axiom (forall f: [int]int, x: int, y: int :: { v4.Inverse(f[x := y], y) } v4.Equal(v4.Inverse(f[x := y], y), v4.Union(v4.Inverse(f, y), v4.Singleton(x))));

axiom (forall f: [int]int, x: int, y: int, z: int :: { v4.Inverse(f[x := y], z) } y == z || v4.Equal(v4.Inverse(f[x := y], z), v4.Difference(v4.Inverse(f, z), v4.Singleton(x))));

axiom (forall x: int, S: [int]bool, M: [int]int :: { v4.Dereference(S, M)[x] } v4.Dereference(S, M)[x] ==> (exists y: int :: x == M[y] && S[y]));

axiom (forall x: int, S: [int]bool, M: [int]int :: { M[x], S[x], v4.Dereference(S, M) } S[x] ==> v4.Dereference(S, M)[M[x]]);

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v4.Dereference(S, M[x := y]) } !S[x] ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Dereference(S, M)));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v4.Dereference(S, M[x := y]) } S[x] && v4.Equal(v4.Intersection(v4.Inverse(M, M[x]), S), v4.Singleton(x)) ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Union(v4.Difference(v4.Dereference(S, M), v4.Singleton(M[x])), v4.Singleton(y))));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v4.Dereference(S, M[x := y]) } S[x] && !v4.Equal(v4.Intersection(v4.Inverse(M, M[x]), S), v4.Singleton(x)) ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Union(v4.Dereference(S, M), v4.Singleton(y))));

axiom (forall M: [name][int]int, x: int :: { v4.Unified(M)[x] } v4.Unified(M)[x] == M[v4.Field(x)][x]);

axiom (forall M: [name][int]int, x: int, y: int :: { v4.Unified(M[v4.Field(x) := M[v4.Field(x)][x := y]]) } v4.Unified(M[v4.Field(x) := M[v4.Field(x)][x := y]]) == v4.Unified(M)[x := y]);

procedure v4.havoc_assert(i: int);



procedure v4.havoc_assume(i: int);



procedure v4.__HAVOC_free(a: int);



procedure v4.__HAVOC_malloc(obj_size: int) returns (new: int);
  free ensures new == _uf_v4.__HAVOC_malloc_new(obj_size);



procedure v4.__HAVOC_det_malloc(obj_size: int) returns (new: int);
  free ensures new == _uf_v4.__HAVOC_det_malloc_new(obj_size);



procedure v4.__HAVOC_memset_split_1(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_1_ret(A, p, c, n);



procedure v4.__HAVOC_memset_split_2(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_2_ret(A, p, c, n);



procedure v4.__HAVOC_memset_split_4(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_4_ret(A, p, c, n);



procedure v4.nondet_choice() returns (x: int);
  free ensures x == _uf_v4.nondet_choice_x();



procedure v4.det_choice() returns (x: int);
  free ensures x == _uf_v4.det_choice_x();



procedure v4._strdup(str: int) returns (new: int);
  free ensures new == _uf_v4._strdup_new(str);



procedure v4._xstrcasecmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v4._xstrcasecmp_ret(a0, a1);



procedure v4._xstrcmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v4._xstrcmp_ret(a0, a1);



procedure v4.UnsignedAdd(a0: int, a1: int) returns (ret: int);



procedure v4.UnsignedSub(a0: int, a1: int) returns (ret: int);



procedure {:inline 1} v4.Eval(e_.1: int);
  modifies v4.Mem_T.result__EXPR;
  free ensures v4.Mem_T.result__EXPR == _uf_v4.Eval_v4.Mem_T.result__EXPR(e_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.isUnsigned));



procedure v4.EvalEntry1(e_.1: int, outval_.1: int);
  modifies v4.isUnsigned, v4.Mem_T.result__EXPR, v4.Mem_T.INT4;
  free ensures v4.isUnsigned == _uf_v4.EvalEntry1_v4.isUnsigned(e_.1, outval_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.Mem_T.INT4), old(v4.isUnsigned));
  free ensures v4.Mem_T.result__EXPR == _uf_v4.EvalEntry1_v4.Mem_T.result__EXPR(e_.1, outval_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.Mem_T.INT4), old(v4.isUnsigned));
  free ensures v4.Mem_T.INT4 == _uf_v4.EvalEntry1_v4.Mem_T.INT4(e_.1, outval_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.Mem_T.INT4), old(v4.isUnsigned));



procedure v4.EvalEntry2(e_.1: int);
  modifies v4.isUnsigned, v4.Mem_T.result__EXPR;
  free ensures v4.isUnsigned == _uf_v4.EvalEntry2_v4.isUnsigned(e_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.isUnsigned));
  free ensures v4.Mem_T.result__EXPR == _uf_v4.EvalEntry2_v4.Mem_T.result__EXPR(e_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.isUnsigned));



procedure v4.__havoc_heapglobal_init();



implementation {:inline 1} v4.Eval(e_.1: int)
{
  var havoc_stringTemp: int;
  var condVal: int;
  var a1: int;
  var a2: int;
  var e: int;
  var op: int;
  var res: int;
  var result.UnsignedAdd$1: int;
  var result.UnsignedSub$2: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
    havoc_stringTemp := 0;
    goto start#2;

  start#2:
    assume v4.INT_LT(e_.1, v4.alloc);
    a1 := 0;
    a2 := 0;
    e := 0;
    op := 0;
    res := 0;
    result.UnsignedAdd$1 := 0;
    result.UnsignedSub$2 := 0;
    e := e_.1;
    goto label_3#2;

  label_3#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
    goto label_4#2;

  label_4#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
    goto label_5#2;

  label_5#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
    goto label_6#2;

  label_6#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
    goto label_7#2;

  label_7#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 21} true;
    assert true;
    op := v4.Mem_T.oper__EXPR[v4.oper__EXPR(e)];
    assume v4.value_is(v4.__ctobpl_const_1, op);
    assume v4.value_is(v4.__ctobpl_const_2, e);
    assume v4.value_is(v4.__ctobpl_const_3, v4.Mem_T.oper__EXPR[v4.oper__EXPR(e)]);
    goto label_8#2;

  label_8#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 22} true;
    assert true;
    a1 := v4.Mem_T.op1__EXPR[v4.op1__EXPR(e)];
    assume v4.value_is(v4.__ctobpl_const_4, a1);
    assume v4.value_is(v4.__ctobpl_const_5, e);
    assume v4.value_is(v4.__ctobpl_const_6, v4.Mem_T.op1__EXPR[v4.op1__EXPR(e)]);
    goto label_9#2;

  label_9#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 23} true;
    assert true;
    a2 := v4.Mem_T.op2__EXPR[v4.op2__EXPR(e)];
    assume v4.value_is(v4.__ctobpl_const_7, a2);
    assume v4.value_is(v4.__ctobpl_const_8, e);
    assume v4.value_is(v4.__ctobpl_const_9, v4.Mem_T.op2__EXPR[v4.op2__EXPR(e)]);
    goto label_10#2;

  label_10#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 24} true;
    res := 0 - 1;
    assume v4.value_is(v4.__ctobpl_const_10, res);
    goto label_11#2;

  label_11#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 26} true;
    goto label_11_case_0#2, label_11_case_1#2, label_11_case_2#2;

  label_11_case_2#2:
    assume v4.INT_EQ(op, 2);
    assume v4.value_is(v4.__ctobpl_const_11, op);
    goto label_14#2;

  label_14#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 35} true;
    goto label_14_true#2, label_14_false#2;

  label_14_false#2:
    assume v4.isUnsigned == 0;
    assume v4.value_is(v4.__ctobpl_const_16, v4.isUnsigned);
    goto label_15#2;

  label_15#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 38} true;
    res := v4.MINUS_BOTH_PTR_OR_BOTH_INT(a1, a2, 1);
    assume v4.value_is(v4.__ctobpl_const_17, res);
    assume v4.value_is(v4.__ctobpl_const_18, a1);
    assume v4.value_is(v4.__ctobpl_const_19, a2);
    goto label_12#2;

  label_14_true#2:
    assume v4.isUnsigned != 0;
    assume v4.value_is(v4.__ctobpl_const_16, v4.isUnsigned);
    goto label_16#2;

  label_16#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 36} true;
    call result.UnsignedSub$2 := v4.UnsignedSub(a1, a2);
    assume v4.value_is(v4.__ctobpl_const_20, a1);
    assume v4.value_is(v4.__ctobpl_const_21, a2);
    assume v4.value_is(v4.__ctobpl_const_22, a1);
    assume v4.value_is(v4.__ctobpl_const_23, a2);
    goto label_19#2;

  label_19#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 36} true;
    res := result.UnsignedSub$2;
    assume v4.value_is(v4.__ctobpl_const_24, res);
    assume v4.value_is(v4.__ctobpl_const_25, result.UnsignedSub$2);
    goto label_12#2;

  label_11_case_1#2:
    assume v4.INT_EQ(op, 1);
    assume v4.value_is(v4.__ctobpl_const_11, op);
    goto label_13#2;

  label_13#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 29} true;
    goto label_13_true#2, label_13_false#2;

  label_13_false#2:
    assume v4.isUnsigned == 0;
    assume v4.value_is(v4.__ctobpl_const_15, v4.isUnsigned);
    goto label_20#2;

  label_20#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 32} true;
    res := v4.PLUS(a1, 1, a2);
    assume v4.value_is(v4.__ctobpl_const_26, res);
    assume v4.value_is(v4.__ctobpl_const_27, a1);
    assume v4.value_is(v4.__ctobpl_const_28, a2);
    goto label_12#2;

  label_13_true#2:
    assume v4.isUnsigned != 0;
    assume v4.value_is(v4.__ctobpl_const_15, v4.isUnsigned);
    goto label_21#2;

  label_21#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 30} true;
    call result.UnsignedAdd$1 := v4.UnsignedAdd(a1, a2);
    assume v4.value_is(v4.__ctobpl_const_29, a1);
    assume v4.value_is(v4.__ctobpl_const_30, a2);
    assume v4.value_is(v4.__ctobpl_const_31, a1);
    assume v4.value_is(v4.__ctobpl_const_32, a2);
    goto label_24#2;

  label_24#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 30} true;
    res := result.UnsignedAdd$1;
    assume v4.value_is(v4.__ctobpl_const_33, res);
    assume v4.value_is(v4.__ctobpl_const_34, result.UnsignedAdd$1);
    goto label_12#2;

  label_11_case_0#2:
    assume v4.INT_NEQ(op, 1);
    assume v4.INT_NEQ(op, 2);
    assume v4.value_is(v4.__ctobpl_const_11, op);
    goto label_12#2;

  label_12#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 41} true;
    assert true;
    v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR[v4.result__EXPR(e) := res];
    assume v4.value_is(v4.__ctobpl_const_12, e);
    assume v4.value_is(v4.__ctobpl_const_13, v4.Mem_T.result__EXPR[v4.result__EXPR(e)]);
    assume v4.value_is(v4.__ctobpl_const_14, res);
    goto label_1#2;

  label_1#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 42} true;
    return;
}



implementation v4.EvalEntry1(e_.1: int, outval_.1: int)
{
  var havoc_stringTemp: int;
  var condVal: int;
  var e: int;
  var outval: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
    havoc_stringTemp := 0;
    goto start#2;

  start#2:
    assume v4.INT_LT(e_.1, v4.alloc);
    assume v4.INT_LT(outval_.1, v4.alloc);
    e := 0;
    outval := 0;
    e := e_.1;
    outval := outval_.1;
    goto label_3#2;

  label_3#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 47} true;
    v4.isUnsigned := 1;
    assume v4.value_is(v4.__ctobpl_const_35, v4.isUnsigned);
    goto label_4#2;

  label_4#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 48} true;
    call v4.Eval(e);
    assume v4.value_is(v4.__ctobpl_const_36, e);
    assume v4.value_is(v4.__ctobpl_const_37, e);
    goto label_7#2;

  label_7#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 49} true;
    assert true;
    assert true;
    v4.Mem_T.INT4 := v4.Mem_T.INT4[outval := v4.Mem_T.result__EXPR[v4.result__EXPR(e)]];
    assume v4.value_is(v4.__ctobpl_const_38, outval);
    assume v4.value_is(v4.__ctobpl_const_39, v4.Mem_T.INT4[outval]);
    assume v4.value_is(v4.__ctobpl_const_40, e);
    assume v4.value_is(v4.__ctobpl_const_41, v4.Mem_T.result__EXPR[v4.result__EXPR(e)]);
    goto label_1#2;

  label_1#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 50} true;
    return;
}



implementation v4.EvalEntry2(e_.1: int)
{
  var havoc_stringTemp: int;
  var condVal: int;
  var e: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
    havoc_stringTemp := 0;
    goto start#2;

  start#2:
    assume v4.INT_LT(e_.1, v4.alloc);
    e := 0;
    e := e_.1;
    goto label_3#2;

  label_3#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 54} true;
    v4.isUnsigned := 0;
    assume v4.value_is(v4.__ctobpl_const_42, v4.isUnsigned);
    goto label_4#2;

  label_4#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 55} true;
    call v4.Eval(e);
    assume v4.value_is(v4.__ctobpl_const_43, e);
    assume v4.value_is(v4.__ctobpl_const_44, e);
    goto label_1#2;

  label_1#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 56} true;
    return;
}



implementation v4.__havoc_heapglobal_init()
{

  anon0#2:
    return;
}



var v2.Mem: [name][int]int;

var v2.alloc: int;

var v2.Mem_T.INT4: [int]int;

var v2.Mem_T.op1__EXPR: [int]int;

var v2.Mem_T.op2__EXPR: [int]int;

var v2.Mem_T.oper__EXPR: [int]int;

var v2.Mem_T.result__EXPR: [int]int;

var v2.detChoiceCnt: int;

var v2.Res_KERNEL_SOURCE: [int]int;

var v2.Res_PROBED: [int]int;

const unique v2.T.oper__EXPR: name;

const unique v2.T.op1__EXPR: name;

const unique v2.T.op2__EXPR: name;

const unique v2.T.result__EXPR: name;

const unique v2.T.INT4: name;

const unique v2.T.PINT4: name;

const unique v2.T.PPINT4: name;

const unique v2.T.PP_EXPR: name;

const unique v2.T.P_EXPR: name;

const unique v2.T._EXPR: name;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 21} unique v2.__ctobpl_const_7: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 21} unique v2.__ctobpl_const_8: int;

const {:model_const "e->oper"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 19} unique v2.__ctobpl_const_3: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 20} unique v2.__ctobpl_const_4: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 20} unique v2.__ctobpl_const_5: int;

const {:model_const "e->op1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 20} unique v2.__ctobpl_const_6: int;

const {:model_const "e->op2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 21} unique v2.__ctobpl_const_9: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 22} unique v2.__ctobpl_const_10: int;

const {:model_const "op"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 24} unique v2.__ctobpl_const_11: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 35} unique v2.__ctobpl_const_12: int;

const {:model_const "e->result"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 35} unique v2.__ctobpl_const_13: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 35} unique v2.__ctobpl_const_14: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 27} unique v2.__ctobpl_const_15: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 27} unique v2.__ctobpl_const_16: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 27} unique v2.__ctobpl_const_17: int;

const {:model_const "res"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 29} unique v2.__ctobpl_const_18: int;

const {:model_const "a1"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 29} unique v2.__ctobpl_const_19: int;

const {:model_const "a2"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 29} unique v2.__ctobpl_const_20: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 40} unique v2.__ctobpl_const_21: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 40} unique v2.__ctobpl_const_22: int;

const {:model_const "outval"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 41} unique v2.__ctobpl_const_23: int;

const {:model_const "*outval"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 41} unique v2.__ctobpl_const_24: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 41} unique v2.__ctobpl_const_25: int;

const {:model_const "e->result"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 41} unique v2.__ctobpl_const_26: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 46} unique v2.__ctobpl_const_27: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 46} unique v2.__ctobpl_const_28: int;

const {:model_const "op"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 19} unique v2.__ctobpl_const_1: int;

const {:model_const "e"} {:sourceFile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceLine 19} unique v2.__ctobpl_const_2: int;

axiom (forall b0: byte, c0: byte :: { v4.OneByteToInt(b0), v4.OneByteToInt(c0) } v4.OneByteToInt(b0) == v4.OneByteToInt(c0) ==> b0 == c0);

axiom (forall b0: byte, b1: byte, c0: byte, c1: byte :: { v4.TwoBytesToInt(b0, b1), v4.TwoBytesToInt(c0, c1) } v4.TwoBytesToInt(b0, b1) == v4.TwoBytesToInt(c0, c1) ==> b0 == c0 && b1 == c1);

axiom (forall b0: byte, b1: byte, b2: byte, b3: byte, c0: byte, c1: byte, c2: byte, c3: byte :: { v4.FourBytesToInt(b0, b1, b2, b3), v4.FourBytesToInt(c0, c1, c2, c3) } v4.FourBytesToInt(b0, b1, b2, b3) == v4.FourBytesToInt(c0, c1, c2, c3) ==> b0 == c0 && b1 == c1 && b2 == c2 && b3 == c3);

axiom (forall x: int :: { v4.Base(x) } v4.INT_LEQ(v4.Base(x), x));

axiom (forall a: int, t: name :: { v4.Match(a, v4.T.Ptr(t)) } v4.Match(a, v4.T.Ptr(t)) <==> v4.Field(a) == v4.T.Ptr(t));

axiom (forall b: int, a: int, t: name :: { v4.MatchBase(b, a, v4.T.Ptr(t)) } v4.MatchBase(b, a, v4.T.Ptr(t)) <==> v4.Base(a) == b);

axiom (forall v: int, t: name :: { v4.HasType(v, v4.T.Ptr(t)) } v4.HasType(v, v4.T.Ptr(t)) <==> v == 0 || (v4.INT_GT(v, 0) && v4.Match(v, t) && v4.MatchBase(v4.Base(v), v, t)));

axiom (forall x: int, S: [int]bool :: { v4._S_op1__EXPR(S)[x] } v4._S_op1__EXPR(S)[x] <==> S[v4.op1__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v4._S_op1__EXPRInv(S)[x] } v4._S_op1__EXPRInv(S)[x] <==> S[v4.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_op1__EXPR(S) } S[x] ==> v4._S_op1__EXPR(S)[v4.op1__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_op1__EXPRInv(S) } S[x] ==> v4._S_op1__EXPRInv(S)[v4.op1__EXPRInv(x)]);

axiom (forall x: int :: { v4.op1__EXPR(x) } v4.op1__EXPR(x) == v4.INT_ADD(x, 4));

axiom (forall x: int :: { v4.op1__EXPRInv(x) } v4.op1__EXPRInv(x) == v4.INT_SUB(x, 4));

axiom (forall x: int :: { v4.op1__EXPR(x) } v4.op1__EXPR(x) == v4.PLUS(x, 1, 4));

axiom (forall x: int, S: [int]bool :: { v4._S_op2__EXPR(S)[x] } v4._S_op2__EXPR(S)[x] <==> S[v4.op2__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v4._S_op2__EXPRInv(S)[x] } v4._S_op2__EXPRInv(S)[x] <==> S[v4.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_op2__EXPR(S) } S[x] ==> v4._S_op2__EXPR(S)[v4.op2__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_op2__EXPRInv(S) } S[x] ==> v4._S_op2__EXPRInv(S)[v4.op2__EXPRInv(x)]);

axiom (forall x: int :: { v4.op2__EXPR(x) } v4.op2__EXPR(x) == v4.INT_ADD(x, 8));

axiom (forall x: int :: { v4.op2__EXPRInv(x) } v4.op2__EXPRInv(x) == v4.INT_SUB(x, 8));

axiom (forall x: int :: { v4.op2__EXPR(x) } v4.op2__EXPR(x) == v4.PLUS(x, 1, 8));

axiom (forall x: int, S: [int]bool :: { v4._S_oper__EXPR(S)[x] } v4._S_oper__EXPR(S)[x] <==> S[v4.oper__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v4._S_oper__EXPRInv(S)[x] } v4._S_oper__EXPRInv(S)[x] <==> S[v4.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_oper__EXPR(S) } S[x] ==> v4._S_oper__EXPR(S)[v4.oper__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_oper__EXPRInv(S) } S[x] ==> v4._S_oper__EXPRInv(S)[v4.oper__EXPRInv(x)]);

axiom (forall x: int :: { v4.oper__EXPR(x) } v4.oper__EXPR(x) == v4.INT_ADD(x, 0));

axiom (forall x: int :: { v4.oper__EXPRInv(x) } v4.oper__EXPRInv(x) == v4.INT_SUB(x, 0));

axiom (forall x: int :: { v4.oper__EXPR(x) } v4.oper__EXPR(x) == v4.PLUS(x, 1, 0));

axiom (forall x: int, S: [int]bool :: { v4._S_result__EXPR(S)[x] } v4._S_result__EXPR(S)[x] <==> S[v4.result__EXPRInv(x)]);

axiom (forall x: int, S: [int]bool :: { v4._S_result__EXPRInv(S)[x] } v4._S_result__EXPRInv(S)[x] <==> S[v4.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_result__EXPR(S) } S[x] ==> v4._S_result__EXPR(S)[v4.result__EXPR(x)]);

axiom (forall x: int, S: [int]bool :: { S[x], v4._S_result__EXPRInv(S) } S[x] ==> v4._S_result__EXPRInv(S)[v4.result__EXPRInv(x)]);

axiom (forall x: int :: { v4.result__EXPR(x) } v4.result__EXPR(x) == v4.INT_ADD(x, 12));

axiom (forall x: int :: { v4.result__EXPRInv(x) } v4.result__EXPRInv(x) == v4.INT_SUB(x, 12));

axiom (forall x: int :: { v4.result__EXPR(x) } v4.result__EXPR(x) == v4.PLUS(x, 1, 12));

axiom (forall x: int, y: int :: { v4.INT_EQ(x, y): bool } v4.INT_EQ(x, y): bool <==> x == y);

axiom (forall x: int, y: int :: { v4.INT_NEQ(x, y): bool } v4.INT_NEQ(x, y): bool <==> x != y);

axiom (forall x: int, y: int :: { v4.INT_ADD(x, y): int } v4.INT_ADD(x, y): int == x + y);

axiom (forall x: int, y: int :: { v4.INT_SUB(x, y): int } v4.INT_SUB(x, y): int == x - y);

axiom (forall x: int, y: int :: { v4.INT_MULT(x, y): int } v4.INT_MULT(x, y): int == x * y);

axiom (forall x: int, y: int :: { v4.INT_DIV(x, y): int } v4.INT_DIV(x, y): int == x div y);

axiom (forall x: int, y: int :: { v4.INT_LT(x, y): bool } v4.INT_LT(x, y): bool <==> x < y);

axiom (forall x: int, y: int :: { v4.INT_ULT(x, y): bool } v4.INT_ULT(x, y): bool <==> x < y);

axiom (forall x: int, y: int :: { v4.INT_LEQ(x, y): bool } v4.INT_LEQ(x, y): bool <==> x <= y);

axiom (forall x: int, y: int :: { v4.INT_ULEQ(x, y): bool } v4.INT_ULEQ(x, y): bool <==> x <= y);

axiom (forall x: int, y: int :: { v4.INT_GT(x, y): bool } v4.INT_GT(x, y): bool <==> x > y);

axiom (forall x: int, y: int :: { v4.INT_UGT(x, y): bool } v4.INT_UGT(x, y): bool <==> x > y);

axiom (forall x: int, y: int :: { v4.INT_GEQ(x, y): bool } v4.INT_GEQ(x, y): bool <==> x >= y);

axiom (forall x: int, y: int :: { v4.INT_UGEQ(x, y): bool } v4.INT_UGEQ(x, y): bool <==> x >= y);

axiom (forall x: bv32, y: bv32 :: { v4.BV32_EQ(x, y): bool } v4.BV32_EQ(x, y): bool <==> x == y);

axiom (forall x: bv32, y: bv32 :: { v4.BV32_NEQ(x, y): bool } v4.BV32_NEQ(x, y): bool <==> x != y);

axiom (forall a: int, b: int, size: int :: { v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) } v4.INT_LEQ(v4.INT_MULT(size, v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size)), v4.INT_SUB(a, b)) && v4.INT_LT(v4.INT_SUB(a, b), v4.INT_MULT(size, v4.INT_ADD(v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size), 1))));

axiom (forall a: int, b: int, size: int :: { v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, size) } v4.MINUS_BOTH_PTR_OR_BOTH_INT(a, b, 1) == v4.INT_SUB(a, b));

axiom (forall a: int, a_size: int, b: int :: { v4.MINUS_LEFT_PTR(a, a_size, b) } v4.MINUS_LEFT_PTR(a, a_size, b) == v4.INT_SUB(a, v4.INT_MULT(a_size, b)));

axiom (forall a: int, a_size: int, b: int :: { v4.PLUS(a, a_size, b) } v4.PLUS(a, a_size, b) == v4.INT_ADD(a, v4.INT_MULT(a_size, b)));

axiom (forall a: int, b: int :: { v4.MULT(a, b) } v4.MULT(a, b) == v4.INT_MULT(a, b));

axiom (forall a: int, b: int :: { v4.DIV(a, b) } a >= 0 && b > 0 ==> b * v4.DIV(a, b) <= a && a < b * (v4.DIV(a, b) + 1));

axiom (forall a: int, b: int :: { v4.DIV(a, b) } a >= 0 && b < 0 ==> b * v4.DIV(a, b) <= a && a < b * (v4.DIV(a, b) - 1));

axiom (forall a: int, b: int :: { v4.DIV(a, b) } a < 0 && b > 0 ==> b * v4.DIV(a, b) >= a && a > b * (v4.DIV(a, b) - 1));

axiom (forall a: int, b: int :: { v4.DIV(a, b) } a < 0 && b < 0 ==> b * v4.DIV(a, b) >= a && a > b * (v4.DIV(a, b) + 1));

axiom v4.POW2(1);

axiom v4.POW2(2);

axiom v4.POW2(4);

axiom v4.POW2(8);

axiom v4.POW2(16);

axiom v4.POW2(32);

axiom v4.POW2(64);

axiom v4.POW2(128);

axiom v4.POW2(256);

axiom v4.POW2(512);

axiom v4.POW2(1024);

axiom v4.POW2(2048);

axiom v4.POW2(4096);

axiom v4.POW2(8192);

axiom v4.POW2(16384);

axiom v4.POW2(32768);

axiom v4.POW2(65536);

axiom v4.POW2(131072);

axiom v4.POW2(262144);

axiom v4.POW2(524288);

axiom v4.POW2(1048576);

axiom v4.POW2(2097152);

axiom v4.POW2(4194304);

axiom v4.POW2(8388608);

axiom v4.POW2(16777216);

axiom v4.POW2(33554432);

axiom (forall a: int, b: int :: { v4.BIT_BAND(a, b) } a == b ==> v4.BIT_BAND(a, b) == a);

axiom (forall a: int, b: int :: { v4.BIT_BAND(a, b) } v4.POW2(a) && v4.POW2(b) && a != b ==> v4.BIT_BAND(a, b) == 0);

axiom (forall a: int, b: int :: { v4.BIT_BAND(a, b) } a == 0 || b == 0 ==> v4.BIT_BAND(a, b) == 0);

axiom (forall a: bool, b: int, c: int :: { v4.choose(a, b, c) } a ==> v4.choose(a, b, c) == b);

axiom (forall a: bool, b: int, c: int :: { v4.choose(a, b, c) } !a ==> v4.choose(a, b, c) == c);

axiom (forall a: bool :: { v4.LIFT(a) } a <==> v4.LIFT(a) != 0);

axiom (forall a: int :: { v4.PTR_NOT(a) } a == 0 ==> v4.PTR_NOT(a) != 0);

axiom (forall a: int :: { v4.PTR_NOT(a) } a != 0 ==> v4.PTR_NOT(a) == 0);

axiom (forall a: int :: { v4.NULL_CHECK(a) } a == 0 ==> v4.NULL_CHECK(a) != 0);

axiom (forall a: int :: { v4.NULL_CHECK(a) } a != 0 ==> v4.NULL_CHECK(a) == 0);

axiom (forall n: int, x: int, y: int :: { v4.AtLeast(n, x)[y] } v4.AtLeast(n, x)[y] ==> v4.INT_LEQ(x, y) && v4.Rep(n, x) == v4.Rep(n, y));

axiom (forall n: int, x: int, y: int :: { v4.AtLeast(n, x), v4.Rep(n, x), v4.Rep(n, y) } v4.INT_LEQ(x, y) && v4.Rep(n, x) == v4.Rep(n, y) ==> v4.AtLeast(n, x)[y]);

axiom (forall n: int, x: int :: { v4.AtLeast(n, x) } v4.AtLeast(n, x)[x]);

axiom (forall n: int, x: int, z: int :: { v4.PLUS(x, n, z) } v4.Rep(n, x) == v4.Rep(n, v4.PLUS(x, n, z)));

axiom (forall n: int, x: int :: { v4.Rep(n, x) } (exists k: int :: v4.INT_SUB(v4.Rep(n, x), x) == v4.INT_MULT(n, k)));

axiom (forall x: int, n: int, z: int :: { v4.Array(x, n, z) } v4.INT_LEQ(z, 0) ==> v4.Equal(v4.Array(x, n, z), v4.Empty()));

axiom (forall x: int, n: int, z: int :: { v4.Array(x, n, z) } v4.INT_GT(z, 0) ==> v4.Equal(v4.Array(x, n, z), v4.Difference(v4.AtLeast(n, x), v4.AtLeast(n, v4.PLUS(x, n, z)))));

axiom (forall x: int :: !v4.Empty()[x]);

axiom (forall x: int :: v4.SetTrue()[x]);

axiom (forall x: int, y: int :: { v4.Singleton(y)[x] } v4.Singleton(y)[x] <==> x == y);

axiom (forall y: int :: { v4.Singleton(y) } v4.Singleton(y)[y]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v4.Union(S, T)[x] } { v4.Union(S, T), S[x] } { v4.Union(S, T), T[x] } v4.Union(S, T)[x] <==> S[x] || T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v4.Intersection(S, T)[x] } { v4.Intersection(S, T), S[x] } { v4.Intersection(S, T), T[x] } v4.Intersection(S, T)[x] <==> S[x] && T[x]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: { v4.Difference(S, T)[x] } { v4.Difference(S, T), S[x] } { v4.Difference(S, T), T[x] } v4.Difference(S, T)[x] <==> S[x] && !T[x]);

axiom (forall S: [int]bool, T: [int]bool :: { v4.Equal(S, T) } v4.Equal(S, T) <==> v4.Subset(S, T) && v4.Subset(T, S));

axiom (forall x: int, S: [int]bool, T: [int]bool :: { S[x], v4.Subset(S, T) } { T[x], v4.Subset(S, T) } S[x] && v4.Subset(S, T) ==> T[x]);

axiom (forall S: [int]bool, T: [int]bool :: { v4.Subset(S, T) } v4.Subset(S, T) || (exists x: int :: S[x] && !T[x]));

axiom (forall x: int, S: [int]bool, T: [int]bool :: { S[x], v4.Disjoint(S, T) } { T[x], v4.Disjoint(S, T) } !(S[x] && v4.Disjoint(S, T) && T[x]));

axiom (forall S: [int]bool, T: [int]bool :: { v4.Disjoint(S, T) } v4.Disjoint(S, T) || (exists x: int :: S[x] && T[x]));

axiom (forall f: [int]int, x: int :: { v4.Inverse(f, f[x]) } v4.Inverse(f, f[x])[x]);

axiom (forall f: [int]int, x: int, y: int :: { v4.Inverse(f, y), f[x] } v4.Inverse(f, y)[x] ==> f[x] == y);

axiom (forall f: [int]int, x: int, y: int :: { v4.Inverse(f[x := y], y) } v4.Equal(v4.Inverse(f[x := y], y), v4.Union(v4.Inverse(f, y), v4.Singleton(x))));

axiom (forall f: [int]int, x: int, y: int, z: int :: { v4.Inverse(f[x := y], z) } y == z || v4.Equal(v4.Inverse(f[x := y], z), v4.Difference(v4.Inverse(f, z), v4.Singleton(x))));

axiom (forall x: int, S: [int]bool, M: [int]int :: { v4.Dereference(S, M)[x] } v4.Dereference(S, M)[x] ==> (exists y: int :: x == M[y] && S[y]));

axiom (forall x: int, S: [int]bool, M: [int]int :: { M[x], S[x], v4.Dereference(S, M) } S[x] ==> v4.Dereference(S, M)[M[x]]);

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v4.Dereference(S, M[x := y]) } !S[x] ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Dereference(S, M)));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v4.Dereference(S, M[x := y]) } S[x] && v4.Equal(v4.Intersection(v4.Inverse(M, M[x]), S), v4.Singleton(x)) ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Union(v4.Difference(v4.Dereference(S, M), v4.Singleton(M[x])), v4.Singleton(y))));

axiom (forall x: int, y: int, S: [int]bool, M: [int]int :: { v4.Dereference(S, M[x := y]) } S[x] && !v4.Equal(v4.Intersection(v4.Inverse(M, M[x]), S), v4.Singleton(x)) ==> v4.Equal(v4.Dereference(S, M[x := y]), v4.Union(v4.Dereference(S, M), v4.Singleton(y))));

axiom (forall M: [name][int]int, x: int :: { v4.Unified(M)[x] } v4.Unified(M)[x] == M[v4.Field(x)][x]);

axiom (forall M: [name][int]int, x: int, y: int :: { v4.Unified(M[v4.Field(x) := M[v4.Field(x)][x := y]]) } v4.Unified(M[v4.Field(x) := M[v4.Field(x)][x := y]]) == v4.Unified(M)[x := y]);

procedure v2.havoc_assert(i: int);



procedure v2.havoc_assume(i: int);



procedure v2.__HAVOC_free(a: int);



procedure v2.__HAVOC_malloc(obj_size: int) returns (new: int);
  free ensures new == _uf_v4.__HAVOC_malloc_new(obj_size);



procedure v2.__HAVOC_det_malloc(obj_size: int) returns (new: int);
  free ensures new == _uf_v4.__HAVOC_det_malloc_new(obj_size);



procedure v2.__HAVOC_memset_split_1(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_1_ret(A, p, c, n);



procedure v2.__HAVOC_memset_split_2(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_2_ret(A, p, c, n);



procedure v2.__HAVOC_memset_split_4(A: [int]int, p: int, c: int, n: int) returns (ret: [int]int);
  free ensures ret == _uf_v4.__HAVOC_memset_split_4_ret(A, p, c, n);



procedure v2.nondet_choice() returns (x: int);
  free ensures x == _uf_v4.nondet_choice_x();



procedure v2.det_choice() returns (x: int);
  free ensures x == _uf_v4.det_choice_x();



procedure v2._strdup(str: int) returns (new: int);
  free ensures new == _uf_v4._strdup_new(str);



procedure v2._xstrcasecmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v4._xstrcasecmp_ret(a0, a1);



procedure v2._xstrcmp(a0: int, a1: int) returns (ret: int);
  free ensures ret == _uf_v4._xstrcmp_ret(a0, a1);



procedure {:inline 1} v2.Eval(e_.1: int);
  modifies v4.Mem_T.result__EXPR;
  free ensures v4.Mem_T.result__EXPR == _uf_v4.Eval_v4.Mem_T.result__EXPR(e_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.isUnsigned));



procedure v2.EvalEntry1(e_.1: int, outval_.1: int);
  modifies v4.Mem_T.result__EXPR, v4.Mem_T.INT4;
  free ensures v4.Mem_T.result__EXPR == _uf_v4.EvalEntry1_v4.Mem_T.result__EXPR(e_.1, outval_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.Mem_T.INT4), old(v4.isUnsigned));
  free ensures v4.Mem_T.INT4 == _uf_v4.EvalEntry1_v4.Mem_T.INT4(e_.1, outval_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.Mem_T.INT4), old(v4.isUnsigned));



procedure v2.EvalEntry2(e_.1: int);
  modifies v4.Mem_T.result__EXPR;
  free ensures v4.Mem_T.result__EXPR == _uf_v4.EvalEntry2_v4.Mem_T.result__EXPR(e_.1, old(v4.alloc), old(v4.Mem_T.oper__EXPR), old(v4.Mem_T.op1__EXPR), old(v4.Mem_T.op2__EXPR), old(v4.Mem_T.result__EXPR), old(v4.isUnsigned));



procedure v2.__havoc_heapglobal_init();



implementation {:inline 1} v2.Eval(e_.1: int)
{
  var havoc_stringTemp: int;
  var condVal: int;
  var a1: int;
  var a2: int;
  var e: int;
  var op: int;
  var res: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
    havoc_stringTemp := 0;
    goto start#2;

  start#2:
    assume v4.INT_LT(e_.1, v4.alloc);
    a1 := 0;
    a2 := 0;
    e := 0;
    op := 0;
    res := 0;
    e := e_.1;
    goto label_3#2;

  label_3#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
    goto label_4#2;

  label_4#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
    goto label_5#2;

  label_5#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
    goto label_6#2;

  label_6#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
    goto label_7#2;

  label_7#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 19} true;
    assert true;
    op := v4.Mem_T.oper__EXPR[v4.oper__EXPR(e)];
    assume v4.value_is(v2.__ctobpl_const_1, op);
    assume v4.value_is(v2.__ctobpl_const_2, e);
    assume v4.value_is(v2.__ctobpl_const_3, v4.Mem_T.oper__EXPR[v4.oper__EXPR(e)]);
    goto label_8#2;

  label_8#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 20} true;
    assert true;
    a1 := v4.Mem_T.op1__EXPR[v4.op1__EXPR(e)];
    assume v4.value_is(v2.__ctobpl_const_4, a1);
    assume v4.value_is(v2.__ctobpl_const_5, e);
    assume v4.value_is(v2.__ctobpl_const_6, v4.Mem_T.op1__EXPR[v4.op1__EXPR(e)]);
    goto label_9#2;

  label_9#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 21} true;
    assert true;
    a2 := v4.Mem_T.op2__EXPR[v4.op2__EXPR(e)];
    assume v4.value_is(v2.__ctobpl_const_7, a2);
    assume v4.value_is(v2.__ctobpl_const_8, e);
    assume v4.value_is(v2.__ctobpl_const_9, v4.Mem_T.op2__EXPR[v4.op2__EXPR(e)]);
    goto label_10#2;

  label_10#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 22} true;
    res := 0 - 1;
    assume v4.value_is(v2.__ctobpl_const_10, res);
    goto label_11#2;

  label_11#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 24} true;
    goto label_11_case_0#2, label_11_case_1#2, label_11_case_2#2;

  label_11_case_2#2:
    assume v4.INT_EQ(op, 2);
    assume v4.value_is(v2.__ctobpl_const_11, op);
    goto label_14#2;

  label_14#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 29} true;
    res := v4.MINUS_BOTH_PTR_OR_BOTH_INT(a1, a2, 1);
    assume v4.value_is(v2.__ctobpl_const_18, res);
    assume v4.value_is(v2.__ctobpl_const_19, a1);
    assume v4.value_is(v2.__ctobpl_const_20, a2);
    goto label_12#2;

  label_11_case_1#2:
    assume v4.INT_EQ(op, 1);
    assume v4.value_is(v2.__ctobpl_const_11, op);
    goto label_13#2;

  label_13#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 27} true;
    res := v4.PLUS(a1, 1, a2);
    assume v4.value_is(v2.__ctobpl_const_15, res);
    assume v4.value_is(v2.__ctobpl_const_16, a1);
    assume v4.value_is(v2.__ctobpl_const_17, a2);
    goto label_12#2;

  label_11_case_0#2:
    assume v4.INT_NEQ(op, 1);
    assume v4.INT_NEQ(op, 2);
    assume v4.value_is(v2.__ctobpl_const_11, op);
    goto label_12#2;

  label_12#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 35} true;
    assert true;
    v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR[v4.result__EXPR(e) := res];
    assume v4.value_is(v2.__ctobpl_const_12, e);
    assume v4.value_is(v2.__ctobpl_const_13, v4.Mem_T.result__EXPR[v4.result__EXPR(e)]);
    assume v4.value_is(v2.__ctobpl_const_14, res);
    goto label_1#2;

  label_1#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 36} true;
    return;
}



implementation v2.EvalEntry1(e_.1: int, outval_.1: int)
{
  var havoc_stringTemp: int;
  var condVal: int;
  var e: int;
  var outval: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
    havoc_stringTemp := 0;
    goto start#2;

  start#2:
    assume v4.INT_LT(e_.1, v4.alloc);
    assume v4.INT_LT(outval_.1, v4.alloc);
    e := 0;
    outval := 0;
    e := e_.1;
    outval := outval_.1;
    goto label_3#2;

  label_3#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 40} true;
    call v2.Eval(e);
    assume v4.value_is(v2.__ctobpl_const_21, e);
    assume v4.value_is(v2.__ctobpl_const_22, e);
    goto label_6#2;

  label_6#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 41} true;
    assert true;
    assert true;
    v4.Mem_T.INT4 := v4.Mem_T.INT4[outval := v4.Mem_T.result__EXPR[v4.result__EXPR(e)]];
    assume v4.value_is(v2.__ctobpl_const_23, outval);
    assume v4.value_is(v2.__ctobpl_const_24, v4.Mem_T.INT4[outval]);
    assume v4.value_is(v2.__ctobpl_const_25, e);
    assume v4.value_is(v2.__ctobpl_const_26, v4.Mem_T.result__EXPR[v4.result__EXPR(e)]);
    goto label_1#2;

  label_1#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 42} true;
    return;
}



implementation v2.EvalEntry2(e_.1: int)
{
  var havoc_stringTemp: int;
  var condVal: int;
  var e: int;
  var tempBoogie0: int;
  var tempBoogie1: int;
  var tempBoogie2: int;
  var tempBoogie3: int;
  var tempBoogie4: int;
  var tempBoogie5: int;
  var tempBoogie6: int;
  var tempBoogie7: int;
  var tempBoogie8: int;
  var tempBoogie9: int;
  var tempBoogie10: int;
  var tempBoogie11: int;
  var tempBoogie12: int;
  var tempBoogie13: int;
  var tempBoogie14: int;
  var tempBoogie15: int;
  var tempBoogie16: int;
  var tempBoogie17: int;
  var tempBoogie18: int;
  var tempBoogie19: int;
  var __havoc_dummy_return: int;

  anon0#2:
    havoc_stringTemp := 0;
    goto start#2;

  start#2:
    assume v4.INT_LT(e_.1, v4.alloc);
    e := 0;
    e := e_.1;
    goto label_3#2;

  label_3#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 46} true;
    call v2.Eval(e);
    assume v4.value_is(v2.__ctobpl_const_27, e);
    assume v4.value_is(v2.__ctobpl_const_28, e);
    goto label_1#2;

  label_1#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 47} true;
    return;
}



implementation v2.__havoc_heapglobal_init()
{

  anon0#2:
    return;
}



type name;

type byte;

var Output_of_v2.Eval_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v4.Eval_v4.Mem_T.result__EXPR: [int]int;

procedure EQ_v2.Eval__v4.Eval(e_.1: int) returns (AA_TEMP30: bool);
  modifies v4.Mem_T.result__EXPR, Output_of_v2.Eval_v4.Mem_T.result__EXPR, Output_of_v4.Eval_v4.Mem_T.result__EXPR;
  ensures AA_TEMP30;



implementation EQ_v2.Eval__v4.Eval(e_.1: int) returns (AA_TEMP30: bool)
{
  var AA_TEMP10: [int]int;
  var AA_TEMP00: [int]int;
  var inline$v2.Eval$0$havoc_stringTemp: int;
  var inline$v2.Eval$0$condVal: int;
  var inline$v2.Eval$0$a1: int;
  var inline$v2.Eval$0$a2: int;
  var inline$v2.Eval$0$e: int;
  var inline$v2.Eval$0$op: int;
  var inline$v2.Eval$0$res: int;
  var inline$v2.Eval$0$tempBoogie0: int;
  var inline$v2.Eval$0$tempBoogie1: int;
  var inline$v2.Eval$0$tempBoogie2: int;
  var inline$v2.Eval$0$tempBoogie3: int;
  var inline$v2.Eval$0$tempBoogie4: int;
  var inline$v2.Eval$0$tempBoogie5: int;
  var inline$v2.Eval$0$tempBoogie6: int;
  var inline$v2.Eval$0$tempBoogie7: int;
  var inline$v2.Eval$0$tempBoogie8: int;
  var inline$v2.Eval$0$tempBoogie9: int;
  var inline$v2.Eval$0$tempBoogie10: int;
  var inline$v2.Eval$0$tempBoogie11: int;
  var inline$v2.Eval$0$tempBoogie12: int;
  var inline$v2.Eval$0$tempBoogie13: int;
  var inline$v2.Eval$0$tempBoogie14: int;
  var inline$v2.Eval$0$tempBoogie15: int;
  var inline$v2.Eval$0$tempBoogie16: int;
  var inline$v2.Eval$0$tempBoogie17: int;
  var inline$v2.Eval$0$tempBoogie18: int;
  var inline$v2.Eval$0$tempBoogie19: int;
  var inline$v2.Eval$0$__havoc_dummy_return: int;
  var inline$v2.Eval$0$e_.1: int;
  var inline$v2.Eval$0$v4.Mem_T.result__EXPR: [int]int;
  var inline$v4.Eval$0$havoc_stringTemp: int;
  var inline$v4.Eval$0$condVal: int;
  var inline$v4.Eval$0$a1: int;
  var inline$v4.Eval$0$a2: int;
  var inline$v4.Eval$0$e: int;
  var inline$v4.Eval$0$op: int;
  var inline$v4.Eval$0$res: int;
  var inline$v4.Eval$0$result.UnsignedAdd$1: int;
  var inline$v4.Eval$0$result.UnsignedSub$2: int;
  var inline$v4.Eval$0$tempBoogie0: int;
  var inline$v4.Eval$0$tempBoogie1: int;
  var inline$v4.Eval$0$tempBoogie2: int;
  var inline$v4.Eval$0$tempBoogie3: int;
  var inline$v4.Eval$0$tempBoogie4: int;
  var inline$v4.Eval$0$tempBoogie5: int;
  var inline$v4.Eval$0$tempBoogie6: int;
  var inline$v4.Eval$0$tempBoogie7: int;
  var inline$v4.Eval$0$tempBoogie8: int;
  var inline$v4.Eval$0$tempBoogie9: int;
  var inline$v4.Eval$0$tempBoogie10: int;
  var inline$v4.Eval$0$tempBoogie11: int;
  var inline$v4.Eval$0$tempBoogie12: int;
  var inline$v4.Eval$0$tempBoogie13: int;
  var inline$v4.Eval$0$tempBoogie14: int;
  var inline$v4.Eval$0$tempBoogie15: int;
  var inline$v4.Eval$0$tempBoogie16: int;
  var inline$v4.Eval$0$tempBoogie17: int;
  var inline$v4.Eval$0$tempBoogie18: int;
  var inline$v4.Eval$0$tempBoogie19: int;
  var inline$v4.Eval$0$__havoc_dummy_return: int;
  var inline$v4.Eval$0$e_.1: int;
  var inline$v4.Eval$0$v4.Mem_T.result__EXPR: [int]int;

  AA_INSTR_EQ_BODY:
    AA_TEMP00 := v4.Mem_T.result__EXPR;
    goto inline$v2.Eval$0$Entry;

  inline$v2.Eval$0$Entry:
    inline$v2.Eval$0$e_.1 := e_.1;
    inline$v2.Eval$0$v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
    goto inline$v2.Eval$0$anon0#2;

  inline$v2.Eval$0$anon0#2:
    inline$v2.Eval$0$havoc_stringTemp := 0;
    goto inline$v2.Eval$0$start#2;

  inline$v2.Eval$0$start#2:
    assume v4.INT_LT(inline$v2.Eval$0$e_.1, v4.alloc);
    inline$v2.Eval$0$a1 := 0;
    inline$v2.Eval$0$a2 := 0;
    inline$v2.Eval$0$e := 0;
    inline$v2.Eval$0$op := 0;
    inline$v2.Eval$0$res := 0;
    inline$v2.Eval$0$e := inline$v2.Eval$0$e_.1;
    goto inline$v2.Eval$0$label_3#2;

  inline$v2.Eval$0$label_3#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
    goto inline$v2.Eval$0$label_4#2;

  inline$v2.Eval$0$label_4#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
    goto inline$v2.Eval$0$label_5#2;

  inline$v2.Eval$0$label_5#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
    goto inline$v2.Eval$0$label_6#2;

  inline$v2.Eval$0$label_6#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 17} true;
    goto inline$v2.Eval$0$label_7#2;

  inline$v2.Eval$0$label_7#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 19} true;
    assert true;
    inline$v2.Eval$0$op := v4.Mem_T.oper__EXPR[v4.oper__EXPR(inline$v2.Eval$0$e)];
    assume v4.value_is(v2.__ctobpl_const_1, inline$v2.Eval$0$op);
    assume v4.value_is(v2.__ctobpl_const_2, inline$v2.Eval$0$e);
    assume v4.value_is(v2.__ctobpl_const_3, v4.Mem_T.oper__EXPR[v4.oper__EXPR(inline$v2.Eval$0$e)]);
    goto inline$v2.Eval$0$label_8#2;

  inline$v2.Eval$0$label_8#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 20} true;
    assert true;
    inline$v2.Eval$0$a1 := v4.Mem_T.op1__EXPR[v4.op1__EXPR(inline$v2.Eval$0$e)];
    assume v4.value_is(v2.__ctobpl_const_4, inline$v2.Eval$0$a1);
    assume v4.value_is(v2.__ctobpl_const_5, inline$v2.Eval$0$e);
    assume v4.value_is(v2.__ctobpl_const_6, v4.Mem_T.op1__EXPR[v4.op1__EXPR(inline$v2.Eval$0$e)]);
    goto inline$v2.Eval$0$label_9#2;

  inline$v2.Eval$0$label_9#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 21} true;
    assert true;
    inline$v2.Eval$0$a2 := v4.Mem_T.op2__EXPR[v4.op2__EXPR(inline$v2.Eval$0$e)];
    assume v4.value_is(v2.__ctobpl_const_7, inline$v2.Eval$0$a2);
    assume v4.value_is(v2.__ctobpl_const_8, inline$v2.Eval$0$e);
    assume v4.value_is(v2.__ctobpl_const_9, v4.Mem_T.op2__EXPR[v4.op2__EXPR(inline$v2.Eval$0$e)]);
    goto inline$v2.Eval$0$label_10#2;

  inline$v2.Eval$0$label_10#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 22} true;
    inline$v2.Eval$0$res := 0 - 1;
    assume v4.value_is(v2.__ctobpl_const_10, inline$v2.Eval$0$res);
    goto inline$v2.Eval$0$label_11#2;

  inline$v2.Eval$0$label_11#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 24} true;
    goto inline$v2.Eval$0$label_11_case_0#2, inline$v2.Eval$0$label_11_case_1#2, inline$v2.Eval$0$label_11_case_2#2;

  inline$v2.Eval$0$label_11_case_2#2:
    assume v4.INT_EQ(inline$v2.Eval$0$op, 2);
    assume v4.value_is(v2.__ctobpl_const_11, inline$v2.Eval$0$op);
    goto inline$v2.Eval$0$label_14#2;

  inline$v2.Eval$0$label_14#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 29} true;
    inline$v2.Eval$0$res := v4.MINUS_BOTH_PTR_OR_BOTH_INT(inline$v2.Eval$0$a1, inline$v2.Eval$0$a2, 1);
    assume v4.value_is(v2.__ctobpl_const_18, inline$v2.Eval$0$res);
    assume v4.value_is(v2.__ctobpl_const_19, inline$v2.Eval$0$a1);
    assume v4.value_is(v2.__ctobpl_const_20, inline$v2.Eval$0$a2);
    goto inline$v2.Eval$0$label_12#2;

  inline$v2.Eval$0$label_11_case_1#2:
    assume v4.INT_EQ(inline$v2.Eval$0$op, 1);
    assume v4.value_is(v2.__ctobpl_const_11, inline$v2.Eval$0$op);
    goto inline$v2.Eval$0$label_13#2;

  inline$v2.Eval$0$label_13#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 27} true;
    inline$v2.Eval$0$res := v4.PLUS(inline$v2.Eval$0$a1, 1, inline$v2.Eval$0$a2);
    assume v4.value_is(v2.__ctobpl_const_15, inline$v2.Eval$0$res);
    assume v4.value_is(v2.__ctobpl_const_16, inline$v2.Eval$0$a1);
    assume v4.value_is(v2.__ctobpl_const_17, inline$v2.Eval$0$a2);
    goto inline$v2.Eval$0$label_12#2;

  inline$v2.Eval$0$label_11_case_0#2:
    assume v4.INT_NEQ(inline$v2.Eval$0$op, 1);
    assume v4.INT_NEQ(inline$v2.Eval$0$op, 2);
    assume v4.value_is(v2.__ctobpl_const_11, inline$v2.Eval$0$op);
    goto inline$v2.Eval$0$label_12#2;

  inline$v2.Eval$0$label_12#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 35} true;
    assert true;
    v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR[v4.result__EXPR(inline$v2.Eval$0$e) := inline$v2.Eval$0$res];
    assume v4.value_is(v2.__ctobpl_const_12, inline$v2.Eval$0$e);
    assume v4.value_is(v2.__ctobpl_const_13, v4.Mem_T.result__EXPR[v4.result__EXPR(inline$v2.Eval$0$e)]);
    assume v4.value_is(v2.__ctobpl_const_14, inline$v2.Eval$0$res);
    goto inline$v2.Eval$0$label_1#2;

  inline$v2.Eval$0$label_1#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v2\foo.c"} {:sourceline 36} true;
    goto inline$v2.Eval$0$Return;

  inline$v2.Eval$0$Return:
    goto AA_INSTR_EQ_BODY$1;

  AA_INSTR_EQ_BODY$1:
    AA_TEMP10 := v4.Mem_T.result__EXPR;
    v4.Mem_T.result__EXPR := AA_TEMP00;
    goto inline$v4.Eval$0$Entry;

  inline$v4.Eval$0$Entry:
    inline$v4.Eval$0$e_.1 := e_.1;
    inline$v4.Eval$0$v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
    goto inline$v4.Eval$0$anon0#2;

  inline$v4.Eval$0$anon0#2:
    inline$v4.Eval$0$havoc_stringTemp := 0;
    goto inline$v4.Eval$0$start#2;

  inline$v4.Eval$0$start#2:
    assume v4.INT_LT(inline$v4.Eval$0$e_.1, v4.alloc);
    inline$v4.Eval$0$a1 := 0;
    inline$v4.Eval$0$a2 := 0;
    inline$v4.Eval$0$e := 0;
    inline$v4.Eval$0$op := 0;
    inline$v4.Eval$0$res := 0;
    inline$v4.Eval$0$result.UnsignedAdd$1 := 0;
    inline$v4.Eval$0$result.UnsignedSub$2 := 0;
    inline$v4.Eval$0$e := inline$v4.Eval$0$e_.1;
    goto inline$v4.Eval$0$label_3#2;

  inline$v4.Eval$0$label_3#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
    goto inline$v4.Eval$0$label_4#2;

  inline$v4.Eval$0$label_4#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
    goto inline$v4.Eval$0$label_5#2;

  inline$v4.Eval$0$label_5#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
    goto inline$v4.Eval$0$label_6#2;

  inline$v4.Eval$0$label_6#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 19} true;
    goto inline$v4.Eval$0$label_7#2;

  inline$v4.Eval$0$label_7#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 21} true;
    assert true;
    inline$v4.Eval$0$op := v4.Mem_T.oper__EXPR[v4.oper__EXPR(inline$v4.Eval$0$e)];
    assume v4.value_is(v4.__ctobpl_const_1, inline$v4.Eval$0$op);
    assume v4.value_is(v4.__ctobpl_const_2, inline$v4.Eval$0$e);
    assume v4.value_is(v4.__ctobpl_const_3, v4.Mem_T.oper__EXPR[v4.oper__EXPR(inline$v4.Eval$0$e)]);
    goto inline$v4.Eval$0$label_8#2;

  inline$v4.Eval$0$label_8#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 22} true;
    assert true;
    inline$v4.Eval$0$a1 := v4.Mem_T.op1__EXPR[v4.op1__EXPR(inline$v4.Eval$0$e)];
    assume v4.value_is(v4.__ctobpl_const_4, inline$v4.Eval$0$a1);
    assume v4.value_is(v4.__ctobpl_const_5, inline$v4.Eval$0$e);
    assume v4.value_is(v4.__ctobpl_const_6, v4.Mem_T.op1__EXPR[v4.op1__EXPR(inline$v4.Eval$0$e)]);
    goto inline$v4.Eval$0$label_9#2;

  inline$v4.Eval$0$label_9#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 23} true;
    assert true;
    inline$v4.Eval$0$a2 := v4.Mem_T.op2__EXPR[v4.op2__EXPR(inline$v4.Eval$0$e)];
    assume v4.value_is(v4.__ctobpl_const_7, inline$v4.Eval$0$a2);
    assume v4.value_is(v4.__ctobpl_const_8, inline$v4.Eval$0$e);
    assume v4.value_is(v4.__ctobpl_const_9, v4.Mem_T.op2__EXPR[v4.op2__EXPR(inline$v4.Eval$0$e)]);
    goto inline$v4.Eval$0$label_10#2;

  inline$v4.Eval$0$label_10#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 24} true;
    inline$v4.Eval$0$res := 0 - 1;
    assume v4.value_is(v4.__ctobpl_const_10, inline$v4.Eval$0$res);
    goto inline$v4.Eval$0$label_11#2;

  inline$v4.Eval$0$label_11#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 26} true;
    goto inline$v4.Eval$0$label_11_case_0#2, inline$v4.Eval$0$label_11_case_1#2, inline$v4.Eval$0$label_11_case_2#2;

  inline$v4.Eval$0$label_11_case_2#2:
    assume v4.INT_EQ(inline$v4.Eval$0$op, 2);
    assume v4.value_is(v4.__ctobpl_const_11, inline$v4.Eval$0$op);
    goto inline$v4.Eval$0$label_14#2;

  inline$v4.Eval$0$label_14#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 35} true;
    goto inline$v4.Eval$0$label_14_true#2, inline$v4.Eval$0$label_14_false#2;

  inline$v4.Eval$0$label_14_false#2:
    assume v4.isUnsigned == 0;
    assume v4.value_is(v4.__ctobpl_const_16, v4.isUnsigned);
    goto inline$v4.Eval$0$label_15#2;

  inline$v4.Eval$0$label_15#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 38} true;
    inline$v4.Eval$0$res := v4.MINUS_BOTH_PTR_OR_BOTH_INT(inline$v4.Eval$0$a1, inline$v4.Eval$0$a2, 1);
    assume v4.value_is(v4.__ctobpl_const_17, inline$v4.Eval$0$res);
    assume v4.value_is(v4.__ctobpl_const_18, inline$v4.Eval$0$a1);
    assume v4.value_is(v4.__ctobpl_const_19, inline$v4.Eval$0$a2);
    goto inline$v4.Eval$0$label_12#2;

  inline$v4.Eval$0$label_14_true#2:
    assume v4.isUnsigned != 0;
    assume v4.value_is(v4.__ctobpl_const_16, v4.isUnsigned);
    goto inline$v4.Eval$0$label_16#2;

  inline$v4.Eval$0$label_16#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 36} true;
    call inline$v4.Eval$0$result.UnsignedSub$2 := v4.UnsignedSub(inline$v4.Eval$0$a1, inline$v4.Eval$0$a2);
    assume v4.value_is(v4.__ctobpl_const_20, inline$v4.Eval$0$a1);
    assume v4.value_is(v4.__ctobpl_const_21, inline$v4.Eval$0$a2);
    assume v4.value_is(v4.__ctobpl_const_22, inline$v4.Eval$0$a1);
    assume v4.value_is(v4.__ctobpl_const_23, inline$v4.Eval$0$a2);
    goto inline$v4.Eval$0$label_19#2;

  inline$v4.Eval$0$label_19#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 36} true;
    inline$v4.Eval$0$res := inline$v4.Eval$0$result.UnsignedSub$2;
    assume v4.value_is(v4.__ctobpl_const_24, inline$v4.Eval$0$res);
    assume v4.value_is(v4.__ctobpl_const_25, inline$v4.Eval$0$result.UnsignedSub$2);
    goto inline$v4.Eval$0$label_12#2;

  inline$v4.Eval$0$label_11_case_1#2:
    assume v4.INT_EQ(inline$v4.Eval$0$op, 1);
    assume v4.value_is(v4.__ctobpl_const_11, inline$v4.Eval$0$op);
    goto inline$v4.Eval$0$label_13#2;

  inline$v4.Eval$0$label_13#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 29} true;
    goto inline$v4.Eval$0$label_13_true#2, inline$v4.Eval$0$label_13_false#2;

  inline$v4.Eval$0$label_13_false#2:
    assume v4.isUnsigned == 0;
    assume v4.value_is(v4.__ctobpl_const_15, v4.isUnsigned);
    goto inline$v4.Eval$0$label_20#2;

  inline$v4.Eval$0$label_20#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 32} true;
    inline$v4.Eval$0$res := v4.PLUS(inline$v4.Eval$0$a1, 1, inline$v4.Eval$0$a2);
    assume v4.value_is(v4.__ctobpl_const_26, inline$v4.Eval$0$res);
    assume v4.value_is(v4.__ctobpl_const_27, inline$v4.Eval$0$a1);
    assume v4.value_is(v4.__ctobpl_const_28, inline$v4.Eval$0$a2);
    goto inline$v4.Eval$0$label_12#2;

  inline$v4.Eval$0$label_13_true#2:
    assume v4.isUnsigned != 0;
    assume v4.value_is(v4.__ctobpl_const_15, v4.isUnsigned);
    goto inline$v4.Eval$0$label_21#2;

  inline$v4.Eval$0$label_21#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 30} true;
    call inline$v4.Eval$0$result.UnsignedAdd$1 := v4.UnsignedAdd(inline$v4.Eval$0$a1, inline$v4.Eval$0$a2);
    assume v4.value_is(v4.__ctobpl_const_29, inline$v4.Eval$0$a1);
    assume v4.value_is(v4.__ctobpl_const_30, inline$v4.Eval$0$a2);
    assume v4.value_is(v4.__ctobpl_const_31, inline$v4.Eval$0$a1);
    assume v4.value_is(v4.__ctobpl_const_32, inline$v4.Eval$0$a2);
    goto inline$v4.Eval$0$label_24#2;

  inline$v4.Eval$0$label_24#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 30} true;
    inline$v4.Eval$0$res := inline$v4.Eval$0$result.UnsignedAdd$1;
    assume v4.value_is(v4.__ctobpl_const_33, inline$v4.Eval$0$res);
    assume v4.value_is(v4.__ctobpl_const_34, inline$v4.Eval$0$result.UnsignedAdd$1);
    goto inline$v4.Eval$0$label_12#2;

  inline$v4.Eval$0$label_11_case_0#2:
    assume v4.INT_NEQ(inline$v4.Eval$0$op, 1);
    assume v4.INT_NEQ(inline$v4.Eval$0$op, 2);
    assume v4.value_is(v4.__ctobpl_const_11, inline$v4.Eval$0$op);
    goto inline$v4.Eval$0$label_12#2;

  inline$v4.Eval$0$label_12#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 41} true;
    assert true;
    v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR[v4.result__EXPR(inline$v4.Eval$0$e) := inline$v4.Eval$0$res];
    assume v4.value_is(v4.__ctobpl_const_12, inline$v4.Eval$0$e);
    assume v4.value_is(v4.__ctobpl_const_13, v4.Mem_T.result__EXPR[v4.result__EXPR(inline$v4.Eval$0$e)]);
    assume v4.value_is(v4.__ctobpl_const_14, inline$v4.Eval$0$res);
    goto inline$v4.Eval$0$label_1#2;

  inline$v4.Eval$0$label_1#2:
    assert {:sourcefile "c:\tvm\projects\symb_diff\symdiff\test\c_examples\ex3\v4\foo.c"} {:sourceline 42} true;
    goto inline$v4.Eval$0$Return;

  inline$v4.Eval$0$Return:
    goto AA_INSTR_EQ_BODY$2;

  AA_INSTR_EQ_BODY$2:
    Output_of_v2.Eval_v4.Mem_T.result__EXPR := AA_TEMP10;
    Output_of_v4.Eval_v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
    AA_TEMP30 := AA_TEMP10 == v4.Mem_T.result__EXPR || (forall _x0: int :: AA_TEMP10[_x0] == v4.Mem_T.result__EXPR[_x0]);
    return;
}



var Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v2.EvalEntry1_v4.Mem_T.INT4: [int]int;

var Output_of_v4.EvalEntry1_v4.Mem_T.INT4: [int]int;

var Output_of_v2.EvalEntry1_v4.isUnsigned: int;

var Output_of_v4.EvalEntry1_v4.isUnsigned: int;

procedure EQ_v2.EvalEntry1__v4.EvalEntry1(e_.1: int, outval_.1: int) returns (AA_TEMP80: bool, AA_TEMP81: bool, AA_TEMP82: bool);
  modifies v4.Mem_T.result__EXPR, v4.Mem_T.INT4, v4.isUnsigned, Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR, Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR, Output_of_v2.EvalEntry1_v4.Mem_T.INT4, Output_of_v4.EvalEntry1_v4.Mem_T.INT4, Output_of_v2.EvalEntry1_v4.isUnsigned, Output_of_v4.EvalEntry1_v4.isUnsigned;
  ensures AA_TEMP82 && AA_TEMP81 && AA_TEMP80;



implementation EQ_v2.EvalEntry1__v4.EvalEntry1(e_.1: int, outval_.1: int) returns (AA_TEMP80: bool, AA_TEMP81: bool, AA_TEMP82: bool)
{
  var AA_TEMP60: [int]int;
  var AA_TEMP61: [int]int;
  var AA_TEMP62: int;
  var AA_TEMP50: [int]int;
  var AA_TEMP51: [int]int;
  var AA_TEMP52: int;

  AA_INSTR_EQ_BODY:
    AA_TEMP50 := v4.Mem_T.result__EXPR;
    AA_TEMP51 := v4.Mem_T.INT4;
    AA_TEMP52 := v4.isUnsigned;
    call v2.EvalEntry1(e_.1, outval_.1);
    AA_TEMP60 := v4.Mem_T.result__EXPR;
    AA_TEMP61 := v4.Mem_T.INT4;
    AA_TEMP62 := v4.isUnsigned;
    v4.Mem_T.result__EXPR := AA_TEMP50;
    v4.Mem_T.INT4 := AA_TEMP51;
    v4.isUnsigned := AA_TEMP52;
    call v4.EvalEntry1(e_.1, outval_.1);
    Output_of_v2.EvalEntry1_v4.Mem_T.result__EXPR := AA_TEMP60;
    Output_of_v4.EvalEntry1_v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
    Output_of_v2.EvalEntry1_v4.Mem_T.INT4 := AA_TEMP61;
    Output_of_v4.EvalEntry1_v4.Mem_T.INT4 := v4.Mem_T.INT4;
    Output_of_v2.EvalEntry1_v4.isUnsigned := AA_TEMP62;
    Output_of_v4.EvalEntry1_v4.isUnsigned := v4.isUnsigned;
    AA_TEMP80, AA_TEMP81, AA_TEMP82 := AA_TEMP60 == v4.Mem_T.result__EXPR || (forall _x0: int :: AA_TEMP60[_x0] == v4.Mem_T.result__EXPR[_x0]), AA_TEMP61 == v4.Mem_T.INT4 || (forall _x0: int :: AA_TEMP61[_x0] == v4.Mem_T.INT4[_x0]), AA_TEMP62 == v4.isUnsigned;
    return;
}



var Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR: [int]int;

var Output_of_v2.EvalEntry2_v4.isUnsigned: int;

var Output_of_v4.EvalEntry2_v4.isUnsigned: int;

procedure EQ_v2.EvalEntry2__v4.EvalEntry2(e_.1: int) returns (AA_TEMP130: bool, AA_TEMP131: bool);
  modifies v4.Mem_T.result__EXPR, v4.isUnsigned, Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR, Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR, Output_of_v2.EvalEntry2_v4.isUnsigned, Output_of_v4.EvalEntry2_v4.isUnsigned;
  ensures AA_TEMP131 && AA_TEMP130;



implementation EQ_v2.EvalEntry2__v4.EvalEntry2(e_.1: int) returns (AA_TEMP130: bool, AA_TEMP131: bool)
{
  var AA_TEMP110: [int]int;
  var AA_TEMP111: int;
  var AA_TEMP100: [int]int;
  var AA_TEMP101: int;

  AA_INSTR_EQ_BODY:
    AA_TEMP100 := v4.Mem_T.result__EXPR;
    AA_TEMP101 := v4.isUnsigned;
    call v2.EvalEntry2(e_.1);
    AA_TEMP110 := v4.Mem_T.result__EXPR;
    AA_TEMP111 := v4.isUnsigned;
    v4.Mem_T.result__EXPR := AA_TEMP100;
    v4.isUnsigned := AA_TEMP101;
    call v4.EvalEntry2(e_.1);
    Output_of_v2.EvalEntry2_v4.Mem_T.result__EXPR := AA_TEMP110;
    Output_of_v4.EvalEntry2_v4.Mem_T.result__EXPR := v4.Mem_T.result__EXPR;
    Output_of_v2.EvalEntry2_v4.isUnsigned := AA_TEMP111;
    Output_of_v4.EvalEntry2_v4.isUnsigned := v4.isUnsigned;
    AA_TEMP130, AA_TEMP131 := AA_TEMP110 == v4.Mem_T.result__EXPR || (forall _x0: int :: AA_TEMP110[_x0] == v4.Mem_T.result__EXPR[_x0]), AA_TEMP111 == v4.isUnsigned;
    return;
}



function _uf_v4.__HAVOC_malloc_new(arg_0: int) : int;

function _uf_v2.__HAVOC_malloc_new(arg_0: int) : int;

function _uf_v4.__HAVOC_det_malloc_new(arg_0: int) : int;

function _uf_v2.__HAVOC_det_malloc_new(arg_0: int) : int;

function _uf_v4.__HAVOC_memset_split_1_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v2.__HAVOC_memset_split_1_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v4.__HAVOC_memset_split_2_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v2.__HAVOC_memset_split_2_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v4.__HAVOC_memset_split_4_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v2.__HAVOC_memset_split_4_ret(arg_0: [int]int, arg_1: int, arg_2: int, arg_3: int) : [int]int;

function _uf_v4.nondet_choice_x() : int;

function _uf_v2.nondet_choice_x() : int;

function _uf_v4.det_choice_x() : int;

function _uf_v2.det_choice_x() : int;

function _uf_v4._strdup_new(arg_0: int) : int;

function _uf_v2._strdup_new(arg_0: int) : int;

function _uf_v4._xstrcasecmp_ret(arg_0: int, arg_1: int) : int;

function _uf_v2._xstrcasecmp_ret(arg_0: int, arg_1: int) : int;

function _uf_v4._xstrcmp_ret(arg_0: int, arg_1: int) : int;

function _uf_v2._xstrcmp_ret(arg_0: int, arg_1: int) : int;

function _uf_v4.Eval_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int) : [int]int;

function _uf_v2.Eval_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int) : [int]int;

function _uf_v4.EvalEntry1_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int) : [int]int;

function _uf_v4.EvalEntry1_v4.Mem_T.INT4(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int) : [int]int;

function _uf_v4.EvalEntry1_v4.isUnsigned(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int) : int;

function _uf_v2.EvalEntry1_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int) : [int]int;

function _uf_v2.EvalEntry1_v4.Mem_T.INT4(arg_0: int, arg_1: int, arg_2: int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: [int]int, arg_7: [int]int, arg_8: int) : [int]int;

function _uf_v4.EvalEntry2_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int) : [int]int;

function _uf_v4.EvalEntry2_v4.isUnsigned(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int) : int;

function _uf_v2.EvalEntry2_v4.Mem_T.result__EXPR(arg_0: int, arg_1: int, arg_2: [int]int, arg_3: [int]int, arg_4: [int]int, arg_5: [int]int, arg_6: int) : [int]int;
