---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P0",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "5",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P1",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "5",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "y",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "5",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "x",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P2",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "y",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "x",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P3",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "5",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "x",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "y",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "5",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P4",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "x",
                                        "y",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "x",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "y",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "y",
                                        "x",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "x",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "y",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "7",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R0",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "wProc",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: Some(
                                Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "wProc",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "xProc",
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xProc",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: Some(
                                Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "xProc",
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "yProc",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: Some(
                                Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "xProc",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "yProc",
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R0",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "w",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    StructuredCmd(
                        While(
                            WhileCmd {
                                guard: Asterisk,
                                invariants: [],
                                body: [
                                    LabelOrCmd(
                                        Claim(
                                            ClaimCmd {
                                                kind: Assert,
                                                attrs: [],
                                                proposition: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "w",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Claim(
                                            ClaimCmd {
                                                kind: Assert,
                                                attrs: [],
                                                proposition: Rel(
                                                    RelExpr {
                                                        lhs: Nat(
                                                            "0",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Claim(
                                            ClaimCmd {
                                                kind: Assert,
                                                attrs: [],
                                                proposition: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ),
                    ),
                    StructuredCmd(
                        While(
                            WhileCmd {
                                guard: Asterisk,
                                invariants: [],
                                body: [
                                    LabelOrCmd(
                                        Claim(
                                            ClaimCmd {
                                                kind: Assert,
                                                attrs: [],
                                                proposition: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "w",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Claim(
                                            ClaimCmd {
                                                kind: Assert,
                                                attrs: [],
                                                proposition: Rel(
                                                    RelExpr {
                                                        lhs: Nat(
                                                            "0",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Claim(
                                            ClaimCmd {
                                                kind: Assert,
                                                attrs: [],
                                                proposition: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "w",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "w",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Havoc(
                                            HavocCmd {
                                                vars: [
                                                    "x",
                                                ],
                                            },
                                        ),
                                    ),
                                    LabelOrCmd(
                                        Assign(
                                            AssignCmd {
                                                lhs: [
                                                    AssignLhs {
                                                        ident: "y",
                                                        subscripts: [],
                                                    },
                                                ],
                                                rhs: [
                                                    Var(
                                                        "w",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "w",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R1",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "a",
                                            "b",
                                            "c",
                                        ],
                                        target: "R0",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "a",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "b",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "c",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R2",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "w",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "5",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "10",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Asterisk,
                                    invariants: [],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "w",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "w",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "w",
                                                            ),
                                                            op: Eq,
                                                            rhs: Nat(
                                                                "6",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "y",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "y",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "2",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "7",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "y",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Eq,
                                                    rhs: Nat(
                                                        "5",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Term(
                                                        Term {
                                                            lhs: Var(
                                                                "y",
                                                            ),
                                                            op: Sub,
                                                            rhs: Var(
                                                                "w",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "10",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R3",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "w",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "10",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Asterisk,
                                    invariants: [],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "w",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "w",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "w",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "10",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "w",
                                            ),
                                            op: Le,
                                            rhs: Nat(
                                                "10",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R4",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "w",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "w",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "12",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Asterisk,
                                    invariants: [],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "x",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "y",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "w",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "12",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "8",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R5",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "K",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "w",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "K",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Asterisk,
                                    invariants: [],
                                    body: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "w",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "w",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "y",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "w",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "K",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "K",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "K",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure P0() {
  var x: int where 0 <= x;
  var y: int where x <= y;

  assert 0 <= x;
  assert x <= y;
  assert y < 5;
}

procedure P1() {
  var x: int where 0 <= x;
  var y: int where x <= y;

  x := 5;
  havoc y;
  assert 5 <= y;
  havoc x;
  assert 0 <= x;
  assert x <= y;
}

procedure P2() {
  var x: int where 0 <= x;
  var y: int where x <= y;

  havoc y;
  havoc x;
  assert x <= y;
}

procedure P3() {
  var x: int where 0 <= x;
  var y: int where x <= y;

  x := 5;
  havoc x;
  havoc y;
  assert x <= y;
  assert 5 <= y;
}

procedure P4() {
  var x: int where 0 <= x;
  var y: int where x <= y;

  havoc x, y;
  assert 0 <= x && x <= y;
  havoc y, x;
  assert 0 <= x && x <= y;
  assert x == 7;
}

procedure R0() returns (wProc: int where wProc == xProc, xProc: int where 0 <= xProc, yProc: int where xProc <= yProc);

implementation R0() returns (w: int, x: int, y: int) {
  while (*) {
    assert w == x;
    assert 0 <= x;
    assert x <= y;
  }
  while (*) {
    assert w == x;
    assert 0 <= x;
    assert x <= y;
    w := w + 1;
    havoc x;
    y := w;
  }
  assert w == x;
  assert 0 <= x;
  assert x <= y;
}

procedure R1() {
  var a: int;
  var b: int;
  var c: int;

  call a, b, c := R0();
  assert a == b;
  assert 0 <= b;
  assert b <= c;
}

procedure R2() {
  var w: int where w == x;
  var x: int where 0 <= x;
  var y: int where x <= y;

  x := 5;
  y := 10;
  while (*) {
    w := w + 1;
    assert w == 6;
    y := y + 2;
    assert 7 <= y;
  }
  assert x == 5 && 0 <= y - w;
  assert y == 10;
}

procedure R3() {
  var w: int where w == x;
  var x: int where 0 <= x;
  var y: int where x <= y;

  y := 10;
  while (*) {
    w := w;
    x := x;
  }
  assert w == x;
  assert 0 <= x;
  assert y == 10;
  assert w <= 10;
}

procedure R4() {
  var w: int where w == x;
  var x: int where 0 <= x;
  var y: int where x <= y;

  w := 12;
  while (*) {
    x := x;
    y := y;
  }
  assert 0 <= x;
  assert x <= y;
  assert w == 12;
  assert 8 <= y;
}

procedure R5(K: int) {
  var w: int where w == x;
  var x: int where 0 <= x;
  var y: int where x <= y;

  x := K;
  while (*) {
    w := w;
    y := y;
  }
  assert w == K;
  assert K <= y;
  assert x == K;
  assert 0 <= x;
}

[Input - ../../vendor/boogie/Test/test2/Where.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
procedure P0()
{
  var x: int where 0 <= x;
  var y: int where x <= y;

  assert 0 <= x;
  assert x <= y;
  assert y < 5;  // error
}

procedure P1()
{
  var x: int where 0 <= x;
  var y: int where x <= y;

  x := 5;
  havoc y;
  assert 5 <= y;

  havoc x;
  assert 0 <= x;
  assert x <= y;  // error
}

procedure P2()
{
  var x: int where 0 <= x;
  var y: int where x <= y;

  havoc y;  // y first
  havoc x;
  assert x <= y;  // error
}

procedure P3()
{
  var x: int where 0 <= x;
  var y: int where x <= y;

  x := 5;
  havoc x;  // this time, x first
  havoc y;
  assert x <= y;  // yeah!
  assert 5 <= y;  // error
}

procedure P4()
{
  var x: int where 0 <= x;
  var y: int where x <= y;

  havoc x, y;  // both at the same time
  assert 0 <= x && x <= y;
  havoc y, x;  // or in the other order
  assert 0 <= x && x <= y;

  assert x == 7;  // error
}

procedure R0() returns (wProc: int where wProc == xProc,
                        xProc: int where 0 <= xProc,
                        yProc: int where xProc <= yProc);
implementation R0() returns (w: int, x: int, y: int)
{
  while (*) {
    assert w == x;
    assert 0 <= x;
    assert x <= y;
  }
  while (*) {
    assert w == x;
    assert 0 <= x;
    assert x <= y;
    // the following makes w, x, y loop targets
    w := w + 1;
    havoc x;
    y := w;
  }
  assert w == x;
  assert 0 <= x;
  assert x <= y;
}

procedure R1()
{
  var a: int;
  var b: int;
  var c: int;

  call a, b, c := R0();
  assert a == b;
  assert 0 <= b;
  assert b <= c;
}

procedure R2()
{
  var w: int where w == x;
  var x: int where 0 <= x;
  var y: int where x <= y;

  x := 5;
  y := 10;
  while (*) {
    w := w + 1;
    assert w == 6;
    y := y + 2;
    assert 7 <= y;
  }
  assert x == 5 && 0 <= y - w;
  assert y == 10;  // error
}

procedure R3()
{
  var w: int where w == x;
  var x: int where 0 <= x;
  var y: int where x <= y;

  // change w and x
  y := 10;
  while (*) {
    w := w;  x := x;
  }
  assert w == x;
  assert 0 <= x;
  assert y == 10;
  assert w <= 10;  // error
}

procedure R4()
{
  var w: int where w == x;
  var x: int where 0 <= x;
  var y: int where x <= y;

  // change x and y
  w := 12;
  while (*) {
    x := x;  y := y;
  }
  assert 0 <= x;
  assert x <= y;
  assert w == 12;
  assert 8 <= y;  // error
}

procedure R5(K: int)
{
  var w: int where w == x;
  var x: int where 0 <= x;
  var y: int where x <= y;

  // change w and y
  x := K;
  while (*) {
    w := w;  y := y;
  }
  assert w == K;
  assert K <= y;
  assert x == K;
  assert 0 <= x;  // error
}
