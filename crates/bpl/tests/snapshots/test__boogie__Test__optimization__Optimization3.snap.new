---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test0",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "42",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "maximize",
                                                params: [
                                                    Expr(
                                                        Var(
                                                            "x",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: Exists,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "y",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "y",
                                                        ),
                                                        op: Lt,
                                                        rhs: Var(
                                                            "x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test1",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "42",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "maximize",
                                                params: [
                                                    Expr(
                                                        Var(
                                                            "x",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "y",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "y",
                                                        ),
                                                        op: Lt,
                                                        rhs: Var(
                                                            "x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure test0() {
  var x: int;

  assume x < 42;
  assume {:maximize x} true;
  assert (exists y: int :: y < x);
}

procedure test1() {
  var x: int;

  assume x < 42;
  assume {:maximize x} true;
  assert (forall y: int :: y < x);
}

[Input - ../../vendor/boogie/Test/optimization/Optimization3.bpl]
// RUN: %boogie /printModel:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

procedure test0()
{
    var x: int;

    assume x < 42;
    assume {:maximize x} true;
    assert (exists y: int :: y < x);
}

procedure test1()
{
    var x: int;

    assume x < 42;
    assume {:maximize x} true;
    assert (forall y: int :: y < x);
}
