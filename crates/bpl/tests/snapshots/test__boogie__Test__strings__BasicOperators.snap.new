---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.++",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "concat",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "string",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.len",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "len",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.substr",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "substr",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "string",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.indexof",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "indexOf",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.indexof",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "indexOfFromOffset",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.at",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "at",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "string",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.contains",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "contains",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.prefixof",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "prefixOf",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.suffixof",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "suffixOf",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.replace",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "replace",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "string",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "str.to.int",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "stringToInt",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "string",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "int.to.str",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "intToString",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "string",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "main",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s1",
                                            "s2",
                                            "s3",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "string",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "len",
                                                    args: [
                                                        Var(
                                                            "s1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "len",
                                                    args: [
                                                        Var(
                                                            "s3",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "concat",
                                                    args: [
                                                        Var(
                                                            "s1",
                                                        ),
                                                        Var(
                                                            "s2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "s3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Term(
                                                Term {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "len",
                                                            args: [
                                                                Var(
                                                                    "s1",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Add,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "len",
                                                            args: [
                                                                Var(
                                                                    "s2",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "len",
                                                    args: [
                                                        Var(
                                                            "s3",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "substr",
                                                    args: [
                                                        Var(
                                                            "s3",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "len",
                                                                args: [
                                                                    Var(
                                                                        "s1",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "len",
                                                                args: [
                                                                    Var(
                                                                        "s2",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "s2",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "indexOf",
                                                    args: [
                                                        Var(
                                                            "s3",
                                                        ),
                                                        Var(
                                                            "s1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "indexOfFromOffset",
                                                    args: [
                                                        Var(
                                                            "s3",
                                                        ),
                                                        Var(
                                                            "s1",
                                                        ),
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "at",
                                                    args: [
                                                        Var(
                                                            "s3",
                                                        ),
                                                        Nat(
                                                            "2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "at",
                                                    args: [
                                                        Var(
                                                            "s1",
                                                        ),
                                                        Nat(
                                                            "2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "contains",
                                            args: [
                                                Var(
                                                    "s3",
                                                ),
                                                Var(
                                                    "s1",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "prefixOf",
                                            args: [
                                                Var(
                                                    "s1",
                                                ),
                                                Var(
                                                    "s3",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "suffixOf",
                                            args: [
                                                Var(
                                                    "s2",
                                                ),
                                                Var(
                                                    "s3",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "replace",
                                                    args: [
                                                        Var(
                                                            "s3",
                                                        ),
                                                        Var(
                                                            "s1",
                                                        ),
                                                        Var(
                                                            "s2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "concat",
                                                    args: [
                                                        Var(
                                                            "s2",
                                                        ),
                                                        Var(
                                                            "s2",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
function {:builtin "str.++"} concat(string, string): string;

function {:builtin "str.len"} len(string): int;

function {:builtin "str.substr"} substr(string, int, int): string;

function {:builtin "str.indexof"} indexOf(string, string): int;

function {:builtin "str.indexof"} indexOfFromOffset(string, string, int): int;

function {:builtin "str.at"} at(string, int): string;

function {:builtin "str.contains"} contains(string, string): bool;

function {:builtin "str.prefixof"} prefixOf(string, string): bool;

function {:builtin "str.suffixof"} suffixOf(string, string): bool;

function {:builtin "str.replace"} replace(string, string, string): string;

function {:builtin "str.to.int"} stringToInt(string): int;

function {:builtin "int.to.str"} intToString(int): string;

procedure main() {
  var s1, s2, s3: string;

  assume len(s1) == 3;
  assume len(s3) == 3;
  assume concat(s1, s2) == s3;
  assert len(s1) + len(s2) == len(s3);
  assert substr(s3, len(s1), len(s2)) == s2;
  assert indexOf(s3, s1) == 0;
  assert indexOfFromOffset(s3, s1, 0) == 0;
  assert at(s3, 2) == at(s1, 2);
  assert contains(s3, s1);
  assert prefixOf(s1, s3);
  assert suffixOf(s2, s3);
  assert replace(s3, s1, s2) == concat(s2, s2);
}

[Input - ../../vendor/boogie/Test/strings/BasicOperators.bpl]
// RUN: %boogie -proverWarnings:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

function {:builtin "str.++"} concat(string, string): string;
function {:builtin "str.len"} len(string): int;
function {:builtin "str.substr"} substr(string, int, int): string;
function {:builtin "str.indexof"} indexOf(string, string): int;
function {:builtin "str.indexof"} indexOfFromOffset(string, string, int): int;
function {:builtin "str.at"} at(string, int): string;
function {:builtin "str.contains"} contains(string, string): bool;
function {:builtin "str.prefixof"} prefixOf(string, string): bool;
function {:builtin "str.suffixof"} suffixOf(string, string): bool;
function {:builtin "str.replace"} replace(string, string, string): string;
function {:builtin "str.to.int"} stringToInt(string): int;
function {:builtin "int.to.str"} intToString(int): string;

procedure main() {
    var s1, s2, s3: string;

    assume len(s1) == 3;
    assume len(s3) == 3;
    assume concat(s1,s2) == s3;

    assert len(s1) + len(s2) == len(s3);

    assert substr(s3, len(s1), len(s2)) == s2;

    assert indexOf(s3, s1) == 0;

    assert indexOfFromOffset(s3, s1, 0) == 0;

    assert at(s3, 2) == at(s1, 2);

    assert contains(s3, s1);

    assert prefixOf(s1, s3);

    assert suffixOf(s2, s3);

    assert replace(s3, s1, s2) == concat(s2, s2);

    // TODO: This used to verify with Z3 4.8.4
    // assert intToString(stringToInt(s1)) == s1;
}
