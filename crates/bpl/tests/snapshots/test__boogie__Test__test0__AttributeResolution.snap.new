---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "sourcefile",
                        params: [
                            Expr(
                                Var(
                                    "foo",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "T",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "source",
                        params: [
                            Expr(
                                Var(
                                    "bar",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "f",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "description",
                        params: [
                            Expr(
                                Var(
                                    "baz",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "MAXINT",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "naming",
                        params: [
                            Expr(
                                Var(
                                    "qux",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "f",
                                            args: [
                                                Var(
                                                    "ij",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "i",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "i",
                                        ),
                                        op: Add,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "description",
                        params: [
                            Expr(
                                Var(
                                    "mux",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "$Heap",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "sort_of_like_a_trigger",
                        params: [
                            Expr(
                                Var(
                                    "fux",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Bla",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "use_impl",
                            params: [
                                Expr(
                                    Var(
                                        "bzzt",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "foo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "id",
                            params: [
                                Expr(
                                    Var(
                                        "blt",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "foo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block1",
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Correct",
                        params: [
                            Expr(
                                Term(
                                    Term {
                                        lhs: Var(
                                            "hux0",
                                        ),
                                        op: Add,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "F",
                                                args: [
                                                    Var(
                                                        "hux1",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "hux0",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Correct",
                        params: [
                            Expr(
                                Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "F",
                                                args: [
                                                    Var(
                                                        "hux0",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Add,
                                        rhs: Var(
                                            "hux1",
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "F",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Correct",
                        params: [
                            Expr(
                                FuncCall(
                                    FuncCall {
                                        target: "F",
                                        args: [
                                            Term(
                                                Term {
                                                    lhs: Var(
                                                        "hux0",
                                                    ),
                                                    op: Add,
                                                    rhs: Var(
                                                        "hux1",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            proposition: BoolLit(
                true,
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "Correct",
                        params: [
                            Expr(
                                Factor(
                                    Factor {
                                        lhs: Var(
                                            "hux0",
                                        ),
                                        op: Mul,
                                        rhs: Var(
                                            "hux1",
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "hux1",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "Correct",
                            params: [
                                Expr(
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "hux0",
                                            ),
                                            op: Sub,
                                            rhs: Var(
                                                "hux1",
                                            ),
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "Correct",
                            params: [
                                Expr(
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "hux0",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "hux1",
                                            ),
                                        },
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "AlsoCorrect",
                            params: [
                                String(
                                    StringLit {
                                        text: "hello",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [],
            },
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
type {:sourcefile foo} T;

function {:source bar} f(int): int;

const {:description baz} unique MAXINT: int;

axiom {:naming qux} (forall i: int :: {f(ij)} f(i) == i + 1);

var {:description mux} $Heap: [ref, int]bool;

var {:sort_of_like_a_trigger fux} Bla: [ref, int]bool;

procedure {:use_impl bzzt} foo(x: int) returns (n: int);

implementation {:id blt} foo(x: int) returns (n: int) {
  block1:
  return;
}

const {:Correct hux0 + F(hux1)} hux0: int;

function {:Correct F(hux0) + hux1} F(int): int;

axiom {:Correct F(hux0 + hux1)} true;

var {:Correct hux0 * hux1} hux1: int;

procedure {:Correct hux0 - hux1} P();

implementation {:Correct hux0 + hux1} {:AlsoCorrect "hello"} P() {
}

type ref;

[Input - ../../vendor/boogie/Test/test0/AttributeResolution.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
type {:sourcefile foo} T; 

function {:source bar} f(int) returns (int);

const {:description baz} unique MAXINT: int;

axiom {:naming qux} (forall i: int :: {f(ij)} f(i) == i+1);

var {:description mux} $Heap: [ref, int]bool;

var {:sort_of_like_a_trigger fux} Bla: [ref, int]bool;

procedure {:use_impl bzzt} foo(x : int) returns(n : int);

implementation {:id blt} foo(x : int) returns(n : int)
{
  block1: return;
}

// ------  and here are various correct things



const {:Correct hux0 + F(hux1)} hux0: int;

function {:Correct F(hux0) + hux1} F(int) returns (int);

axiom {:Correct F(hux0 + hux1)} true;

var {:Correct hux0*hux1} hux1: int;

procedure {:Correct hux0 - hux1} P();

implementation {:Correct hux0 + hux1} {:AlsoCorrect "hello"} P()
{
}

type ref;
