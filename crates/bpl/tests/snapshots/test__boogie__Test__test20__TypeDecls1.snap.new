---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "mapSet",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                        ],
                        keys: [
                            Map(
                                MapType {
                                    type_params: [
                                        "b",
                                    ],
                                    keys: [
                                        App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                    ],
                                    value: App(
                                        TypeApp {
                                            head: "a",
                                            tail: None,
                                        },
                                    ),
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "emptySet",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Array(
                ArrayExpr {
                    expr: Var(
                        "mapSet",
                    ),
                    subscripts: [
                        ArraySubscript {
                            keys: [
                                Nat(
                                    "5",
                                ),
                            ],
                            value: None,
                        },
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "mapSet",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [
                                        Var(
                                            "emptySet",
                                        ),
                                    ],
                                    value: None,
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: BoolLit(
                        true,
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "mapSet",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [
                                        Var(
                                            "emptySet",
                                        ),
                                    ],
                                    value: Some(
                                        BoolLit(
                                            false,
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Neq,
                    rhs: Var(
                        "mapSet",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "mapSet",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [
                                        Var(
                                            "emptySet",
                                        ),
                                    ],
                                    value: Some(
                                        Nat(
                                            "5",
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "mapSet",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "emptySet",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [
                                        Nat(
                                            "13",
                                        ),
                                    ],
                                    value: Some(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [
                                        Nat(
                                            "13",
                                        ),
                                    ],
                                    value: None,
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: BoolLit(
                        true,
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "c",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "c",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "mapSet",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "f",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "f",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Ge,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "c",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "c",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "c",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Array(
                            ArrayExpr {
                                expr: Var(
                                    "mapSet",
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "f",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "mapSet",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [
                                        Var(
                                            "mapSet",
                                        ),
                                    ],
                                    value: None,
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: BoolLit(
                        true,
                    ),
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
const mapSet: <a>[<b>[b]a]bool;

const emptySet: <a>[a]bool;

axiom mapSet[5];

axiom mapSet[emptySet] == true;

axiom mapSet[emptySet := false] != mapSet;

axiom mapSet[emptySet := 5] == mapSet;

axiom emptySet[13 := true][13] == true;

axiom (forall f: <c>[c]int, x: ref :: mapSet[f] ==> f[x] >= 0);

axiom (forall f: <c>[c]c :: mapSet[f]);

axiom mapSet[mapSet] == true;

type ref;

[Input - ../../vendor/boogie/Test/test20/TypeDecls1.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

// set of maps from anything to a specific type a
const mapSet : <a>[<b>[b]a]bool;

const emptySet : <a>[a]bool;

axiom mapSet[5];                            // type error

axiom mapSet[emptySet] == true;

axiom mapSet[emptySet := false] != mapSet;

axiom mapSet[emptySet := 5] == mapSet;      // type error

axiom emptySet[13 := true][13] == true;

axiom (forall f : <c>[c]int, x : ref :: mapSet[f] ==> f[x] >= 0);

axiom (forall f : <c>[c]c :: mapSet[f]);    // type error

axiom mapSet[mapSet] == true;               // type error

type ref;
