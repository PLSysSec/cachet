---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [],
            ident: "f",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "P",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Logical(
                                        LogicalExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: And,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "9",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Logical(
                                        LogicalExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Or,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "9",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Implies(
                                        ImpliesExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "P",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "P",
                                                    args: [
                                                        Nat(
                                                            "20",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Equiv(
                                        EquivExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "P",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "P",
                                                    args: [
                                                        Nat(
                                                            "20",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Term(
                                                Term {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "f",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Nat(
                                                                    "10",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Add,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "f",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Neq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Nat(
                                                "10",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "3",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "y",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Var(
                                                    "b",
                                                ),
                                            },
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Var(
                            "b",
                        ),
                    },
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "g",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    BoolLit(
                                        false,
                                    ),
                                    Nat(
                                        "6",
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Add,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    BoolLit(
                                        false,
                                    ),
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Add,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                    Nat(
                                        "6",
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Add,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Add,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Add,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "y",
                                        ),
                                        op: Add,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Term(
                                                Term {
                                                    lhs: Var(
                                                        "g",
                                                    ),
                                                    op: Add,
                                                    rhs: Var(
                                                        "x",
                                                    ),
                                                },
                                            ),
                                            op: Neq,
                                            rhs: Nat(
                                                "65",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Add,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Var(
                                        "x",
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Add,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Term(
                                        Term {
                                            lhs: Term(
                                                Term {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Add,
                                                    rhs: Var(
                                                        "y",
                                                    ),
                                                },
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "z",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "z",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "f",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "f",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "f",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "f",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "f",
                                            args: [
                                                Var(
                                                    "z",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                                op: Lt,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "f",
                                        args: [
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "nopats",
                                    params: [
                                        Expr(
                                            Var(
                                                "x",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "nopats",
                                    params: [
                                        Expr(
                                            Var(
                                                "g",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "nopats",
                                    params: [
                                        Expr(
                                            FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "g",
                                                        ),
                                                        Var(
                                                            "g",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Var(
                                    "y",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "y",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [
                                        Trigger(
                                            [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "f",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        ),
                                    ],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "y",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [
                                        Trigger(
                                            [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "f",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        ),
                                    ],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "y",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [
                                        Trigger(
                                            [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "f",
                                                        args: [
                                                            Var(
                                                                "y",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        ),
                                    ],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Var(
                                                            "y",
                                                        ),
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "y",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "z",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "f",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                        Var(
                                                                            "y",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "f",
                                                                args: [
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Gt,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "y",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "z",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "f",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                        Var(
                                                                            "z",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "f",
                                                                args: [
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Gt,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "y",
                                                    ],
                                                    type_: Atom(
                                                        Int,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "z",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Trigger(
                                                        [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "f",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                        Var(
                                                                            "y",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "f",
                                                                    args: [
                                                                        Var(
                                                                            "y",
                                                                        ),
                                                                        Var(
                                                                            "z",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "f",
                                                                args: [
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                    Var(
                                                                        "y",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Gt,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "h0",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "h1",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "h1",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                    Var(
                                                        "f",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Lt,
                                rhs: Var(
                                    "h0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c0",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c1",
                ],
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "ref",
                                    tail: None,
                                },
                            ),
                            App(
                                TypeApp {
                                    head: "ref",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "c1",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                    Var(
                                                        "f",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Lt,
                                rhs: Var(
                                    "c0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
function f(int, int): int;

function P(int, int): bool;

axiom (forall x: int :: {f(x, 10) && f(x, 9)} f(x, 10) == 3);

axiom (forall x: int :: {f(x, 10) || f(x, 9)} f(x, 10) == 3);

axiom (forall x: int :: {!f(x, 10)} f(x, 10) == 3);

axiom (forall x: int :: {!f(x, 10)} f(x, 10) == 3);

axiom (forall x: int :: {P(x, 10) ==> P(20, x)} f(x, 10) == 3);

axiom (forall x: int :: {P(x, 10) <==> P(20, x)} f(x, 10) == 3);

axiom (forall x: int :: {f(x, 10) == 3} f(x, 10) == 3);

axiom (forall x: int :: {f(x, 10) < 3} f(x, 10) == 3);

axiom (forall x: int :: {f(x, 10) + f(x, x) != 3} f(x, 10) == 3);

axiom (forall b: bool :: {(forall y: int :: b)} b);

const g: int;

axiom (forall x: int :: {false, 6} x < x + 1);

axiom (forall x: int :: {false, x + 1, 6} x < x + 1);

axiom (forall x: int, y: int :: {x + 1} {y + 1} x < y + 1);

axiom (forall x: int :: {g + x != 65} x < x + 1);

axiom (forall x: int :: {x} x < x + 1);

axiom (forall x: int, y: int, z: int :: {x + y + z} {x + y, y + z} {f(f(x, y), y)} x == x);

axiom (forall x: int, y: int, z: int :: {f(x, x), f(y, y), f(z, z)} f(x, y) < f(y, z));

axiom (forall x: int, y: int :: {:nopats x} {:nopats g} x < y);

axiom (forall x: int, y: int :: {:nopats f(g, g)} x < y);

axiom (forall x: int :: (forall y: int :: {f(x, y)} f(x, y) > 0));

axiom (forall x: int :: (forall y: int :: {f(x, x)} f(x, x) > 0));

axiom (forall x: int :: (forall y: int :: {f(y, y)} f(y, y) > 0));

axiom (forall x: int :: (forall y: int :: (forall z: int :: {f(x, y)} f(y, y) > 0)));

axiom (forall x: int :: (forall y: int :: (forall z: int :: {f(x, z)} f(y, y) > 0)));

axiom (forall x: int :: (forall y: int :: (forall z: int :: {f(x, y), f(y, z)} f(y, y) > 0)));

var h0: int;

var h1: [ref, ref]int;

axiom (forall o: ref, f: ref :: h1[o, f] < h0);

const c0: int;

const c1: [ref, ref]int;

axiom (forall o: ref, f: ref :: c1[o, f] < c0);

type ref;

[Input - ../../vendor/boogie/Test/test0/Triggers1.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
// Trigger errors

function f(int, int) returns (int);
function P(int, int) returns (bool);

axiom (forall x: int ::
       { f(x,10) && f(x,9) }   // error: && not allowed
       f(x,10) == 3);

axiom (forall x: int ::
       { ((((f(x,10) || f(x,9))))) }   // error: || not allowed
       f(x,10) == 3);

axiom (forall x: int ::
       { !f(x,10) }   // error: ! not allowed
       f(x,10) == 3);

axiom (forall x: int ::
       { (!f(x,10)) }   // error: ! not allowed
       f(x,10) == 3);

axiom (forall x: int ::
       { P(x,10) ==> P(20,x) }   // error: ==> not allowed
       f(x,10) == 3);

axiom (forall x: int ::
       { P(x,10) <==> P(20,x) }   // error: <==> not allowed
       f(x,10) == 3);


axiom (forall x: int ::
       { f(x,10) == 3 }   // error: == not allowed
       f(x,10) == 3);

axiom (forall x: int ::
       { f(x,10) < 3 }   // error: < not allowed
       f(x,10) == 3);


axiom (forall x: int ::
       { f(x,10) + f(x,x) != 3 }   // yes, != is allowed
       f(x,10) == 3);

axiom (forall b: bool ::
       { (forall y: int :: b) }   // error: quantifiers not allowed
       b);

// -------------- tests of free variables

const g: int;

axiom (forall x: int ::
       { false, 6 }             // error: does not mention "x"
       x < x + 1);

axiom (forall x: int ::
       { false, x+1, 6 }        // allowed
       x < x + 1);

axiom (forall x: int, y: int ::
       { x+1 }                  // error: does not mention "y"
       { y+1 }                  // error: does not mention "x"
       x < y + 1);

axiom (forall x: int ::
       { g+x != 65 }            // allowed
       x < x + 1);

axiom (forall x: int ::
       { x }                    // "x" by itself is not a good trigger
       x < x + 1);

//axiom (forall x: any ::  // PR: removed for the time being
//       { cast(x,int) }          // can't fool me, still not allowed
//       x == x );

// --- multiple triggers

axiom (forall x: int, y: int, z: int ::
       { x+y+z }                // good
       { x+y, y+z }             // also good
       { f(f(x,y),y) }          // error: does not mention z
       x == x );

// --- multi-triggers

axiom (forall x: int, y: int, z: int ::
       { f(x,x), f(y,y), f(z,z) }  // good
       f(x,y) < f(y,z) );

// --- pattern exclusion

axiom (forall x: int, y: int ::
       {:nopats x }                   // error: "x" by itself is not allowed here either
       {:nopats g }                   // error: "g" by itself is not allowed here either
       x < y);

axiom (forall x: int, y: int ::
       {:nopats f(g,g) }              // but it is okay not to mention the bound variables (in a pattern exclusion)
       x < y);

// --- merging of nested quantifiers (disabled unless both have no triggers)

axiom (forall x:int :: (forall y:int :: { f(x,y) } f(x,y) > 0)); // OK, but no merging - outer quantifier has no trigger
axiom (forall x:int :: (forall y:int :: { f(x,x) } f(x,x) > 0)); // error
axiom (forall x:int :: (forall y:int :: { f(y,y) } f(y,y) > 0)); // OK - no merging

// three levels
axiom (forall x:int :: (forall y:int :: (forall z:int :: { f(x,y) } f(y,y) > 0))); // error - z not mentioned
axiom (forall x:int :: (forall y:int :: (forall z:int :: { f(x,z) } f(y,y) > 0))); // OK - only outer two quantifiers are merged
//axiom (forall x:int :: (forall y:int :: (forall z:int :: f(y,y) > 0))); // OK - all three are merged
axiom (forall x:int :: (forall y:int :: (forall z:int :: { f(x,y), f(y,z) } f(y,y) > 0))); // OK - but not a trigger for outer x,y (which get merged)

// --- no free variables

var h0: int;
var h1: [ref,ref]int;

axiom (forall o: ref, f: ref  :: h1[o,f] // error: cannot mention free variable "h1"
                               < h0);    // error: cannot mention free variable "h0"

const c0: int;
const c1: [ref,ref]int;

axiom (forall o: ref, f: ref :: c1[o,f] < c0);

type ref;
