---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "lemma",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "A_Propose",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "A_Propose'",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "CommutativityLemma_A_Propose_A_Propose'",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "voteInfo",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Round",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "Option",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "VoteInfo",
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "first_r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Round",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "second_r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Round",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "Lemma_MaxRound_InitVote",
                                args: [
                                    Var(
                                        "voteInfo",
                                    ),
                                    Var(
                                        "first_r",
                                    ),
                                    Var(
                                        "second_r",
                                    ),
                                ],
                            },
                        ),
                        op: And,
                        rhs: FuncCall(
                            FuncCall {
                                target: "Lemma_MaxRound_InitVote",
                                args: [
                                    Var(
                                        "voteInfo",
                                    ),
                                    Var(
                                        "second_r",
                                    ),
                                    Var(
                                        "first_r",
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "lemma",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "A_Vote",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "A_Propose'",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "CommutativityLemma_A_Vote_A_Propose'",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "voteInfo",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Round",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "Option",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "VoteInfo",
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "first_r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Round",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "second_r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Round",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "first_n",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Node",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "Lemma_MaxRound_AddNodeToVote",
                        args: [
                            Var(
                                "voteInfo",
                            ),
                            Var(
                                "second_r",
                            ),
                            Var(
                                "first_r",
                            ),
                            Var(
                                "first_n",
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "lemma",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "A_Propose",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "A_Vote'",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "CommutativityLemma_A_Propose_A_Vote'",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "voteInfo",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Round",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "Option",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "VoteInfo",
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "first_r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Round",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "second_r",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Round",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "second_n",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Node",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "Lemma_MaxRound_AddNodeToVote",
                        args: [
                            Var(
                                "voteInfo",
                            ),
                            Var(
                                "first_r",
                            ),
                            Var(
                                "second_r",
                            ),
                            Var(
                                "second_n",
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ns1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "NodeSet",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "ns2",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "NodeSet",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IsQuorum",
                                            args: [
                                                Var(
                                                    "ns1",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "IsQuorum",
                                            args: [
                                                Var(
                                                    "ns2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsQuorum",
                                                args: [
                                                    Var(
                                                        "ns1",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "IsQuorum",
                                                args: [
                                                    Var(
                                                        "ns2",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "n",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "Node",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "Node",
                                                                    args: [
                                                                        Var(
                                                                            "n",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "ns1",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "n",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "ns2",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "n",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
]

[Printed]
function {:inline} {:lemma} {:commutativity "A_Propose", "A_Propose'"} CommutativityLemma_A_Propose_A_Propose'(voteInfo: [Round]Option VoteInfo, first_r: Round, second_r: Round): bool {
  Lemma_MaxRound_InitVote(voteInfo, first_r, second_r) && Lemma_MaxRound_InitVote(voteInfo, second_r, first_r)
}

function {:inline} {:lemma} {:commutativity "A_Vote", "A_Propose'"} CommutativityLemma_A_Vote_A_Propose'(voteInfo: [Round]Option VoteInfo, first_r: Round, second_r: Round, first_n: Node): bool {
  Lemma_MaxRound_AddNodeToVote(voteInfo, second_r, first_r, first_n)
}

function {:inline} {:lemma} {:commutativity "A_Propose", "A_Vote'"} CommutativityLemma_A_Propose_A_Vote'(voteInfo: [Round]Option VoteInfo, first_r: Round, second_r: Round, second_n: Node): bool {
  Lemma_MaxRound_AddNodeToVote(voteInfo, first_r, second_r, second_n)
}

axiom (forall ns1: NodeSet, ns2: NodeSet :: {IsQuorum(ns1), IsQuorum(ns2)} IsQuorum(ns1) && IsQuorum(ns2) ==> (exists n: Node :: Node(n) && ns1[n] && ns2[n]));

[Input - ../../vendor/boogie/Test/civl/inductive-sequentialization/paxos/PaxosSeqAxioms.bpl]
function {:inline}{:lemma}{:commutativity "A_Propose", "A_Propose'"}
CommutativityLemma_A_Propose_A_Propose'(voteInfo: [Round]Option VoteInfo, first_r: Round, second_r: Round) : bool
{
  Lemma_MaxRound_InitVote(voteInfo, first_r, second_r) &&
  Lemma_MaxRound_InitVote(voteInfo, second_r, first_r)
}

function {:inline}{:lemma}{:commutativity "A_Vote", "A_Propose'"}
CommutativityLemma_A_Vote_A_Propose'(voteInfo: [Round]Option VoteInfo, first_r: Round, second_r: Round, first_n: Node) : bool
{
  Lemma_MaxRound_AddNodeToVote(voteInfo, second_r, first_r, first_n)
}

function {:inline}{:lemma}{:commutativity "A_Propose", "A_Vote'"}
CommutativityLemma_A_Propose_A_Vote'(voteInfo: [Round]Option VoteInfo, first_r: Round, second_r: Round, second_n: Node) : bool
{
  Lemma_MaxRound_AddNodeToVote(voteInfo, first_r, second_r, second_n)
}

axiom (forall ns1: NodeSet, ns2: NodeSet :: {IsQuorum(ns1), IsQuorum(ns2)}
  IsQuorum(ns1) && IsQuorum(ns2) ==> (exists n: Node :: Node(n) && ns1[n] && ns2[n])
);

// Local Variables:
// flycheck-disabled-checkers: (boogie)
// End:
