---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "C",
                    type_params: [
                        "a",
                        "b",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "C2",
                    type_params: [
                        "b",
                        "a",
                    ],
                    type_: Some(
                        App(
                            TypeApp {
                                head: "C",
                                tail: Some(
                                    App(
                                        TypeApp {
                                            head: "a",
                                            tail: Some(
                                                App(
                                                    TypeApp {
                                                        head: "b",
                                                        tail: None,
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "g0",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [
                                "a",
                                "b",
                            ],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "C2",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "a",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "b",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "g1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [
                                "a",
                                "b",
                            ],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "C2",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "b",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "a",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "g2",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [
                                "a",
                                "b",
                            ],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "C",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "a",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "b",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "g3",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [
                                "a",
                                "b",
                            ],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "C",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "b",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "a",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c0",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                            "b",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "C2",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "a",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "b",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c1",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                            "b",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "C2",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "b",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c2",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                            "b",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "C",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "a",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "b",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "c3",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                            "b",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "C",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "b",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g0",
                            args: [
                                Var(
                                    "c0",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g1",
                            args: [
                                Var(
                                    "c0",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g2",
                            args: [
                                Var(
                                    "c0",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g3",
                            args: [
                                Var(
                                    "c0",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g0",
                            args: [
                                Var(
                                    "c1",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g1",
                            args: [
                                Var(
                                    "c1",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g2",
                            args: [
                                Var(
                                    "c1",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g3",
                            args: [
                                Var(
                                    "c1",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g0",
                            args: [
                                Var(
                                    "c2",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g1",
                            args: [
                                Var(
                                    "c2",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g2",
                            args: [
                                Var(
                                    "c2",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g3",
                            args: [
                                Var(
                                    "c2",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g0",
                            args: [
                                Var(
                                    "c3",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g1",
                            args: [
                                Var(
                                    "c3",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g2",
                            args: [
                                Var(
                                    "c3",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g3",
                            args: [
                                Var(
                                    "c3",
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "nested",
                    type_params: [
                        "a",
                    ],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [
                                    "b",
                                ],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "b",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "b",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "a",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "nested2",
                    type_params: [],
                    type_: Some(
                        App(
                            TypeApp {
                                head: "nested",
                                tail: Some(
                                    AtomApp(
                                        TypeApp {
                                            head: Paren(
                                                App(
                                                    TypeApp {
                                                        head: "nested",
                                                        tail: Some(
                                                            AtomApp(
                                                                TypeApp {
                                                                    head: Int,
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            tail: None,
                                        },
                                    ),
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "h",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "nested2",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "e",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "b",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "b",
                                    tail: None,
                                },
                            ),
                            App(
                                TypeApp {
                                    head: "b",
                                    tail: None,
                                },
                            ),
                            Map(
                                MapType {
                                    type_params: [
                                        "b2",
                                    ],
                                    keys: [
                                        App(
                                            TypeApp {
                                                head: "b2",
                                                tail: None,
                                            },
                                        ),
                                        App(
                                            TypeApp {
                                                head: "b2",
                                                tail: None,
                                            },
                                        ),
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "h",
                    args: [
                        Var(
                            "e",
                        ),
                    ],
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "e2",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "b",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "b",
                                    tail: None,
                                },
                            ),
                            App(
                                TypeApp {
                                    head: "b",
                                    tail: None,
                                },
                            ),
                            Map(
                                MapType {
                                    type_params: [
                                        "b2",
                                    ],
                                    keys: [
                                        App(
                                            TypeApp {
                                                head: "b2",
                                                tail: None,
                                            },
                                        ),
                                        App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                        Atom(
                                            Int,
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "h",
                    args: [
                        Var(
                            "e2",
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
type C a b;

type C2 b a = C a b;

function g0(<a, b>[C2 a b]int): int;

function g1(<a, b>[C2 b a]int): int;

function g2(<a, b>[C a b]int): int;

function g3(<a, b>[C b a]int): int;

const c0: <a, b>[C2 a b]int;

const c1: <a, b>[C2 b a]int;

const c2: <a, b>[C a b]int;

const c3: <a, b>[C b a]int;

axiom g0(c0) == 0;

axiom g1(c0) == 0;

axiom g2(c0) == 0;

axiom g3(c0) == 0;

axiom g0(c1) == 0;

axiom g1(c1) == 0;

axiom g2(c1) == 0;

axiom g3(c1) == 0;

axiom g0(c2) == 0;

axiom g1(c2) == 0;

axiom g2(c2) == 0;

axiom g3(c2) == 0;

axiom g0(c3) == 0;

axiom g1(c3) == 0;

axiom g2(c3) == 0;

axiom g3(c3) == 0;

type nested a = <b>[b, b, a]int;

type nested2 = nested (nested int);

function h(nested2): bool;

const e: <b>[b, b, <b2>[b2, b2, int]int]int;

axiom h(e);

const e2: <b>[b, b, <b2>[b2, b, int]int]int;

axiom h(e2);

[Input - ../../vendor/boogie/Test/test20/TypeSynonyms1.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"



type C a b;
type C2 b a = C a b;


// ordering of map type parameters
function g0(<a,b>[C2 a b]int) returns (int);
function g1(<a,b>[C2 b a]int) returns (int);
function g2(<a,b>[C a b]int) returns (int);
function g3(<a,b>[C b a]int) returns (int);

const c0 : <a,b>[C2 a b]int;
const c1 : <a,b>[C2 b a]int;
const c2 : <a,b>[C a b]int;
const c3 : <a,b>[C b a]int;

axiom g0(c0) == 0;
axiom g1(c0) == 0;
axiom g2(c0) == 0;
axiom g3(c0) == 0;
axiom g0(c1) == 0;
axiom g1(c1) == 0;
axiom g2(c1) == 0;
axiom g3(c1) == 0;
axiom g0(c2) == 0;
axiom g1(c2) == 0;
axiom g2(c2) == 0;
axiom g3(c2) == 0;
axiom g0(c3) == 0;
axiom g1(c3) == 0;
axiom g2(c3) == 0;
axiom g3(c3) == 0;


type nested a = <b>[b, b, a]int;
type nested2 = nested (nested int);


function h(nested2) returns (bool);
const e : <b>[b, b, <b2>[b2, b2, int]int]int;
axiom h(e);

const e2 : <b>[b, b, <b2>[b2, b, int]int]int;      // wrong binding
axiom h(e2);
