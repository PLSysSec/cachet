---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "elements",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "struct",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "$Heap",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "name",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "any",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "cast",
            type_params: [
                "S",
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "S",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "IsHeap",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "h",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "any",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$allocated",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$elements",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$inv",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$writable",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$sharingMode",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$SharingMode_Unshared",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$SharingMode_LockProtected",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "ClassRepr",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "class",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c0",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c1",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "c0",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "c1",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "ClassRepr",
                                                args: [
                                                    Var(
                                                        "c0",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "ClassRepr",
                                                args: [
                                                    Var(
                                                        "c1",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$typeof",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "ClassRepr",
                                                            args: [
                                                                Var(
                                                                    "T",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "System.Object",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "ClassRepr",
                                        args: [
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                op: Neq,
                                rhs: Var(
                                    "null",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "h",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "ClassRepr",
                                                                args: [
                                                                    Var(
                                                                        "T",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "$writable",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "cast",
                                                args: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "h",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "ClassRepr",
                                                                                args: [
                                                                                    Var(
                                                                                        "T",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        Var(
                                                                            "$writable",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "IsDirectlyModifiableField",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsDirectlyModifiableField",
                            args: [
                                Var(
                                    "$allocated",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "IsDirectlyModifiableField",
                    args: [
                        Var(
                            "$elements",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsDirectlyModifiableField",
                            args: [
                                Var(
                                    "$inv",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsDirectlyModifiableField",
                            args: [
                                Var(
                                    "$writable",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "IsStaticField",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsStaticField",
                            args: [
                                Var(
                                    "$allocated",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsStaticField",
                            args: [
                                Var(
                                    "$elements",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsStaticField",
                            args: [
                                Var(
                                    "$inv",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Neg(
                NegExpr {
                    op: Logical,
                    expr: FuncCall(
                        FuncCall {
                            target: "IsStaticField",
                            args: [
                                Var(
                                    "$writable",
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "ValueArrayGet",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "elements",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "any",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "ValueArraySet",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "elements",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "any",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "elements",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "RefArrayGet",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "elements",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "RefArraySet",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "elements",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "elements",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "elements",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "ValueArrayGet",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "ValueArraySet",
                                                    args: [
                                                        Var(
                                                            "A",
                                                        ),
                                                        Var(
                                                            "i",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "i",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "elements",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "j",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "i",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "j",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "ValueArrayGet",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "ValueArraySet",
                                                            args: [
                                                                Var(
                                                                    "A",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Var(
                                                        "j",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "ValueArrayGet",
                                                args: [
                                                    Var(
                                                        "A",
                                                    ),
                                                    Var(
                                                        "j",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "elements",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "RefArrayGet",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "RefArraySet",
                                                    args: [
                                                        Var(
                                                            "A",
                                                        ),
                                                        Var(
                                                            "i",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "i",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "elements",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "j",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "i",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "j",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "RefArrayGet",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "RefArraySet",
                                                            args: [
                                                                Var(
                                                                    "A",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Var(
                                                        "j",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "RefArrayGet",
                                                args: [
                                                    Var(
                                                        "A",
                                                    ),
                                                    Var(
                                                        "j",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "ArrayIndex",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arr",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "dim",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "indexAtDim",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "remainingIndexContribution",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x'",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y'",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "ArrayIndex",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "d",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "ArrayIndex",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "d",
                                                    ),
                                                    Var(
                                                        "x'",
                                                    ),
                                                    Var(
                                                        "y'",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x'",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "y'",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$typeof",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Subtype,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "RefArray",
                                                args: [
                                                    Var(
                                                        "T",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "RefArrayGet",
                                                    args: [
                                                        Coercion(
                                                            CoercionExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "cast",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "a",
                                                                                                ),
                                                                                                Var(
                                                                                                    "$elements",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                coercions: [
                                                                    Type(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "elements",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$Rank",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "1",
                                ),
                                op: Le,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "$Rank",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$Is",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "ValueArray",
                                                        args: [
                                                            Var(
                                                                "T",
                                                            ),
                                                            Var(
                                                                "r",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "ValueArray",
                                                    args: [
                                                        Var(
                                                            "T",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$Rank",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "r",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$Is",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "RefArray",
                                                        args: [
                                                            Var(
                                                                "T",
                                                            ),
                                                            Var(
                                                                "r",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "RefArray",
                                                    args: [
                                                        Var(
                                                            "T",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$Rank",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "r",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$Length",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$Length",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "0",
                                ),
                                op: Le,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "$Length",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$DimLength",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "0",
                                ),
                                op: Le,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "$DimLength",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "i",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$Rank",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$DimLength",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Nat(
                                                        "0",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$Length",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$LBound",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$UBound",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$LBound",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "i",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$LBound",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "i",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$UBound",
                                            args: [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "i",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$UBound",
                                        args: [
                                            Var(
                                                "a",
                                            ),
                                            Var(
                                                "i",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$DimLength",
                                                args: [
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "i",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Sub,
                                        rhs: Nat(
                                            "1",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Array",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsClass",
                    args: [
                        Var(
                            "System.Array",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "System.Array",
                    ),
                    op: Subtype,
                    rhs: Var(
                        "System.Object",
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$ElementType",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "ValueArray",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "elementType",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "rank",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "ValueArray",
                                            args: [
                                                Var(
                                                    "T",
                                                ),
                                                Var(
                                                    "r",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "ValueArray",
                                        args: [
                                            Var(
                                                "T",
                                            ),
                                            Var(
                                                "r",
                                            ),
                                        ],
                                    },
                                ),
                                op: Subtype,
                                rhs: Var(
                                    "System.Array",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "RefArray",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "elementType",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "rank",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "RefArray",
                                            args: [
                                                Var(
                                                    "T",
                                                ),
                                                Var(
                                                    "r",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "RefArray",
                                        args: [
                                            Var(
                                                "T",
                                            ),
                                            Var(
                                                "r",
                                            ),
                                        ],
                                    },
                                ),
                                op: Subtype,
                                rhs: Var(
                                    "System.Array",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "U",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "U",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "T",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "RefArray",
                                                args: [
                                                    Var(
                                                        "U",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Subtype,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "RefArray",
                                                args: [
                                                    Var(
                                                        "T",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$ElementType",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "ValueArray",
                                                    args: [
                                                        Var(
                                                            "A",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "A",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$ElementType",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "RefArray",
                                                    args: [
                                                        Var(
                                                            "A",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "A",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "T",
                                            ),
                                            op: Subtype,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "RefArray",
                                                    args: [
                                                        Var(
                                                            "A",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "T",
                                        ),
                                        op: Subtype,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "RefArray",
                                                args: [
                                                    Var(
                                                        "A",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "T",
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "RefArray",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "$ElementType",
                                                                    args: [
                                                                        Var(
                                                                            "T",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            Var(
                                                                "r",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "$ElementType",
                                                        args: [
                                                            Var(
                                                                "T",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "A",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "T",
                                            ),
                                            op: Subtype,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "ValueArray",
                                                    args: [
                                                        Var(
                                                            "A",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "T",
                                        ),
                                        op: Subtype,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "ValueArray",
                                                args: [
                                                    Var(
                                                        "A",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "T",
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "ValueArray",
                                                args: [
                                                    Var(
                                                        "A",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "RefArray",
                                                args: [
                                                    Var(
                                                        "A",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "T",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Array",
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "T",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "T",
                                                        ),
                                                        op: Eq,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "RefArray",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "$ElementType",
                                                                            args: [
                                                                                Var(
                                                                                    "T",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    Var(
                                                                        "r",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "A",
                                                        ),
                                                        op: Subtype,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "$ElementType",
                                                                args: [
                                                                    Var(
                                                                        "T",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "ValueArray",
                                                args: [
                                                    Var(
                                                        "A",
                                                    ),
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "T",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Array",
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "T",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "T",
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "ValueArray",
                                                        args: [
                                                            Var(
                                                                "A",
                                                            ),
                                                            Var(
                                                                "r",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$ArrayPtr",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "elementType",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$StructGet",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "struct",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "any",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$StructSet",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "struct",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "any",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "struct",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "struct",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$StructGet",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "$StructSet",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Var(
                                                            "f",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "f",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "struct",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f'",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "f",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "f'",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$StructGet",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "$StructSet",
                                                            args: [
                                                                Var(
                                                                    "s",
                                                                ),
                                                                Var(
                                                                    "f",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Var(
                                                        "f'",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$StructGet",
                                                args: [
                                                    Var(
                                                        "s",
                                                    ),
                                                    Var(
                                                        "f'",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "ZeroInit",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "struct",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "typ",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$typeof",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Implements",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "class",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "interface",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "J",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Implements",
                                            args: [
                                                Var(
                                                    "T",
                                                ),
                                                Var(
                                                    "J",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Implements",
                                        args: [
                                            Var(
                                                "T",
                                            ),
                                            Var(
                                                "J",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "T",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "J",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "InterfaceExtends",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "subIntf",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "superIntf",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "J",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "InterfaceExtends",
                                            args: [
                                                Var(
                                                    "J",
                                                ),
                                                Var(
                                                    "K",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "InterfaceExtends",
                                        args: [
                                            Var(
                                                "J",
                                            ),
                                            Var(
                                                "K",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "J",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "K",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$IsClass",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "C",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$IsClass",
                                            args: [
                                                Var(
                                                    "C",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$IsClass",
                                        args: [
                                            Var(
                                                "C",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "C",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "C",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "AsDirectSubClass",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "sub",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "base",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "sub'",
                ),
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "OneClassDown",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "sub",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "base",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "directSub",
                ),
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "B",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "C",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "C",
                                            ),
                                            op: Subtype,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "AsDirectSubClass",
                                                    args: [
                                                        Var(
                                                            "B",
                                                        ),
                                                        Var(
                                                            "A",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "C",
                                        ),
                                        op: Subtype,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "AsDirectSubClass",
                                                args: [
                                                    Var(
                                                        "B",
                                                    ),
                                                    Var(
                                                        "A",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "OneClassDown",
                                                args: [
                                                    Var(
                                                        "C",
                                                    ),
                                                    Var(
                                                        "A",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "B",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$IsInterface",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "J",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$IsInterface",
                                            args: [
                                                Var(
                                                    "J",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$IsInterface",
                                        args: [
                                            Var(
                                                "J",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "J",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "System.Object",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$IsValueType",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$IsValueType",
                                        args: [
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Quant(
                                            QuantExpr {
                                                kind: ForAll,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "U",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "T",
                                                                    ),
                                                                    op: Subtype,
                                                                    rhs: Var(
                                                                        "U",
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "T",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "U",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                        op: And,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: ForAll,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "U",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "U",
                                                                    ),
                                                                    op: Subtype,
                                                                    rhs: Var(
                                                                        "T",
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "T",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "U",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Object",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsClass",
                    args: [
                        Var(
                            "System.Object",
                        ),
                    ],
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$IsTokenForType",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "struct",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "TypeObject",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Type",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "System.Type",
                    ),
                    op: Subtype,
                    rhs: Var(
                        "System.Object",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "TypeObject",
                                            args: [
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "$IsNotNull",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "TypeObject",
                                            args: [
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Var(
                                        "System.Type",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$Is",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$Is",
                                            args: [
                                                Var(
                                                    "o",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            Var(
                                                "o",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "o",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "null",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "o",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "T",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$IsNotNull",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$IsNotNull",
                                            args: [
                                                Var(
                                                    "o",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$IsNotNull",
                                        args: [
                                            Var(
                                                "o",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "o",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "null",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$Is",
                                                args: [
                                                    Var(
                                                        "o",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$As",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            Var(
                                                "o",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$As",
                                                args: [
                                                    Var(
                                                        "o",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "o",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "$Is",
                                                args: [
                                                    Var(
                                                        "o",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$As",
                                                args: [
                                                    Var(
                                                        "o",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            Var(
                                                "o",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "RefArray",
                                                    args: [
                                                        Var(
                                                            "A",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                            Var(
                                                                "$inv",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$typeof",
                                                args: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "A",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            Var(
                                                "o",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "ValueArray",
                                                    args: [
                                                        Var(
                                                            "A",
                                                        ),
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "o",
                                                            ),
                                                            Var(
                                                                "$inv",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$typeof",
                                                args: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "IsAllocated",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "h",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "any",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "o",
                    ),
                    type_: App(
                        TypeApp {
                            head: "any",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IsAllocated",
                                            args: [
                                                Var(
                                                    "h",
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "h",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "o",
                                                                    ),
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "IsAllocated",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "h",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "o",
                                                                ),
                                                                Var(
                                                                    "f",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "struct",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IsAllocated",
                                            args: [
                                                Var(
                                                    "h",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "$StructGet",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                            Var(
                                                                "f",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsAllocated",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                            Var(
                                                "s",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "IsAllocated",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "$StructGet",
                                                    args: [
                                                        Var(
                                                            "s",
                                                        ),
                                                        Var(
                                                            "f",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "e",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "elements",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "IsAllocated",
                                            args: [
                                                Var(
                                                    "h",
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "RefArrayGet",
                                                        args: [
                                                            Var(
                                                                "e",
                                                            ),
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsAllocated",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                            Var(
                                                "e",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "IsAllocated",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "RefArrayGet",
                                                    args: [
                                                        Var(
                                                            "e",
                                                        ),
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "h",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        Var(
                                                            "$allocated",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsAllocated",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                            Var(
                                                "o",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "cast",
                                                args: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "h",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "o",
                                                                        ),
                                                                        Var(
                                                                            "$allocated",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "h",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "ClassRepr",
                                                                args: [
                                                                    Var(
                                                                        "c",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "$allocated",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Coercion(
                                    CoercionExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "cast",
                                                args: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "h",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "ClassRepr",
                                                                                args: [
                                                                                    Var(
                                                                                        "c",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        Var(
                                                                            "$allocated",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        coercions: [
                                            Type(
                                                Atom(
                                                    Bool,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "DeclType",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "field",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "class",
                ),
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "AsNonNullRefField",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "field",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "T",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "f",
                ),
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "AsRefField",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "field",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "T",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "f",
                ),
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "AsRangeField",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "field",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "T",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "f",
                ),
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "AsNonNullRefField",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "AsNonNullRefField",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "f",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "AsRefField",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "f",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "h",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "AsRefField",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "T",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "h",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "o",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "AsRefField",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "f",
                                                                                                ),
                                                                                                Var(
                                                                                                    "T",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "ref",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "h",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "AsNonNullRefField",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "T",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "h",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "o",
                                                                                ),
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "AsNonNullRefField",
                                                                                        args: [
                                                                                            Var(
                                                                                                "f",
                                                                                            ),
                                                                                            Var(
                                                                                                "T",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        App(
                                                            TypeApp {
                                                                head: "ref",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "h",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "AsRangeField",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "T",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "h",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "InRange",
                                        args: [
                                            Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "h",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "o",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "AsRangeField",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "f",
                                                                                                ),
                                                                                                Var(
                                                                                                    "T",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Int,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.String",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "s",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "h",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "System.String",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "h",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "s",
                                                                    ),
                                                                    Var(
                                                                        "$inv",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "s",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "h",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "s",
                                                                                ),
                                                                                Var(
                                                                                    "$writable",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        Atom(
                                                            Bool,
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "AsOwnedField",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "h",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "AsOwnedField",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "h",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "h",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "o",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "DeclType",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "AsOwnedField",
                                                                    args: [
                                                                        Var(
                                                                            "f",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Coercion(
                                                            CoercionExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "cast",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "h",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "o",
                                                                                                ),
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "AsOwnedField",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "f",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                coercions: [
                                                                    Type(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "ref",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "null",
                                                        ),
                                                    },
                                                ),
                                                op: Or,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "$typeof",
                                                                args: [
                                                                    Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "h",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "o",
                                                                                                            ),
                                                                                                            FuncCall(
                                                                                                                FuncCall {
                                                                                                                    target: "AsOwnedField",
                                                                                                                    args: [
                                                                                                                        Var(
                                                                                                                            "f",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    App(
                                                                                        TypeApp {
                                                                                            head: "ref",
                                                                                            tail: None,
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "System.String",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "h",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Coercion(
                                                                                            CoercionExpr {
                                                                                                expr: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "cast",
                                                                                                        args: [
                                                                                                            Array(
                                                                                                                ArrayExpr {
                                                                                                                    expr: Var(
                                                                                                                        "h",
                                                                                                                    ),
                                                                                                                    subscripts: [
                                                                                                                        ArraySubscript {
                                                                                                                            keys: [
                                                                                                                                Var(
                                                                                                                                    "o",
                                                                                                                                ),
                                                                                                                                FuncCall(
                                                                                                                                    FuncCall {
                                                                                                                                        target: "AsOwnedField",
                                                                                                                                        args: [
                                                                                                                                            Var(
                                                                                                                                                "f",
                                                                                                                                            ),
                                                                                                                                        ],
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                            value: None,
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                coercions: [
                                                                                                    Type(
                                                                                                        App(
                                                                                                            TypeApp {
                                                                                                                head: "ref",
                                                                                                                tail: None,
                                                                                                            },
                                                                                                        ),
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "h",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                        Var(
                                                            "$writable",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "h",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "h",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "o",
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "h",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        App(
                                                            TypeApp {
                                                                head: "name",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$typeof",
                                                args: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Box",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "any",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Unbox",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "any",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Unbox",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Box",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "p",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Unbox",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Box",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "p",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "heap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Box",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "$inv",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "Box",
                                                                    args: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                        Var(
                                                                            "p",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            Var(
                                                                "$inv",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$typeof",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Box",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "p",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "UnboxedType",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "BoxTester",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "p",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "typ",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "typ",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "BoxTester",
                                            args: [
                                                Var(
                                                    "p",
                                                ),
                                                Var(
                                                    "typ",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "UnboxedType",
                                                args: [
                                                    Var(
                                                        "p",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "typ",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "BoxTester",
                                                args: [
                                                    Var(
                                                        "p",
                                                    ),
                                                    Var(
                                                        "typ",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int16",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsValueType",
                    args: [
                        Var(
                            "System.Int16",
                        ),
                    ],
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int32",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsValueType",
                    args: [
                        Var(
                            "System.Int32",
                        ),
                    ],
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int64",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsValueType",
                    args: [
                        Var(
                            "System.Int64",
                        ),
                    ],
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Byte",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsValueType",
                    args: [
                        Var(
                            "System.Byte",
                        ),
                    ],
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int16.MinValue",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int16.MaxValue",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int32.MinValue",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int32.MaxValue",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int64.MinValue",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Int64.MaxValue",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "System.Int64.MinValue",
                    ),
                    op: Lt,
                    rhs: Var(
                        "System.Int32.MinValue",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "System.Int32.MinValue",
                    ),
                    op: Lt,
                    rhs: Var(
                        "System.Int16.MinValue",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "System.Int16.MinValue",
                    ),
                    op: Lt,
                    rhs: Var(
                        "System.Int16.MaxValue",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "System.Int16.MaxValue",
                    ),
                    op: Lt,
                    rhs: Var(
                        "System.Int32.MaxValue",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "System.Int32.MaxValue",
                    ),
                    op: Lt,
                    rhs: Var(
                        "System.Int64.MaxValue",
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "InRange",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "T",
                    ),
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "InRange",
                                        args: [
                                            Var(
                                                "i",
                                            ),
                                            Var(
                                                "System.Int16",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Int16.MinValue",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "i",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "System.Int16.MaxValue",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "InRange",
                                        args: [
                                            Var(
                                                "i",
                                            ),
                                            Var(
                                                "System.Int32",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Int32.MinValue",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "i",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "System.Int32.MaxValue",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "InRange",
                                        args: [
                                            Var(
                                                "i",
                                            ),
                                            Var(
                                                "System.Int64",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Int64.MinValue",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "i",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "System.Int64.MaxValue",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "InRange",
                                            args: [
                                                Var(
                                                    "i",
                                                ),
                                                Var(
                                                    "System.Byte",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "InRange",
                                        args: [
                                            Var(
                                                "i",
                                            ),
                                            Var(
                                                "System.Byte",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "i",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "256",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$RealToInt",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Real,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$IntToReal",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Real,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$SizeIs",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "name",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$IfThenElse",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "any",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "any",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "any",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$IfThenElse",
                                            args: [
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "b",
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$IfThenElse",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "$IfThenElse",
                                            args: [
                                                Var(
                                                    "b",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Var(
                                            "b",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "$IfThenElse",
                                                args: [
                                                    Var(
                                                        "b",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "#neg",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "#rneg",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Real,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Real,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "#rdiv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Real,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Real,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Real,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "#and",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "#or",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "#xor",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "#shl",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "#shr",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Div,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: Factor(
                                    Factor {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Mod,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                                op: Eq,
                                rhs: Term(
                                    Term {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Sub,
                                        rhs: Factor(
                                            Factor {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Div,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: Mul,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Mod,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Mod,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Mod,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Mod,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: Lt,
                                                rhs: Term(
                                                    Term {
                                                        lhs: Nat(
                                                            "0",
                                                        ),
                                                        op: Sub,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Term(
                                                    Term {
                                                        lhs: Nat(
                                                            "0",
                                                        ),
                                                        op: Sub,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: Lt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Mod,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Mod,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: Le,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Le,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Lt,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Lt,
                                                rhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Mod,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Mod,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: Le,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Term(
                                                Term {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Add,
                                                    rhs: Var(
                                                        "y",
                                                    ),
                                                },
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Factor(
                                            Factor {
                                                lhs: Term(
                                                    Term {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Add,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: Mod,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Factor(
                                            Factor {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Mod,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Term(
                                                Term {
                                                    lhs: Var(
                                                        "y",
                                                    ),
                                                    op: Add,
                                                    rhs: Var(
                                                        "x",
                                                    ),
                                                },
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Factor(
                                            Factor {
                                                lhs: Term(
                                                    Term {
                                                        lhs: Var(
                                                            "y",
                                                        ),
                                                        op: Add,
                                                        rhs: Var(
                                                            "x",
                                                        ),
                                                    },
                                                ),
                                                op: Mod,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Factor(
                                            Factor {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Mod,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Term(
                                                Term {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Sub,
                                                    rhs: Var(
                                                        "y",
                                                    ),
                                                },
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Term(
                                                    Term {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Sub,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Factor(
                                            Factor {
                                                lhs: Term(
                                                    Term {
                                                        lhs: Var(
                                                            "x",
                                                        ),
                                                        op: Sub,
                                                        rhs: Var(
                                                            "y",
                                                        ),
                                                    },
                                                ),
                                                op: Mod,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Factor(
                                            Factor {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Mod,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "a",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "b",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Factor(
                                        Factor {
                                            lhs: Var(
                                                "a",
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "d",
                                            ),
                                        },
                                    ),
                                    Factor(
                                        Factor {
                                            lhs: Var(
                                                "b",
                                            ),
                                            op: Mod,
                                            rhs: Var(
                                                "d",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Nat(
                                                            "2",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "d",
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Factor(
                                                            Factor {
                                                                lhs: Var(
                                                                    "a",
                                                                ),
                                                                op: Mod,
                                                                rhs: Var(
                                                                    "d",
                                                                ),
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Factor(
                                                            Factor {
                                                                lhs: Var(
                                                                    "b",
                                                                ),
                                                                op: Mod,
                                                                rhs: Var(
                                                                    "d",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "b",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Term(
                                            Term {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "d",
                                                ),
                                            },
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "b",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "#shl",
                                            args: [
                                                Var(
                                                    "i",
                                                ),
                                                Nat(
                                                    "0",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "#shl",
                                        args: [
                                            Var(
                                                "i",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "i",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "j",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "j",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "#shl",
                                                args: [
                                                    Var(
                                                        "i",
                                                    ),
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "j",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Factor(
                                            Factor {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "#shl",
                                                        args: [
                                                            Var(
                                                                "i",
                                                            ),
                                                            Var(
                                                                "j",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Mul,
                                                rhs: Nat(
                                                    "2",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "#shr",
                                            args: [
                                                Var(
                                                    "i",
                                                ),
                                                Nat(
                                                    "0",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "#shr",
                                        args: [
                                            Var(
                                                "i",
                                            ),
                                            Nat(
                                                "0",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "i",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "j",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "j",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "#shr",
                                                args: [
                                                    Var(
                                                        "i",
                                                    ),
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "j",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Factor(
                                            Factor {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "#shr",
                                                        args: [
                                                            Var(
                                                                "i",
                                                            ),
                                                            Var(
                                                                "j",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Div,
                                                rhs: Nat(
                                                    "2",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$UnknownRef",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.IComparable",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "Microsoft.Singularity.Applications.ThreadTest",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Threading.Thread",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Collections.IEnumerable",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Threading.ThreadStart",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.ICloneable",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.MulticastDelegate",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "System.Delegate",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral0",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral0",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral0",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral0",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral0",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "13",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral1",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral1",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral1",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral1",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral1",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "14",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral2",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral2",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral2",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral2",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral2",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "11",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral3",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral3",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral3",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral3",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral3",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "18",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral4",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral4",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral4",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral4",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral4",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "19",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral5",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral5",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral5",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral5",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral5",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "14",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral6",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral6",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral6",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral6",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral6",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "15",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral7",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral7",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral7",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral7",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral7",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "11",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral8",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral8",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral8",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral8",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral8",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "19",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral9",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral9",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral9",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral9",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral9",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "20",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral10",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral10",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral10",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral10",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral10",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "22",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral11",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral11",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral11",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral11",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral11",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "21",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral12",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral12",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral12",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral12",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral12",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "23",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "$stringLiteral13",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Logical(
                        LogicalExpr {
                            lhs: Quant(
                                QuantExpr {
                                    kind: ForAll,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "heap",
                                                        ],
                                                        type_: Map(
                                                            MapType {
                                                                type_params: [],
                                                                keys: [
                                                                    App(
                                                                        TypeApp {
                                                                            head: "ref",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                    App(
                                                                        TypeApp {
                                                                            head: "name",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                ],
                                                                value: App(
                                                                    TypeApp {
                                                                        head: "any",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [
                                            Trigger(
                                                [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$stringLiteral13",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            ),
                                        ],
                                        expr: Implies(
                                            ImpliesExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "IsHeap",
                                                        args: [
                                                            Var(
                                                                "heap",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$stringLiteral13",
                                                                                        ),
                                                                                        Var(
                                                                                            "$allocated",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            op: And,
                            rhs: FuncCall(
                                FuncCall {
                                    target: "$IsNotNull",
                                    args: [
                                        Var(
                                            "$stringLiteral13",
                                        ),
                                        Var(
                                            "System.String",
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "$Length",
                                    args: [
                                        Var(
                                            "$stringLiteral13",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Nat(
                                "22",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsClass",
                    args: [
                        Var(
                            "Microsoft.Singularity.Applications.ThreadTest",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Rel(
                        RelExpr {
                            lhs: Var(
                                "Microsoft.Singularity.Applications.ThreadTest",
                            ),
                            op: Subtype,
                            rhs: Var(
                                "System.Object",
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "AsDirectSubClass",
                                    args: [
                                        Var(
                                            "Microsoft.Singularity.Applications.ThreadTest",
                                        ),
                                        Var(
                                            "System.Object",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Var(
                                "Microsoft.Singularity.Applications.ThreadTest",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "Microsoft.Singularity.Applications.ThreadTest",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "Microsoft.Singularity.Applications.ThreadTest",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "Microsoft.Singularity.Applications.ThreadTest",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Object",
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Inv_Microsoft.Singularity.Applications.ThreadTest",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "object",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "heap",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "any",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "result",
                ),
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "this",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_Microsoft.Singularity.Applications.ThreadTest",
                                            args: [
                                                Var(
                                                    "this",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_Microsoft.Singularity.Applications.ThreadTest",
                                        args: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "name",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "Microsoft.Singularity.Applications.ThreadTest",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_Microsoft.Singularity.Applications.ThreadTest",
                                            args: [
                                                Var(
                                                    "$o",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "heap",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$o",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "Microsoft.Singularity.Applications.ThreadTest",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_Microsoft.Singularity.Applications.ThreadTest",
                                        args: [
                                            Var(
                                                "$o",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.Applications.ThreadTest.FirstThreadMethod",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$f",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$allocated",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Old(
                                                                                                    OldExpr {
                                                                                                        expr: Var(
                                                                                                            "$Heap",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "$o",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "$writable",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: BoolLit(
                                                                        true,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsStaticField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsDirectlyModifiableField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                },
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Old(
                                                OldExpr {
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "$o",
                                                                ),
                                                                Var(
                                                                    "$sharingMode",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.Applications.ThreadTest.FirstThreadMethod",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0o",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "i",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0i",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0b",
                                    ],
                                    type_: Atom(
                                        Bool,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "local1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "$Heap$block1513$LoopPreheader",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                App(
                                                    TypeApp {
                                                        head: "ref",
                                                        tail: None,
                                                    },
                                                ),
                                                App(
                                                    TypeApp {
                                                        head: "name",
                                                        tail: None,
                                                    },
                                                ),
                                            ],
                                            value: App(
                                                TypeApp {
                                                    head: "any",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "$Heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block1479",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block1479",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block1496",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block1496",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Console.WriteLine$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "Microsoft.Singularity.DebugStub.Print$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block1513$LoopPreheader",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block1513",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "$o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "ref",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap$block1513$LoopPreheader",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Coercion(
                                                                CoercionExpr {
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "cast",
                                                                            args: [
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "$Heap$block1513$LoopPreheader",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "$o",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "$allocated",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    coercions: [
                                                                        Type(
                                                                            Atom(
                                                                                Bool,
                                                                            ),
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Neq,
                                                            rhs: BoolLit(
                                                                true,
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "$o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "ref",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "$Heap$block1513$LoopPreheader",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "10",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0b",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Ge,
                                            rhs: Var(
                                                "stack0i",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "true1513to1547",
                                    "false1513to1530",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "true1513to1547",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack0b",
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block1547",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "false1513to1530",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack0b",
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            false,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block1530",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block1547",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral3",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Console.WriteLine$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral4",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "Microsoft.Singularity.DebugStub.Print$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block1530",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral2",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.Thread.Yield",
                                    params: [],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "local1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "i",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "local1",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "stack0i",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack0i",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "local1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block1513",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block1513$LoopPreheader",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap$block1513$LoopPreheader",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block1513",
                                ],
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsClass",
                    args: [
                        Var(
                            "System.String",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Rel(
                        RelExpr {
                            lhs: Var(
                                "System.String",
                            ),
                            op: Subtype,
                            rhs: Var(
                                "System.Object",
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "AsDirectSubClass",
                                    args: [
                                        Var(
                                            "System.String",
                                        ),
                                        Var(
                                            "System.Object",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Var(
                                "System.String",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsInterface",
                    args: [
                        Var(
                            "System.IComparable",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "System.IComparable",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "System.IComparable",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.IComparable",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Object",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "Implements",
                    args: [
                        Var(
                            "System.String",
                        ),
                        Var(
                            "System.IComparable",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsInterface",
                    args: [
                        Var(
                            "System.ICloneable",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "System.ICloneable",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "System.ICloneable",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.ICloneable",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Object",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "Implements",
                    args: [
                        Var(
                            "System.String",
                        ),
                        Var(
                            "System.ICloneable",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsInterface",
                    args: [
                        Var(
                            "System.Collections.IEnumerable",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "System.Collections.IEnumerable",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "System.Collections.IEnumerable",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Collections.IEnumerable",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Object",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "Implements",
                    args: [
                        Var(
                            "System.String",
                        ),
                        Var(
                            "System.Collections.IEnumerable",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "System.String",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "System.String",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "System.String",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "$K",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Or,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "System.Object",
                                                                        ),
                                                                        op: Subtype,
                                                                        rhs: Var(
                                                                            "$K",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: Or,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "System.IComparable",
                                                                ),
                                                                op: Subtype,
                                                                rhs: Var(
                                                                    "$K",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: Or,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "System.ICloneable",
                                                        ),
                                                        op: Subtype,
                                                        rhs: Var(
                                                            "$K",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Collections.IEnumerable",
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$U",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "$U",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "System.String",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "$U",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "System.String",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "$U",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "System.String",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Inv_System.String",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "object",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "heap",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "any",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "result",
                ),
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "this",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.String",
                                            args: [
                                                Var(
                                                    "this",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.String",
                                        args: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "name",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "System.String",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.String",
                                            args: [
                                                Var(
                                                    "$o",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "heap",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$o",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "System.String",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.String",
                                        args: [
                                            Var(
                                                "$o",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "System.Console.WriteLine$System.String",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "value$in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "value$in",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "value$in",
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: BoolLit(
                                                    true,
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "value$in",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "value$in",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$f",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$allocated",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Old(
                                                                                                    OldExpr {
                                                                                                        expr: Var(
                                                                                                            "$Heap",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "$o",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "$writable",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: BoolLit(
                                                                        true,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsStaticField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsDirectlyModifiableField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                },
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Old(
                                                OldExpr {
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "$o",
                                                                ),
                                                                Var(
                                                                    "$sharingMode",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.DebugStub.Print$System.String",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "value$in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "value$in",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "value$in",
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: BoolLit(
                                                    true,
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "value$in",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "value$in",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$f",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$allocated",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Old(
                                                                                                    OldExpr {
                                                                                                        expr: Var(
                                                                                                            "$Heap",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "$o",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "$writable",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: BoolLit(
                                                                        true,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsStaticField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsDirectlyModifiableField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                },
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Old(
                                                OldExpr {
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "$o",
                                                                ),
                                                                Var(
                                                                    "$sharingMode",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "System.Threading.Thread.Yield",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$f",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$allocated",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Old(
                                                                                                    OldExpr {
                                                                                                        expr: Var(
                                                                                                            "$Heap",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "$o",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "$writable",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: BoolLit(
                                                                        true,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsStaticField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsDirectlyModifiableField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                },
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Old(
                                                OldExpr {
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "$o",
                                                                ),
                                                                Var(
                                                                    "$sharingMode",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.Applications.ThreadTest.SecondThreadMethod",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$f",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$allocated",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Old(
                                                                                                    OldExpr {
                                                                                                        expr: Var(
                                                                                                            "$Heap",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "$o",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "$writable",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: BoolLit(
                                                                        true,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsStaticField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsDirectlyModifiableField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                },
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Old(
                                                OldExpr {
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "$o",
                                                                ),
                                                                Var(
                                                                    "$sharingMode",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.Applications.ThreadTest.SecondThreadMethod",
                type_params: [],
                var_params: [],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0o",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "i",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0i",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0b",
                                    ],
                                    type_: Atom(
                                        Bool,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "local1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "$Heap$block2516$LoopPreheader",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                App(
                                                    TypeApp {
                                                        head: "ref",
                                                        tail: None,
                                                    },
                                                ),
                                                App(
                                                    TypeApp {
                                                        head: "name",
                                                        tail: None,
                                                    },
                                                ),
                                            ],
                                            value: App(
                                                TypeApp {
                                                    head: "any",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "$Heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block2482",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block2482",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block2499",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block2499",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral5",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Console.WriteLine$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral6",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "Microsoft.Singularity.DebugStub.Print$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block2516$LoopPreheader",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block2516",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "$o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "ref",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap$block2516$LoopPreheader",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Coercion(
                                                                CoercionExpr {
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "cast",
                                                                            args: [
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "$Heap$block2516$LoopPreheader",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "$o",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "$allocated",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    coercions: [
                                                                        Type(
                                                                            Atom(
                                                                                Bool,
                                                                            ),
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Neq,
                                                            rhs: BoolLit(
                                                                true,
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "$o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "ref",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "$Heap$block2516$LoopPreheader",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "10",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0b",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Ge,
                                            rhs: Var(
                                                "stack0i",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "true2516to2550",
                                    "false2516to2533",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "true2516to2550",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack0b",
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block2550",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "false2516to2533",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack0b",
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            false,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block2533",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block2550",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral8",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Console.WriteLine$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral9",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "Microsoft.Singularity.DebugStub.Print$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block2533",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral7",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.Thread.Yield",
                                    params: [],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "local1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "i",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "local1",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "stack0i",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack0i",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "local1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block2516",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block2516$LoopPreheader",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap$block2516$LoopPreheader",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block2516",
                                ],
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.Applications.ThreadTest.Main$System.String.array",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "args$in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "$result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "args$in",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "args$in",
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: BoolLit(
                                                    true,
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "args$in",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "args$in",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsAllocated",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                    Var(
                                        "$result",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$f",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$allocated",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Old(
                                                                                                    OldExpr {
                                                                                                        expr: Var(
                                                                                                            "$Heap",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "$o",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "$writable",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: BoolLit(
                                                                        true,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsStaticField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsDirectlyModifiableField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                },
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Old(
                                                OldExpr {
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "$o",
                                                                ),
                                                                Var(
                                                                    "$sharingMode",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.Applications.ThreadTest.Main$System.String.array",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "args$in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "$result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "args",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0o",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack1o",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack50000o",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "t1",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "t2",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "i",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0i",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "stack0b",
                                    ],
                                    type_: Atom(
                                        Bool,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "local3",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "return.value",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "SS$Display.Return.Local",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "$Heap$block3825$LoopPreheader",
                                    ],
                                    type_: Map(
                                        MapType {
                                            type_params: [],
                                            keys: [
                                                App(
                                                    TypeApp {
                                                        head: "ref",
                                                        tail: None,
                                                    },
                                                ),
                                                App(
                                                    TypeApp {
                                                        head: "name",
                                                        tail: None,
                                                    },
                                                ),
                                            ],
                                            value: App(
                                                TypeApp {
                                                    head: "any",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "$Heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "args",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "args$in",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "$Is",
                                        args: [
                                            Var(
                                                "args",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "RefArray",
                                                    args: [
                                                        Var(
                                                            "System.String",
                                                        ),
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "args$in",
                                                                                ),
                                                                                Var(
                                                                                    "$allocated",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        Atom(
                                                            Bool,
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block3791",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block3791",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block3808",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block3808",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "null",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "stack1o",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "stack50000o",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Coercion(
                                                            CoercionExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "cast",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "$Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "stack50000o",
                                                                                                ),
                                                                                                Var(
                                                                                                    "$allocated",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                coercions: [
                                                                    Type(
                                                                        Atom(
                                                                            Bool,
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: BoolLit(
                                                            false,
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "stack50000o",
                                                        ),
                                                        op: Neq,
                                                        rhs: Var(
                                                            "null",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "stack50000o",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "System.Threading.ThreadStart",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap",
                                        subscripts: [
                                            [
                                                Var(
                                                    "stack50000o",
                                                ),
                                                Var(
                                                    "$allocated",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack50000o",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.ThreadStart..ctor$System.Object$System.IntPtr",
                                    params: [
                                        Var(
                                            "stack50000o",
                                        ),
                                        Var(
                                            "stack0o",
                                        ),
                                        Var(
                                            "stack1o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack50000o",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "stack50000o",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Coercion(
                                                            CoercionExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "cast",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "$Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "stack50000o",
                                                                                                ),
                                                                                                Var(
                                                                                                    "$allocated",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                coercions: [
                                                                    Type(
                                                                        Atom(
                                                                            Bool,
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: BoolLit(
                                                            false,
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "stack50000o",
                                                        ),
                                                        op: Neq,
                                                        rhs: Var(
                                                            "null",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "stack50000o",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "System.Threading.Thread",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap",
                                        subscripts: [
                                            [
                                                Var(
                                                    "stack50000o",
                                                ),
                                                Var(
                                                    "$allocated",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack50000o",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.Thread..ctor$System.Threading.ThreadStart",
                                    params: [
                                        Var(
                                            "stack50000o",
                                        ),
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack50000o",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "t1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack0o",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "null",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "stack1o",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "stack50000o",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Coercion(
                                                            CoercionExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "cast",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "$Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "stack50000o",
                                                                                                ),
                                                                                                Var(
                                                                                                    "$allocated",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                coercions: [
                                                                    Type(
                                                                        Atom(
                                                                            Bool,
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: BoolLit(
                                                            false,
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "stack50000o",
                                                        ),
                                                        op: Neq,
                                                        rhs: Var(
                                                            "null",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "stack50000o",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "System.Threading.ThreadStart",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap",
                                        subscripts: [
                                            [
                                                Var(
                                                    "stack50000o",
                                                ),
                                                Var(
                                                    "$allocated",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack50000o",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.ThreadStart..ctor$System.Object$System.IntPtr",
                                    params: [
                                        Var(
                                            "stack50000o",
                                        ),
                                        Var(
                                            "stack0o",
                                        ),
                                        Var(
                                            "stack1o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack50000o",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "stack50000o",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Coercion(
                                                            CoercionExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "cast",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "$Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "stack50000o",
                                                                                                ),
                                                                                                Var(
                                                                                                    "$allocated",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                coercions: [
                                                                    Type(
                                                                        Atom(
                                                                            Bool,
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: BoolLit(
                                                            false,
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "stack50000o",
                                                        ),
                                                        op: Neq,
                                                        rhs: Var(
                                                            "null",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "stack50000o",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "System.Threading.Thread",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap",
                                        subscripts: [
                                            [
                                                Var(
                                                    "stack50000o",
                                                ),
                                                Var(
                                                    "$allocated",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack50000o",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.Thread..ctor$System.Threading.ThreadStart",
                                    params: [
                                        Var(
                                            "stack50000o",
                                        ),
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack50000o",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "t2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack0o",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral10",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Console.WriteLine$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "t1",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.Thread.Start",
                                    params: [
                                        Var(
                                            "t1",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral11",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Console.WriteLine$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral12",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Console.WriteLine$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "t2",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.Thread.Start",
                                    params: [
                                        Var(
                                            "t2",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0o",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$stringLiteral13",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Console.WriteLine$System.String",
                                    params: [
                                        Var(
                                            "stack0o",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block3825$LoopPreheader",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block3825",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "$o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "ref",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap$block3825$LoopPreheader",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Coercion(
                                                                CoercionExpr {
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "cast",
                                                                            args: [
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "$Heap$block3825$LoopPreheader",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "$o",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "$allocated",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    coercions: [
                                                                        Type(
                                                                            Atom(
                                                                                Bool,
                                                                            ),
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Neq,
                                                            rhs: BoolLit(
                                                                true,
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "$o",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "ref",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "$Heap$block3825$LoopPreheader",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "30",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0b",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "i",
                                            ),
                                            op: Ge,
                                            rhs: Var(
                                                "stack0i",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "true3825to3859",
                                    "false3825to3842",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "true3825to3859",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack0b",
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block3859",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "false3825to3842",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "stack0b",
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            false,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block3842",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block3859",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "return.value",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block3876",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block3842",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Threading.Thread.Yield",
                                    params: [],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "local3",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "i",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "local3",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "stack0i",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack0i",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "local3",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block3825",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block3876",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "SS$Display.Return.Local",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "return.value",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "stack0i",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "return.value",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "stack0i",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block3825$LoopPreheader",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap$block3825$LoopPreheader",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block3825",
                                ],
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsClass",
                    args: [
                        Var(
                            "System.Threading.ThreadStart",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsClass",
                    args: [
                        Var(
                            "System.MulticastDelegate",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsClass",
                    args: [
                        Var(
                            "System.Delegate",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Rel(
                        RelExpr {
                            lhs: Var(
                                "System.Delegate",
                            ),
                            op: Subtype,
                            rhs: Var(
                                "System.Object",
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "AsDirectSubClass",
                                    args: [
                                        Var(
                                            "System.Delegate",
                                        ),
                                        Var(
                                            "System.Object",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Var(
                                "System.Delegate",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "Implements",
                    args: [
                        Var(
                            "System.Delegate",
                        ),
                        Var(
                            "System.ICloneable",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "System.Delegate",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "System.Delegate",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "System.Delegate",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "$K",
                                                        ),
                                                    },
                                                ),
                                                op: Or,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "System.Object",
                                                        ),
                                                        op: Subtype,
                                                        rhs: Var(
                                                            "$K",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.ICloneable",
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Inv_System.Delegate",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "object",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "heap",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "any",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "result",
                ),
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "this",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.Delegate",
                                            args: [
                                                Var(
                                                    "this",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.Delegate",
                                        args: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "name",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "System.Delegate",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.Delegate",
                                            args: [
                                                Var(
                                                    "$o",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "heap",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$o",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "System.Delegate",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.Delegate",
                                        args: [
                                            Var(
                                                "$o",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Rel(
                        RelExpr {
                            lhs: Var(
                                "System.MulticastDelegate",
                            ),
                            op: Subtype,
                            rhs: Var(
                                "System.Delegate",
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "AsDirectSubClass",
                                    args: [
                                        Var(
                                            "System.MulticastDelegate",
                                        ),
                                        Var(
                                            "System.Delegate",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Var(
                                "System.MulticastDelegate",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "System.MulticastDelegate",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "System.MulticastDelegate",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.MulticastDelegate",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Delegate",
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Inv_System.MulticastDelegate",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "object",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "heap",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "any",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "result",
                ),
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "this",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.MulticastDelegate",
                                            args: [
                                                Var(
                                                    "this",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.MulticastDelegate",
                                        args: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "name",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "System.MulticastDelegate",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.MulticastDelegate",
                                            args: [
                                                Var(
                                                    "$o",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "heap",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$o",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "System.MulticastDelegate",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.MulticastDelegate",
                                        args: [
                                            Var(
                                                "$o",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Rel(
                        RelExpr {
                            lhs: Var(
                                "System.Threading.ThreadStart",
                            ),
                            op: Subtype,
                            rhs: Var(
                                "System.MulticastDelegate",
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "AsDirectSubClass",
                                    args: [
                                        Var(
                                            "System.Threading.ThreadStart",
                                        ),
                                        Var(
                                            "System.MulticastDelegate",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Var(
                                "System.Threading.ThreadStart",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "System.Threading.ThreadStart",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "System.Threading.ThreadStart",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Threading.ThreadStart",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.MulticastDelegate",
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$U",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "$U",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "System.Threading.ThreadStart",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "$U",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "System.Threading.ThreadStart",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "$U",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "System.Threading.ThreadStart",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Inv_System.Threading.ThreadStart",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "object",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "heap",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "any",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "result",
                ),
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "this",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.Threading.ThreadStart",
                                            args: [
                                                Var(
                                                    "this",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.Threading.ThreadStart",
                                        args: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "name",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "System.Threading.ThreadStart",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.Threading.ThreadStart",
                                            args: [
                                                Var(
                                                    "$o",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "heap",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$o",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "System.Threading.ThreadStart",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.Threading.ThreadStart",
                                        args: [
                                            Var(
                                                "$o",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "System.Threading.ThreadStart..ctor$System.Object$System.IntPtr",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "object$in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "method$in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$f",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$allocated",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Old(
                                                                                                    OldExpr {
                                                                                                        expr: Var(
                                                                                                            "$Heap",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "$o",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "$writable",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: BoolLit(
                                                                        true,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsStaticField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsDirectlyModifiableField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                },
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Old(
                                                OldExpr {
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "$o",
                                                                ),
                                                                Var(
                                                                    "$sharingMode",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$writable",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        Atom(
                                                            Bool,
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        App(
                                                            TypeApp {
                                                                head: "name",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "System.Threading.ThreadStart",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: FuncCall(
                FuncCall {
                    target: "$IsClass",
                    args: [
                        Var(
                            "System.Threading.Thread",
                        ),
                    ],
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Logical(
                LogicalExpr {
                    lhs: Rel(
                        RelExpr {
                            lhs: Var(
                                "System.Threading.Thread",
                            ),
                            op: Subtype,
                            rhs: Var(
                                "System.Object",
                            ),
                        },
                    ),
                    op: And,
                    rhs: Rel(
                        RelExpr {
                            lhs: FuncCall(
                                FuncCall {
                                    target: "AsDirectSubClass",
                                    args: [
                                        Var(
                                            "System.Threading.Thread",
                                        ),
                                        Var(
                                            "System.Object",
                                        ),
                                    ],
                                },
                            ),
                            op: Eq,
                            rhs: Var(
                                "System.Threading.Thread",
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$K",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "System.Threading.Thread",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "$K",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "System.Threading.Thread",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "$K",
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Threading.Thread",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Object",
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "$K",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$U",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "name",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "$U",
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "System.Threading.Thread",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "$U",
                                        ),
                                        op: Subtype,
                                        rhs: Var(
                                            "System.Threading.Thread",
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "$U",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "System.Threading.Thread",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Inv_System.Threading.Thread",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "object",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "heap",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                                App(
                                    TypeApp {
                                        head: "name",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "any",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: Some(
                    "result",
                ),
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "this",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.Threading.Thread",
                                            args: [
                                                Var(
                                                    "this",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.Threading.Thread",
                                        args: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "any",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Rel(
                                        RelExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            App(
                                                                TypeApp {
                                                                    head: "name",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Subtype,
                                            rhs: Var(
                                                "System.Threading.Thread",
                                            ),
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Inv_System.Threading.Thread",
                                            args: [
                                                Var(
                                                    "$o",
                                                ),
                                                Var(
                                                    "heap",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsHeap",
                                                args: [
                                                    Var(
                                                        "heap",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "$o",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Subtype,
                                                rhs: Var(
                                                    "System.Threading.Thread",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Inv_System.Threading.Thread",
                                        args: [
                                            Var(
                                                "$o",
                                            ),
                                            Var(
                                                "heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "System.Threading.Thread..ctor$System.Threading.ThreadStart",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "start$in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "start$in",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "start$in",
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: BoolLit(
                                                    true,
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "start$in",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "$typeof",
                                                        args: [
                                                            Var(
                                                                "start$in",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "$f",
                                                                                            ),
                                                                                            op: Neq,
                                                                                            rhs: Var(
                                                                                                "$inv",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            op: Neq,
                                                                                            rhs: Var(
                                                                                                "null",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Coercion(
                                                                                        CoercionExpr {
                                                                                            expr: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "cast",
                                                                                                    args: [
                                                                                                        Array(
                                                                                                            ArrayExpr {
                                                                                                                expr: Old(
                                                                                                                    OldExpr {
                                                                                                                        expr: Var(
                                                                                                                            "$Heap",
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                                subscripts: [
                                                                                                                    ArraySubscript {
                                                                                                                        keys: [
                                                                                                                            Var(
                                                                                                                                "$o",
                                                                                                                            ),
                                                                                                                            Var(
                                                                                                                                "$allocated",
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                        value: None,
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            coercions: [
                                                                                                Type(
                                                                                                    Atom(
                                                                                                        Bool,
                                                                                                    ),
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: BoolLit(
                                                                                        true,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$writable",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "IsStaticField",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: Or,
                                                                    rhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "IsDirectlyModifiableField",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "$o",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "this",
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "System.Threading.Thread",
                                                                            ),
                                                                            op: Subtype,
                                                                            rhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "DeclType",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "$o",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "this",
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Old(
                                                                        OldExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                        },
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "$o",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "this",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$sharingMode",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$writable",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        Atom(
                                                            Bool,
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        App(
                                                            TypeApp {
                                                                head: "name",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "System.Threading.Thread",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "$Heap",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "this",
                                                    ),
                                                    Var(
                                                        "$sharingMode",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "$SharingMode_Unshared",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "System.Threading.Thread.Start",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$writable",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        Atom(
                                                            Bool,
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        App(
                                                            TypeApp {
                                                                head: "name",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$typeof",
                                                args: [
                                                    Var(
                                                        "this",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$f",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "$inv",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    op: Neq,
                                                                                    rhs: Var(
                                                                                        "null",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$allocated",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Coercion(
                                                                        CoercionExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "cast",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Old(
                                                                                                    OldExpr {
                                                                                                        expr: Var(
                                                                                                            "$Heap",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "$o",
                                                                                                            ),
                                                                                                            Var(
                                                                                                                "$writable",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            coercions: [
                                                                                Type(
                                                                                    Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: BoolLit(
                                                                        true,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsStaticField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsDirectlyModifiableField",
                                                                            args: [
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Old(
                                                                OldExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                },
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$inv",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Old(
                                                OldExpr {
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "$o",
                                                                ),
                                                                Var(
                                                                    "$sharingMode",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.Applications.ThreadTest..ctor",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "$f",
                                                                                            ),
                                                                                            op: Neq,
                                                                                            rhs: Var(
                                                                                                "$inv",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            op: Neq,
                                                                                            rhs: Var(
                                                                                                "null",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Coercion(
                                                                                        CoercionExpr {
                                                                                            expr: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "cast",
                                                                                                    args: [
                                                                                                        Array(
                                                                                                            ArrayExpr {
                                                                                                                expr: Old(
                                                                                                                    OldExpr {
                                                                                                                        expr: Var(
                                                                                                                            "$Heap",
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                                subscripts: [
                                                                                                                    ArraySubscript {
                                                                                                                        keys: [
                                                                                                                            Var(
                                                                                                                                "$o",
                                                                                                                            ),
                                                                                                                            Var(
                                                                                                                                "$allocated",
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                        value: None,
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            coercions: [
                                                                                                Type(
                                                                                                    Atom(
                                                                                                        Bool,
                                                                                                    ),
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: BoolLit(
                                                                                        true,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$writable",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "IsStaticField",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: Or,
                                                                    rhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "IsDirectlyModifiableField",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "$o",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "this",
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "Microsoft.Singularity.Applications.ThreadTest",
                                                                            ),
                                                                            op: Subtype,
                                                                            rhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "DeclType",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "$o",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "this",
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Old(
                                                                        OldExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                        },
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "$o",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "this",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$sharingMode",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$writable",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        Atom(
                                                            Bool,
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        App(
                                                            TypeApp {
                                                                head: "name",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "Microsoft.Singularity.Applications.ThreadTest",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "$Heap",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "this",
                                                    ),
                                                    Var(
                                                        "$sharingMode",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "$SharingMode_Unshared",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Microsoft.Singularity.Applications.ThreadTest..ctor",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "IsHeap",
                                        args: [
                                            Var(
                                                "$Heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "$IsNotNull",
                                        args: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "Microsoft.Singularity.Applications.ThreadTest",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$allocated",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        Atom(
                                                            Bool,
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "this",
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: BoolLit(
                                                    true,
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "this",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "System.Object",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block4777",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block4777",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "block4794",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "block4794",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "this",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [],
                                    target: "System.Object..ctor",
                                    params: [
                                        Var(
                                            "this",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "this",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "this",
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: BoolLit(
                                                    true,
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "System.Object",
                                                ),
                                                op: Subtype,
                                                rhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "this",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "this",
                                                                                        ),
                                                                                        Var(
                                                                                            "$writable",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                Atom(
                                                                    Bool,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: BoolLit(
                                                    true,
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Coercion(
                                                    CoercionExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "cast",
                                                                args: [
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "this",
                                                                                        ),
                                                                                        Var(
                                                                                            "$inv",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        coercions: [
                                                            Type(
                                                                App(
                                                                    TypeApp {
                                                                        head: "name",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "System.Object",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "Inv_Microsoft.Singularity.Applications.ThreadTest",
                                        args: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "$Heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap",
                                        subscripts: [
                                            [
                                                Var(
                                                    "this",
                                                ),
                                                Var(
                                                    "$inv",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "Microsoft.Singularity.Applications.ThreadTest",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "System.Object..ctor",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "IsHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$f",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "name",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "$f",
                                                                                            ),
                                                                                            op: Neq,
                                                                                            rhs: Var(
                                                                                                "$inv",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            op: Neq,
                                                                                            rhs: Var(
                                                                                                "null",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Coercion(
                                                                                        CoercionExpr {
                                                                                            expr: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "cast",
                                                                                                    args: [
                                                                                                        Array(
                                                                                                            ArrayExpr {
                                                                                                                expr: Old(
                                                                                                                    OldExpr {
                                                                                                                        expr: Var(
                                                                                                                            "$Heap",
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                                subscripts: [
                                                                                                                    ArraySubscript {
                                                                                                                        keys: [
                                                                                                                            Var(
                                                                                                                                "$o",
                                                                                                                            ),
                                                                                                                            Var(
                                                                                                                                "$allocated",
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                        value: None,
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            coercions: [
                                                                                                Type(
                                                                                                    Atom(
                                                                                                        Bool,
                                                                                                    ),
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: BoolLit(
                                                                                        true,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Coercion(
                                                                                CoercionExpr {
                                                                                    expr: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "cast",
                                                                                            args: [
                                                                                                Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Old(
                                                                                                            OldExpr {
                                                                                                                expr: Var(
                                                                                                                    "$Heap",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "$o",
                                                                                                                    ),
                                                                                                                    Var(
                                                                                                                        "$writable",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    coercions: [
                                                                                        Type(
                                                                                            Atom(
                                                                                                Bool,
                                                                                            ),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: BoolLit(
                                                                                true,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "IsStaticField",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: Or,
                                                                    rhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "IsDirectlyModifiableField",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "$o",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "this",
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "System.Object",
                                                                            ),
                                                                            op: Subtype,
                                                                            rhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "DeclType",
                                                                                    args: [
                                                                                        Var(
                                                                                            "$f",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$f",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$f",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "$o",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "this",
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Old(
                                                                        OldExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                        },
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "cast",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Old(
                                                                                    OldExpr {
                                                                                        expr: Var(
                                                                                            "$Heap",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "$o",
                                                                                            ),
                                                                                            Var(
                                                                                                "$allocated",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    Atom(
                                                                        Bool,
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: BoolLit(
                                                        true,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Coercion(
                                                CoercionExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "cast",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "$o",
                                                                                    ),
                                                                                    Var(
                                                                                        "$allocated",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    coercions: [
                                                        Type(
                                                            Atom(
                                                                Bool,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "$o",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "$o",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "this",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Old(
                                                        OldExpr {
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "$o",
                                                                                ),
                                                                                Var(
                                                                                    "$sharingMode",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "$Heap",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "$o",
                                                                        ),
                                                                        Var(
                                                                            "$sharingMode",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$writable",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        Atom(
                                                            Bool,
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: BoolLit(
                                            true,
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Coercion(
                                            CoercionExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "cast",
                                                        args: [
                                                            Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "$Heap",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "this",
                                                                                ),
                                                                                Var(
                                                                                    "$inv",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                coercions: [
                                                    Type(
                                                        App(
                                                            TypeApp {
                                                                head: "name",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "System.Object",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "$Heap",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "this",
                                                    ),
                                                    Var(
                                                        "$sharingMode",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "$SharingMode_Unshared",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "name",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "any",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "null",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
]

[Printed]
type elements;

type struct;

var $Heap: [ref, name]any;

function cast<S, T>(S): T;

function IsHeap(h: [ref, name]any): bool;

const unique $allocated: name;

const unique $elements: name;

const unique $inv: name;

const unique $writable: name;

const unique $sharingMode: name;

const unique $SharingMode_Unshared: name;

const unique $SharingMode_LockProtected: name;

function ClassRepr(class: name): ref;

axiom (forall c0: name, c1: name :: c0 != c1 ==> ClassRepr(c0) != ClassRepr(c1));

axiom (forall T: name :: !($typeof(ClassRepr(T)) <: System.Object));

axiom (forall T: name :: ClassRepr(T) != null);

axiom (forall T: name, h: [ref, name]any :: {h[ClassRepr(T), $writable]} IsHeap(h) ==> cast(h[ClassRepr(T), $writable]) : bool);

function IsDirectlyModifiableField(f: name): bool;

axiom !IsDirectlyModifiableField($allocated);

axiom IsDirectlyModifiableField($elements);

axiom !IsDirectlyModifiableField($inv);

axiom !IsDirectlyModifiableField($writable);

function IsStaticField(f: name): bool;

axiom !IsStaticField($allocated);

axiom !IsStaticField($elements);

axiom !IsStaticField($inv);

axiom !IsStaticField($writable);

function ValueArrayGet(elements, int): any;

function ValueArraySet(elements, int, any): elements;

function RefArrayGet(elements, int): ref;

function RefArraySet(elements, int, ref): elements;

axiom (forall A: elements, i: int, x: any :: ValueArrayGet(ValueArraySet(A, i, x), i) == x);

axiom (forall A: elements, i: int, j: int, x: any :: i != j ==> ValueArrayGet(ValueArraySet(A, i, x), j) == ValueArrayGet(A, j));

axiom (forall A: elements, i: int, x: ref :: RefArrayGet(RefArraySet(A, i, x), i) == x);

axiom (forall A: elements, i: int, j: int, x: ref :: i != j ==> RefArrayGet(RefArraySet(A, i, x), j) == RefArrayGet(A, j));

function ArrayIndex(arr: ref, dim: int, indexAtDim: int, remainingIndexContribution: int): int;

axiom (forall a: ref, d: int, x: int, y: int, x': int, y': int :: ArrayIndex(a, d, x, y) == ArrayIndex(a, d, x', y') ==> x == x' && y == y');

axiom (forall a: ref, T: name, i: int, r: int, heap: [ref, name]any :: $typeof(a) <: RefArray(T, r) ==> $Is(RefArrayGet(cast(heap[a, $elements]) : elements, i), T));

function $Rank(ref): int;

axiom (forall a: ref :: 1 <= $Rank(a));

axiom (forall a: ref, T: name, r: int :: {$Is(a, ValueArray(T, r))} $Is(a, ValueArray(T, r)) ==> $Rank(a) == r);

axiom (forall a: ref, T: name, r: int :: {$Is(a, RefArray(T, r))} $Is(a, RefArray(T, r)) ==> $Rank(a) == r);

function $Length(ref): int;

axiom (forall a: ref :: {$Length(a)} 0 <= $Length(a));

function $DimLength(ref, int): int;

axiom (forall a: ref, i: int :: 0 <= $DimLength(a, i));

axiom (forall a: ref :: $Rank(a) == 1 ==> $DimLength(a, 0) == $Length(a));

function $LBound(ref, int): int;

function $UBound(ref, int): int;

axiom (forall a: ref, i: int :: {$LBound(a, i)} $LBound(a, i) == 0);

axiom (forall a: ref, i: int :: {$UBound(a, i)} $UBound(a, i) == $DimLength(a, i) - 1);

const unique System.Array: name;

axiom $IsClass(System.Array);

axiom System.Array <: System.Object;

function $ElementType(name): name;

function ValueArray(elementType: name, rank: int): name;

axiom (forall T: name, r: int :: {ValueArray(T, r)} ValueArray(T, r) <: System.Array);

function RefArray(elementType: name, rank: int): name;

axiom (forall T: name, r: int :: {RefArray(T, r)} RefArray(T, r) <: System.Array);

axiom (forall T: name, U: name, r: int :: U <: T ==> RefArray(U, r) <: RefArray(T, r));

axiom (forall A: name, r: int :: $ElementType(ValueArray(A, r)) == A);

axiom (forall A: name, r: int :: $ElementType(RefArray(A, r)) == A);

axiom (forall A: name, r: int, T: name :: {T <: RefArray(A, r)} T <: RefArray(A, r) ==> T == RefArray($ElementType(T), r) && $ElementType(T) <: A);

axiom (forall A: name, r: int, T: name :: {T <: ValueArray(A, r)} T <: ValueArray(A, r) ==> T == ValueArray(A, r));

axiom (forall A: name, r: int, T: name :: RefArray(A, r) <: T ==> System.Array <: T || (T == RefArray($ElementType(T), r) && A <: $ElementType(T)));

axiom (forall A: name, r: int, T: name :: ValueArray(A, r) <: T ==> System.Array <: T || T == ValueArray(A, r));

function $ArrayPtr(elementType: name): name;

function $StructGet(struct, name): any;

function $StructSet(struct, name, any): struct;

axiom (forall s: struct, f: name, x: any :: $StructGet($StructSet(s, f, x), f) == x);

axiom (forall s: struct, f: name, f': name, x: any :: f != f' ==> $StructGet($StructSet(s, f, x), f') == $StructGet(s, f'));

function ZeroInit(s: struct, typ: name): bool;

function $typeof(ref): name;

function Implements(class: name, interface: name): bool;

axiom (forall T: name, J: name :: {Implements(T, J)} Implements(T, J) ==> T <: J);

function InterfaceExtends(subIntf: name, superIntf: name): bool;

axiom (forall J: name, K: name :: {InterfaceExtends(J, K)} InterfaceExtends(J, K) ==> J <: K);

function $IsClass(name): bool;

axiom (forall C: name :: {$IsClass(C)} $IsClass(C) ==> C <: C);

function AsDirectSubClass(sub: name, base: name) returns (sub': name);

function OneClassDown(sub: name, base: name) returns (directSub: name);

axiom (forall A: name, B: name, C: name :: {C <: AsDirectSubClass(B, A)} C <: AsDirectSubClass(B, A) ==> OneClassDown(C, A) == B);

function $IsInterface(name): bool;

axiom (forall J: name :: {$IsInterface(J)} $IsInterface(J) ==> J <: System.Object);

function $IsValueType(name): bool;

axiom (forall T: name :: $IsValueType(T) ==> (forall U: name :: T <: U ==> T == U) && (forall U: name :: U <: T ==> T == U));

const unique System.Object: name;

axiom $IsClass(System.Object);

function $IsTokenForType(struct, name): bool;

function TypeObject(name): ref;

const unique System.Type: name;

axiom System.Type <: System.Object;

axiom (forall T: name :: {TypeObject(T)} $IsNotNull(TypeObject(T), System.Type));

function $Is(ref, name): bool;

axiom (forall o: ref, T: name :: {$Is(o, T)} $Is(o, T) <==> o == null || $typeof(o) <: T);

function $IsNotNull(ref, name): bool;

axiom (forall o: ref, T: name :: {$IsNotNull(o, T)} $IsNotNull(o, T) <==> o != null && $Is(o, T));

function $As(ref, name): ref;

axiom (forall o: ref, T: name :: $Is(o, T) ==> $As(o, T) == o);

axiom (forall o: ref, T: name :: !$Is(o, T) ==> $As(o, T) == null);

axiom (forall heap: [ref, name]any, o: ref, A: name, r: int :: $Is(o, RefArray(A, r)) ==> heap[o, $inv] == $typeof(o));

axiom (forall heap: [ref, name]any, o: ref, A: name, r: int :: $Is(o, ValueArray(A, r)) ==> heap[o, $inv] == $typeof(o));

function IsAllocated(h: [ref, name]any, o: any): bool;

axiom (forall h: [ref, name]any, o: ref, f: name :: {IsAllocated(h, h[o, f])} IsHeap(h) ==> IsAllocated(h, h[o, f]));

axiom (forall h: [ref, name]any, s: struct, f: name :: {IsAllocated(h, $StructGet(s, f))} IsAllocated(h, s) ==> IsAllocated(h, $StructGet(s, f)));

axiom (forall h: [ref, name]any, e: elements, i: int :: {IsAllocated(h, RefArrayGet(e, i))} IsAllocated(h, e) ==> IsAllocated(h, RefArrayGet(e, i)));

axiom (forall h: [ref, name]any, o: ref :: {h[o, $allocated]} IsAllocated(h, o) ==> cast(h[o, $allocated]) : bool);

axiom (forall h: [ref, name]any, c: name :: {h[ClassRepr(c), $allocated]} IsHeap(h) ==> cast(h[ClassRepr(c), $allocated]) : bool);

function DeclType(field: name) returns (class: name);

function AsNonNullRefField(field: name, T: name) returns (f: name);

function AsRefField(field: name, T: name) returns (f: name);

function AsRangeField(field: name, T: name) returns (f: name);

axiom (forall f: name, T: name :: {AsNonNullRefField(f, T)} AsNonNullRefField(f, T) == f ==> AsRefField(f, T) == f);

axiom (forall h: [ref, name]any, o: ref, f: name, T: name :: {h[o, AsRefField(f, T)]} IsHeap(h) ==> $Is(cast(h[o, AsRefField(f, T)]) : ref, T));

axiom (forall h: [ref, name]any, o: ref, f: name, T: name :: {h[o, AsNonNullRefField(f, T)]} IsHeap(h) ==> cast(h[o, AsNonNullRefField(f, T)]) : ref != null);

axiom (forall h: [ref, name]any, o: ref, f: name, T: name :: {h[o, AsRangeField(f, T)]} IsHeap(h) ==> InRange(cast(h[o, AsRangeField(f, T)]) : int, T));

const unique System.String: name;

axiom (forall h: [ref, name]any, s: ref :: IsHeap(h) && $typeof(s) == System.String ==> h[s, $inv] == $typeof(s) && cast(h[s, $writable]) : bool);

function AsOwnedField(f: name): name;

axiom (forall h: [ref, name]any, o: ref, f: name :: {h[o, AsOwnedField(f)]} IsHeap(h) && cast(h[o, $inv]) : name <: DeclType(AsOwnedField(f)) ==> cast(h[o, AsOwnedField(f)]) : ref == null || $typeof(cast(h[o, AsOwnedField(f)]) : ref) == System.String || !cast(h[cast(h[o, AsOwnedField(f)]) : ref, $writable]) : bool);

axiom (forall h: [ref, name]any, o: ref :: {h[o, $writable]} IsHeap(h) && !cast(h[o, $writable]) : bool ==> cast(h[o, $inv]) : name == $typeof(o));

function Box(any, ref): ref;

function Unbox(ref): any;

axiom (forall x: any, p: ref :: {Unbox(Box(x, p))} Unbox(Box(x, p)) == x);

axiom (forall heap: [ref, name]any, x: any, p: ref :: {heap[Box(x, p), $inv]} IsHeap(heap) ==> heap[Box(x, p), $inv] == $typeof(Box(x, p)));

function UnboxedType(ref): name;

function BoxTester(p: ref, typ: name): ref;

axiom (forall p: ref, typ: name :: {BoxTester(p, typ)} UnboxedType(p) == typ <==> BoxTester(p, typ) != null);

const unique System.Int16: name;

axiom $IsValueType(System.Int16);

const unique System.Int32: name;

axiom $IsValueType(System.Int32);

const unique System.Int64: name;

axiom $IsValueType(System.Int64);

const unique System.Byte: name;

axiom $IsValueType(System.Byte);

const unique System.Int16.MinValue: int;

const unique System.Int16.MaxValue: int;

const unique System.Int32.MinValue: int;

const unique System.Int32.MaxValue: int;

const unique System.Int64.MinValue: int;

const unique System.Int64.MaxValue: int;

axiom System.Int64.MinValue < System.Int32.MinValue;

axiom System.Int32.MinValue < System.Int16.MinValue;

axiom System.Int16.MinValue < System.Int16.MaxValue;

axiom System.Int16.MaxValue < System.Int32.MaxValue;

axiom System.Int32.MaxValue < System.Int64.MaxValue;

function InRange(i: int, T: name): bool;

axiom (forall i: int :: InRange(i, System.Int16) <==> System.Int16.MinValue <= i && i <= System.Int16.MaxValue);

axiom (forall i: int :: InRange(i, System.Int32) <==> System.Int32.MinValue <= i && i <= System.Int32.MaxValue);

axiom (forall i: int :: InRange(i, System.Int64) <==> System.Int64.MinValue <= i && i <= System.Int64.MaxValue);

axiom (forall i: int :: {InRange(i, System.Byte)} InRange(i, System.Byte) <==> 0 <= i && i < 256);

function $RealToInt(real): int;

function $IntToReal(int): real;

function $SizeIs(name, int): bool;

function $IfThenElse(bool, any, any): any;

axiom (forall b: bool, x: any, y: any :: {$IfThenElse(b, x, y)} b ==> $IfThenElse(b, x, y) == x);

axiom (forall b: bool, x: any, y: any :: {$IfThenElse(b, x, y)} !b ==> $IfThenElse(b, x, y) == y);

function #neg(int): int;

function #rneg(real): real;

function #rdiv(real, real): real;

function #and(int, int): int;

function #or(int, int): int;

function #xor(int, int): int;

function #shl(int, int): int;

function #shr(int, int): int;

axiom (forall x: int, y: int :: {x mod y} {x div y} x mod y == x - x div y * y);

axiom (forall x: int, y: int :: {x mod y} 0 <= x && 0 < y ==> 0 <= x mod y && x mod y < y);

axiom (forall x: int, y: int :: {x mod y} 0 <= x && y < 0 ==> 0 <= x mod y && x mod y < 0 - y);

axiom (forall x: int, y: int :: {x mod y} x <= 0 && 0 < y ==> 0 - y < x mod y && x mod y <= 0);

axiom (forall x: int, y: int :: {x mod y} x <= 0 && y < 0 ==> y < x mod y && x mod y <= 0);

axiom (forall x: int, y: int :: {(x + y) mod y} 0 <= x && 0 <= y ==> (x + y) mod y == x mod y);

axiom (forall x: int, y: int :: {(y + x) mod y} 0 <= x && 0 <= y ==> (y + x) mod y == x mod y);

axiom (forall x: int, y: int :: {(x - y) mod y} 0 <= x - y && 0 <= y ==> (x - y) mod y == x mod y);

axiom (forall a: int, b: int, d: int :: {a mod d, b mod d} 2 <= d && a mod d == b mod d && a < b ==> a + d <= b);

axiom (forall i: int :: {#shl(i, 0)} #shl(i, 0) == i);

axiom (forall i: int, j: int :: 0 <= j ==> #shl(i, j + 1) == #shl(i, j) * 2);

axiom (forall i: int :: {#shr(i, 0)} #shr(i, 0) == i);

axiom (forall i: int, j: int :: 0 <= j ==> #shr(i, j + 1) == #shr(i, j) div 2);

const unique $UnknownRef: ref;

const unique System.IComparable: name;

const unique Microsoft.Singularity.Applications.ThreadTest: name;

const unique System.Threading.Thread: name;

const unique System.Collections.IEnumerable: name;

const unique System.Threading.ThreadStart: name;

const unique System.ICloneable: name;

const unique System.MulticastDelegate: name;

const unique System.Delegate: name;

const unique $stringLiteral0: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral0, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral0, $allocated]) : bool) && $IsNotNull($stringLiteral0, System.String) && $Length($stringLiteral0) == 13;

const unique $stringLiteral1: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral1, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral1, $allocated]) : bool) && $IsNotNull($stringLiteral1, System.String) && $Length($stringLiteral1) == 14;

const unique $stringLiteral2: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral2, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral2, $allocated]) : bool) && $IsNotNull($stringLiteral2, System.String) && $Length($stringLiteral2) == 11;

const unique $stringLiteral3: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral3, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral3, $allocated]) : bool) && $IsNotNull($stringLiteral3, System.String) && $Length($stringLiteral3) == 18;

const unique $stringLiteral4: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral4, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral4, $allocated]) : bool) && $IsNotNull($stringLiteral4, System.String) && $Length($stringLiteral4) == 19;

const unique $stringLiteral5: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral5, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral5, $allocated]) : bool) && $IsNotNull($stringLiteral5, System.String) && $Length($stringLiteral5) == 14;

const unique $stringLiteral6: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral6, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral6, $allocated]) : bool) && $IsNotNull($stringLiteral6, System.String) && $Length($stringLiteral6) == 15;

const unique $stringLiteral7: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral7, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral7, $allocated]) : bool) && $IsNotNull($stringLiteral7, System.String) && $Length($stringLiteral7) == 11;

const unique $stringLiteral8: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral8, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral8, $allocated]) : bool) && $IsNotNull($stringLiteral8, System.String) && $Length($stringLiteral8) == 19;

const unique $stringLiteral9: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral9, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral9, $allocated]) : bool) && $IsNotNull($stringLiteral9, System.String) && $Length($stringLiteral9) == 20;

const unique $stringLiteral10: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral10, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral10, $allocated]) : bool) && $IsNotNull($stringLiteral10, System.String) && $Length($stringLiteral10) == 22;

const unique $stringLiteral11: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral11, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral11, $allocated]) : bool) && $IsNotNull($stringLiteral11, System.String) && $Length($stringLiteral11) == 21;

const unique $stringLiteral12: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral12, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral12, $allocated]) : bool) && $IsNotNull($stringLiteral12, System.String) && $Length($stringLiteral12) == 23;

const unique $stringLiteral13: ref;

axiom (forall heap: [ref, name]any :: {cast(heap[$stringLiteral13, $allocated]) : bool} IsHeap(heap) ==> cast(heap[$stringLiteral13, $allocated]) : bool) && $IsNotNull($stringLiteral13, System.String) && $Length($stringLiteral13) == 22;

axiom $IsClass(Microsoft.Singularity.Applications.ThreadTest);

axiom Microsoft.Singularity.Applications.ThreadTest <: System.Object && AsDirectSubClass(Microsoft.Singularity.Applications.ThreadTest, System.Object) == Microsoft.Singularity.Applications.ThreadTest;

axiom (forall $K: name :: {Microsoft.Singularity.Applications.ThreadTest <: $K} Microsoft.Singularity.Applications.ThreadTest <: $K <==> Microsoft.Singularity.Applications.ThreadTest == $K || System.Object <: $K);

function Inv_Microsoft.Singularity.Applications.ThreadTest(object: ref, heap: [ref, name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref, name]any :: {Inv_Microsoft.Singularity.Applications.ThreadTest(this, heap)} Inv_Microsoft.Singularity.Applications.ThreadTest(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref, name]any :: {cast(heap[$o, $inv]) : name <: Microsoft.Singularity.Applications.ThreadTest} {Inv_Microsoft.Singularity.Applications.ThreadTest($o, heap)} IsHeap(heap) && cast(heap[$o, $inv]) : name <: Microsoft.Singularity.Applications.ThreadTest ==> Inv_Microsoft.Singularity.Applications.ThreadTest($o, heap));

procedure Microsoft.Singularity.Applications.ThreadTest.FirstThreadMethod();
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);

implementation Microsoft.Singularity.Applications.ThreadTest.FirstThreadMethod() {
  var stack0o: ref, i: int, stack0i: int, stack0b: bool, local1: int, $Heap$block1513$LoopPreheader: [ref, name]any;

  entry:
  assume IsHeap($Heap);
  goto block1479;
  block1479:
  goto block1496;
  block1496:
  stack0o := $stringLiteral0;
  call System.Console.WriteLine$System.String(stack0o);
  stack0o := $stringLiteral1;
  call Microsoft.Singularity.DebugStub.Print$System.String(stack0o);
  i := 0;
  goto block1513$LoopPreheader;
  block1513:
  assert (forall $o: ref :: $Heap$block1513$LoopPreheader[$o, $inv] == $Heap[$o, $inv] || cast($Heap$block1513$LoopPreheader[$o, $allocated]) : bool != true);
  assert (forall $o: ref :: cast($Heap$block1513$LoopPreheader[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  stack0i := 10;
  stack0b := i >= stack0i;
  goto true1513to1547, false1513to1530;
  true1513to1547:
  assume stack0b == true;
  goto block1547;
  false1513to1530:
  assume stack0b == false;
  goto block1530;
  block1547:
  stack0o := $stringLiteral3;
  call System.Console.WriteLine$System.String(stack0o);
  stack0o := $stringLiteral4;
  call Microsoft.Singularity.DebugStub.Print$System.String(stack0o);
  return;
  block1530:
  stack0o := $stringLiteral2;
  call System.Threading.Thread.Yield();
  local1 := i;
  stack0i := 1;
  stack0i := local1 + stack0i;
  i := stack0i;
  stack0i := local1;
  goto block1513;
  block1513$LoopPreheader:
  $Heap$block1513$LoopPreheader := $Heap;
  goto block1513;
}

axiom $IsClass(System.String);

axiom System.String <: System.Object && AsDirectSubClass(System.String, System.Object) == System.String;

axiom $IsInterface(System.IComparable);

axiom (forall $K: name :: {System.IComparable <: $K} System.IComparable <: $K <==> System.IComparable == $K || System.Object == $K);

axiom Implements(System.String, System.IComparable);

axiom $IsInterface(System.ICloneable);

axiom (forall $K: name :: {System.ICloneable <: $K} System.ICloneable <: $K <==> System.ICloneable == $K || System.Object == $K);

axiom Implements(System.String, System.ICloneable);

axiom $IsInterface(System.Collections.IEnumerable);

axiom (forall $K: name :: {System.Collections.IEnumerable <: $K} System.Collections.IEnumerable <: $K <==> System.Collections.IEnumerable == $K || System.Object == $K);

axiom Implements(System.String, System.Collections.IEnumerable);

axiom (forall $K: name :: {System.String <: $K} System.String <: $K <==> System.String == $K || System.Object <: $K || System.IComparable <: $K || System.ICloneable <: $K || System.Collections.IEnumerable <: $K);

axiom (forall $U: name :: {$U <: System.String} $U <: System.String ==> $U == System.String);

function Inv_System.String(object: ref, heap: [ref, name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref, name]any :: {Inv_System.String(this, heap)} Inv_System.String(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref, name]any :: {cast(heap[$o, $inv]) : name <: System.String} {Inv_System.String($o, heap)} IsHeap(heap) && cast(heap[$o, $inv]) : name <: System.String ==> Inv_System.String($o, heap));

procedure System.Console.WriteLine$System.String(value$in: ref);
  requires value$in == null || (cast($Heap[value$in, $writable]) : bool == true && cast($Heap[value$in, $inv]) : name == $typeof(value$in));
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);

procedure Microsoft.Singularity.DebugStub.Print$System.String(value$in: ref);
  requires value$in == null || (cast($Heap[value$in, $writable]) : bool == true && cast($Heap[value$in, $inv]) : name == $typeof(value$in));
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);

procedure System.Threading.Thread.Yield();
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);

procedure Microsoft.Singularity.Applications.ThreadTest.SecondThreadMethod();
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);

implementation Microsoft.Singularity.Applications.ThreadTest.SecondThreadMethod() {
  var stack0o: ref, i: int, stack0i: int, stack0b: bool, local1: int, $Heap$block2516$LoopPreheader: [ref, name]any;

  entry:
  assume IsHeap($Heap);
  goto block2482;
  block2482:
  goto block2499;
  block2499:
  stack0o := $stringLiteral5;
  call System.Console.WriteLine$System.String(stack0o);
  stack0o := $stringLiteral6;
  call Microsoft.Singularity.DebugStub.Print$System.String(stack0o);
  i := 0;
  goto block2516$LoopPreheader;
  block2516:
  assert (forall $o: ref :: $Heap$block2516$LoopPreheader[$o, $inv] == $Heap[$o, $inv] || cast($Heap$block2516$LoopPreheader[$o, $allocated]) : bool != true);
  assert (forall $o: ref :: cast($Heap$block2516$LoopPreheader[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  stack0i := 10;
  stack0b := i >= stack0i;
  goto true2516to2550, false2516to2533;
  true2516to2550:
  assume stack0b == true;
  goto block2550;
  false2516to2533:
  assume stack0b == false;
  goto block2533;
  block2550:
  stack0o := $stringLiteral8;
  call System.Console.WriteLine$System.String(stack0o);
  stack0o := $stringLiteral9;
  call Microsoft.Singularity.DebugStub.Print$System.String(stack0o);
  return;
  block2533:
  stack0o := $stringLiteral7;
  call System.Threading.Thread.Yield();
  local1 := i;
  stack0i := 1;
  stack0i := local1 + stack0i;
  i := stack0i;
  stack0i := local1;
  goto block2516;
  block2516$LoopPreheader:
  $Heap$block2516$LoopPreheader := $Heap;
  goto block2516;
}

procedure Microsoft.Singularity.Applications.ThreadTest.Main$System.String.array(args$in: ref) returns ($result: int);
  requires args$in == null || (cast($Heap[args$in, $writable]) : bool == true && cast($Heap[args$in, $inv]) : name == $typeof(args$in));
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures IsAllocated($Heap, $result);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);

implementation Microsoft.Singularity.Applications.ThreadTest.Main$System.String.array(args$in: ref) returns ($result: int) {
  var args: ref, stack0o: ref, stack1o: ref, stack50000o: ref, t1: ref, t2: ref, i: int, stack0i: int, stack0b: bool, local3: int, return.value: int, SS$Display.Return.Local: int, $Heap$block3825$LoopPreheader: [ref, name]any;

  entry:
  assume IsHeap($Heap);
  args := args$in;
  assume $Is(args, RefArray(System.String, 1));
  assume cast($Heap[args$in, $allocated]) : bool == true;
  goto block3791;
  block3791:
  goto block3808;
  block3808:
  stack0o := null;
  havoc stack1o;
  havoc stack50000o;
  assume cast($Heap[stack50000o, $allocated]) : bool == false && stack50000o != null && $typeof(stack50000o) == System.Threading.ThreadStart;
  $Heap[stack50000o, $allocated] := true;
  assert stack50000o != null;
  call System.Threading.ThreadStart..ctor$System.Object$System.IntPtr(stack50000o, stack0o, stack1o);
  stack0o := stack50000o;
  havoc stack50000o;
  assume cast($Heap[stack50000o, $allocated]) : bool == false && stack50000o != null && $typeof(stack50000o) == System.Threading.Thread;
  $Heap[stack50000o, $allocated] := true;
  assert stack50000o != null;
  call System.Threading.Thread..ctor$System.Threading.ThreadStart(stack50000o, stack0o);
  stack0o := stack50000o;
  t1 := stack0o;
  stack0o := null;
  havoc stack1o;
  havoc stack50000o;
  assume cast($Heap[stack50000o, $allocated]) : bool == false && stack50000o != null && $typeof(stack50000o) == System.Threading.ThreadStart;
  $Heap[stack50000o, $allocated] := true;
  assert stack50000o != null;
  call System.Threading.ThreadStart..ctor$System.Object$System.IntPtr(stack50000o, stack0o, stack1o);
  stack0o := stack50000o;
  havoc stack50000o;
  assume cast($Heap[stack50000o, $allocated]) : bool == false && stack50000o != null && $typeof(stack50000o) == System.Threading.Thread;
  $Heap[stack50000o, $allocated] := true;
  assert stack50000o != null;
  call System.Threading.Thread..ctor$System.Threading.ThreadStart(stack50000o, stack0o);
  stack0o := stack50000o;
  t2 := stack0o;
  stack0o := $stringLiteral10;
  call System.Console.WriteLine$System.String(stack0o);
  assert t1 != null;
  call System.Threading.Thread.Start(t1);
  stack0o := $stringLiteral11;
  call System.Console.WriteLine$System.String(stack0o);
  stack0o := $stringLiteral12;
  call System.Console.WriteLine$System.String(stack0o);
  assert t2 != null;
  call System.Threading.Thread.Start(t2);
  stack0o := $stringLiteral13;
  call System.Console.WriteLine$System.String(stack0o);
  i := 0;
  goto block3825$LoopPreheader;
  block3825:
  assert (forall $o: ref :: $Heap$block3825$LoopPreheader[$o, $inv] == $Heap[$o, $inv] || cast($Heap$block3825$LoopPreheader[$o, $allocated]) : bool != true);
  assert (forall $o: ref :: cast($Heap$block3825$LoopPreheader[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  stack0i := 30;
  stack0b := i >= stack0i;
  goto true3825to3859, false3825to3842;
  true3825to3859:
  assume stack0b == true;
  goto block3859;
  false3825to3842:
  assume stack0b == false;
  goto block3842;
  block3859:
  return.value := 0;
  goto block3876;
  block3842:
  call System.Threading.Thread.Yield();
  local3 := i;
  stack0i := 1;
  stack0i := local3 + stack0i;
  i := stack0i;
  stack0i := local3;
  goto block3825;
  block3876:
  SS$Display.Return.Local := return.value;
  stack0i := return.value;
  $result := stack0i;
  return;
  block3825$LoopPreheader:
  $Heap$block3825$LoopPreheader := $Heap;
  goto block3825;
}

axiom $IsClass(System.Threading.ThreadStart);

axiom $IsClass(System.MulticastDelegate);

axiom $IsClass(System.Delegate);

axiom System.Delegate <: System.Object && AsDirectSubClass(System.Delegate, System.Object) == System.Delegate;

axiom Implements(System.Delegate, System.ICloneable);

axiom (forall $K: name :: {System.Delegate <: $K} System.Delegate <: $K <==> System.Delegate == $K || System.Object <: $K || System.ICloneable <: $K);

function Inv_System.Delegate(object: ref, heap: [ref, name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref, name]any :: {Inv_System.Delegate(this, heap)} Inv_System.Delegate(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref, name]any :: {cast(heap[$o, $inv]) : name <: System.Delegate} {Inv_System.Delegate($o, heap)} IsHeap(heap) && cast(heap[$o, $inv]) : name <: System.Delegate ==> Inv_System.Delegate($o, heap));

axiom System.MulticastDelegate <: System.Delegate && AsDirectSubClass(System.MulticastDelegate, System.Delegate) == System.MulticastDelegate;

axiom (forall $K: name :: {System.MulticastDelegate <: $K} System.MulticastDelegate <: $K <==> System.MulticastDelegate == $K || System.Delegate <: $K);

function Inv_System.MulticastDelegate(object: ref, heap: [ref, name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref, name]any :: {Inv_System.MulticastDelegate(this, heap)} Inv_System.MulticastDelegate(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref, name]any :: {cast(heap[$o, $inv]) : name <: System.MulticastDelegate} {Inv_System.MulticastDelegate($o, heap)} IsHeap(heap) && cast(heap[$o, $inv]) : name <: System.MulticastDelegate ==> Inv_System.MulticastDelegate($o, heap));

axiom System.Threading.ThreadStart <: System.MulticastDelegate && AsDirectSubClass(System.Threading.ThreadStart, System.MulticastDelegate) == System.Threading.ThreadStart;

axiom (forall $K: name :: {System.Threading.ThreadStart <: $K} System.Threading.ThreadStart <: $K <==> System.Threading.ThreadStart == $K || System.MulticastDelegate <: $K);

axiom (forall $U: name :: {$U <: System.Threading.ThreadStart} $U <: System.Threading.ThreadStart ==> $U == System.Threading.ThreadStart);

function Inv_System.Threading.ThreadStart(object: ref, heap: [ref, name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref, name]any :: {Inv_System.Threading.ThreadStart(this, heap)} Inv_System.Threading.ThreadStart(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref, name]any :: {cast(heap[$o, $inv]) : name <: System.Threading.ThreadStart} {Inv_System.Threading.ThreadStart($o, heap)} IsHeap(heap) && cast(heap[$o, $inv]) : name <: System.Threading.ThreadStart ==> Inv_System.Threading.ThreadStart($o, heap));

procedure System.Threading.ThreadStart..ctor$System.Object$System.IntPtr(this: ref, object$in: ref, method$in: ref);
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);
  ensures cast($Heap[this, $writable]) : bool == true && cast($Heap[this, $inv]) : name == System.Threading.ThreadStart;

axiom $IsClass(System.Threading.Thread);

axiom System.Threading.Thread <: System.Object && AsDirectSubClass(System.Threading.Thread, System.Object) == System.Threading.Thread;

axiom (forall $K: name :: {System.Threading.Thread <: $K} System.Threading.Thread <: $K <==> System.Threading.Thread == $K || System.Object <: $K);

axiom (forall $U: name :: {$U <: System.Threading.Thread} $U <: System.Threading.Thread ==> $U == System.Threading.Thread);

function Inv_System.Threading.Thread(object: ref, heap: [ref, name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref, name]any :: {Inv_System.Threading.Thread(this, heap)} Inv_System.Threading.Thread(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref, name]any :: {cast(heap[$o, $inv]) : name <: System.Threading.Thread} {Inv_System.Threading.Thread($o, heap)} IsHeap(heap) && cast(heap[$o, $inv]) : name <: System.Threading.Thread ==> Inv_System.Threading.Thread($o, heap));

procedure System.Threading.Thread..ctor$System.Threading.ThreadStart(this: ref, start$in: ref);
  requires start$in == null || (cast($Heap[start$in, $writable]) : bool == true && cast($Heap[start$in, $inv]) : name == $typeof(start$in));
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) && ($o != this || !(System.Threading.Thread <: DeclType($f))) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: $o == this || old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: $o == this || old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);
  ensures cast($Heap[this, $writable]) : bool == true && cast($Heap[this, $inv]) : name == System.Threading.Thread;
  ensures $Heap[this, $sharingMode] == $SharingMode_Unshared;

procedure System.Threading.Thread.Start(this: ref);
  requires cast($Heap[this, $writable]) : bool == true && cast($Heap[this, $inv]) : name == $typeof(this);
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);

procedure Microsoft.Singularity.Applications.ThreadTest..ctor(this: ref);
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) && ($o != this || !(Microsoft.Singularity.Applications.ThreadTest <: DeclType($f))) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: $o == this || old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: $o == this || old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);
  ensures cast($Heap[this, $writable]) : bool == true && cast($Heap[this, $inv]) : name == Microsoft.Singularity.Applications.ThreadTest;
  ensures $Heap[this, $sharingMode] == $SharingMode_Unshared;

implementation Microsoft.Singularity.Applications.ThreadTest..ctor(this: ref) {
  entry:
  assume IsHeap($Heap);
  assume $IsNotNull(this, Microsoft.Singularity.Applications.ThreadTest);
  assume cast($Heap[this, $allocated]) : bool == true;
  assume cast($Heap[this, $writable]) : bool == true && cast($Heap[this, $inv]) : name == System.Object;
  goto block4777;
  block4777:
  goto block4794;
  block4794:
  assert this != null;
  call System.Object..ctor(this);
  assert this != null;
  assert cast($Heap[this, $writable]) : bool == true && System.Object <: cast($Heap[this, $inv]) : name;
  assert cast($Heap[this, $writable]) : bool == true && cast($Heap[this, $inv]) : name == System.Object;
  assert Inv_Microsoft.Singularity.Applications.ThreadTest(this, $Heap);
  $Heap[this, $inv] := Microsoft.Singularity.Applications.ThreadTest;
  return;
}

procedure System.Object..ctor(this: ref);
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old ($Heap)[$o, $allocated]) : bool == true && cast(old ($Heap)[$o, $writable]) : bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) && ($o != this || !(System.Object <: DeclType($f))) ==> old ($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: $o == this || old ($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old ($Heap)[$o, $allocated]) : bool != true);
  free ensures (forall $o: ref :: cast(old ($Heap)[$o, $allocated]) : bool ==> cast($Heap[$o, $allocated]) : bool);
  free ensures (forall $o: ref :: $o == this || old ($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);
  ensures cast($Heap[this, $writable]) : bool == true && cast($Heap[this, $inv]) : name == System.Object;
  ensures $Heap[this, $sharingMode] == $SharingMode_Unshared;

type ref,
  name,
  any;

const null: ref;

[Input - ../../vendor/boogie/Test/test2/strings-no-where.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"


type elements;

type struct;

var $Heap: [ref,name]any;
function cast<S,T>(S) returns (T);
function IsHeap(h: [ref,name]any) returns (bool);

const unique $allocated: name;

const unique $elements: name;

const unique $inv: name;

const unique $writable: name;

const unique $sharingMode: name;

const unique $SharingMode_Unshared: name;

const unique $SharingMode_LockProtected: name;

function ClassRepr(class: name) returns (ref);

axiom (forall c0: name, c1: name :: c0 != c1 ==> ClassRepr(c0) != ClassRepr(c1));

axiom (forall T: name :: !($typeof(ClassRepr(T)) <: System.Object));

axiom (forall T: name :: ClassRepr(T) != null);

axiom (forall T: name, h: [ref,name]any :: { h[ClassRepr(T), $writable] } IsHeap(h) ==> cast(h[ClassRepr(T), $writable]):bool);

function IsDirectlyModifiableField(f: name) returns (bool);

axiom !IsDirectlyModifiableField($allocated);

axiom IsDirectlyModifiableField($elements);

axiom !IsDirectlyModifiableField($inv);

axiom !IsDirectlyModifiableField($writable);

function IsStaticField(f: name) returns (bool);

axiom !IsStaticField($allocated);

axiom !IsStaticField($elements);

axiom !IsStaticField($inv);

axiom !IsStaticField($writable);

function ValueArrayGet(elements, int) returns (any);

function ValueArraySet(elements, int, any) returns (elements);

function RefArrayGet(elements, int) returns (ref);

function RefArraySet(elements, int, ref) returns (elements);

axiom (forall A: elements, i: int, x: any :: ValueArrayGet(ValueArraySet(A, i, x), i) == x);

axiom (forall A: elements, i: int, j: int, x: any :: i != j ==> ValueArrayGet(ValueArraySet(A, i, x), j) == ValueArrayGet(A, j));

axiom (forall A: elements, i: int, x: ref :: RefArrayGet(RefArraySet(A, i, x), i) == x);

axiom (forall A: elements, i: int, j: int, x: ref :: i != j ==> RefArrayGet(RefArraySet(A, i, x), j) == RefArrayGet(A, j));

function ArrayIndex(arr: ref, dim: int, indexAtDim: int, remainingIndexContribution: int) returns (int);

axiom (forall a: ref, d: int, x: int, y: int, x': int, y': int :: ArrayIndex(a, d, x, y) == ArrayIndex(a, d, x', y') ==> x == x' && y == y');

axiom (forall a: ref, T: name, i: int, r: int, heap: [ref,name]any :: $typeof(a) <: RefArray(T, r) ==> $Is(RefArrayGet(cast(heap[a, $elements]):elements, i), T));

function $Rank(ref) returns (int);

axiom (forall a: ref :: 1 <= $Rank(a));

axiom (forall a: ref, T: name, r: int :: { $Is(a, ValueArray(T, r)) } $Is(a, ValueArray(T, r)) ==> $Rank(a) == r);

axiom (forall a: ref, T: name, r: int :: { $Is(a, RefArray(T, r)) } $Is(a, RefArray(T, r)) ==> $Rank(a) == r);

function $Length(ref) returns (int);

axiom (forall a: ref :: { $Length(a) } 0 <= $Length(a));

function $DimLength(ref, int) returns (int);

axiom (forall a: ref, i: int :: 0 <= $DimLength(a, i));

axiom (forall a: ref :: $Rank(a) == 1 ==> $DimLength(a, 0) == $Length(a));

function $LBound(ref, int) returns (int);

function $UBound(ref, int) returns (int);

axiom (forall a: ref, i: int :: { $LBound(a, i) } $LBound(a, i) == 0);

axiom (forall a: ref, i: int :: { $UBound(a, i) } $UBound(a, i) == $DimLength(a, i) - 1);

const unique System.Array: name;

axiom $IsClass(System.Array);

axiom System.Array <: System.Object;

function $ElementType(name) returns (name);

function ValueArray(elementType: name, rank: int) returns (name);

axiom (forall T: name, r: int :: { ValueArray(T, r) } ValueArray(T, r) <: System.Array);

function RefArray(elementType: name, rank: int) returns (name);

axiom (forall T: name, r: int :: { RefArray(T, r) } RefArray(T, r) <: System.Array);

axiom (forall T: name, U: name, r: int :: U <: T ==> RefArray(U, r) <: RefArray(T, r));

axiom (forall A: name, r: int :: $ElementType(ValueArray(A, r)) == A);

axiom (forall A: name, r: int :: $ElementType(RefArray(A, r)) == A);

axiom (forall A: name, r: int, T: name :: { T <: RefArray(A, r) } T <: RefArray(A, r) ==> T == RefArray($ElementType(T), r) && $ElementType(T) <: A);

axiom (forall A: name, r: int, T: name :: { T <: ValueArray(A, r) } T <: ValueArray(A, r) ==> T == ValueArray(A, r));

axiom (forall A: name, r: int, T: name :: RefArray(A, r) <: T ==> System.Array <: T || (T == RefArray($ElementType(T), r) && A <: $ElementType(T)));

axiom (forall A: name, r: int, T: name :: ValueArray(A, r) <: T ==> System.Array <: T || T == ValueArray(A, r));

function $ArrayPtr(elementType: name) returns (name);

function $StructGet(struct, name) returns (any);

function $StructSet(struct, name, any) returns (struct);

axiom (forall s: struct, f: name, x: any :: $StructGet($StructSet(s, f, x), f) == x);

axiom (forall s: struct, f: name, f': name, x: any :: f != f' ==> $StructGet($StructSet(s, f, x), f') == $StructGet(s, f'));

function ZeroInit(s: struct, typ: name) returns (bool);

function $typeof(ref) returns (name);

function Implements(class: name, interface: name) returns (bool);

axiom (forall T: name, J: name :: { Implements(T, J) } Implements(T, J) ==> T <: J);

function InterfaceExtends(subIntf: name, superIntf: name) returns (bool);

axiom (forall J: name, K: name :: { InterfaceExtends(J, K) } InterfaceExtends(J, K) ==> J <: K);

function $IsClass(name) returns (bool);

axiom (forall C: name :: { $IsClass(C) } $IsClass(C) ==> C <: C);

function AsDirectSubClass(sub: name, base: name) returns (sub': name);

function OneClassDown(sub: name, base: name) returns (directSub: name);

axiom (forall A: name, B: name, C: name :: { C <: AsDirectSubClass(B, A) } C <: AsDirectSubClass(B, A) ==> OneClassDown(C, A) == B);

function $IsInterface(name) returns (bool);

axiom (forall J: name :: { $IsInterface(J) } $IsInterface(J) ==> J <: System.Object);

function $IsValueType(name) returns (bool);

axiom (forall T: name :: $IsValueType(T) ==> (forall U: name :: T <: U ==> T == U) && (forall U: name :: U <: T ==> T == U));

const unique System.Object: name;

axiom $IsClass(System.Object);

function $IsTokenForType(struct, name) returns (bool);

function TypeObject(name) returns (ref);

const unique System.Type: name;

axiom System.Type <: System.Object;

axiom (forall T: name :: { TypeObject(T) } $IsNotNull(TypeObject(T), System.Type));

function $Is(ref, name) returns (bool);

axiom (forall o: ref, T: name :: { $Is(o, T) } $Is(o, T) <==> o == null || $typeof(o) <: T);

function $IsNotNull(ref, name) returns (bool);

axiom (forall o: ref, T: name :: { $IsNotNull(o, T) } $IsNotNull(o, T) <==> o != null && $Is(o, T));

function $As(ref, name) returns (ref);

axiom (forall o: ref, T: name :: $Is(o, T) ==> $As(o, T) == o);

axiom (forall o: ref, T: name :: !$Is(o, T) ==> $As(o, T) == null);

axiom (forall heap: [ref,name]any, o: ref, A: name, r: int :: $Is(o, RefArray(A, r)) ==> heap[o, $inv] == $typeof(o));

axiom (forall heap: [ref,name]any, o: ref, A: name, r: int :: $Is(o, ValueArray(A, r)) ==> heap[o, $inv] == $typeof(o));

function IsAllocated(h: [ref,name]any, o: any) returns (bool);

axiom (forall h: [ref,name]any, o: ref, f: name :: { IsAllocated(h, h[o, f]) } IsHeap(h) ==> IsAllocated(h, h[o, f]));

axiom (forall h: [ref,name]any, s: struct, f: name :: { IsAllocated(h, $StructGet(s, f)) } IsAllocated(h, s) ==> IsAllocated(h, $StructGet(s, f)));

axiom (forall h: [ref,name]any, e: elements, i: int :: { IsAllocated(h, RefArrayGet(e, i)) } IsAllocated(h, e) ==> IsAllocated(h, RefArrayGet(e, i)));

axiom (forall h: [ref,name]any, o: ref :: { h[o, $allocated] } IsAllocated(h, o) ==> cast(h[o, $allocated]):bool);

axiom (forall h: [ref,name]any, c: name :: { h[ClassRepr(c), $allocated] } IsHeap(h) ==> cast(h[ClassRepr(c), $allocated]):bool);

function DeclType(field: name) returns (class: name);

function AsNonNullRefField(field: name, T: name) returns (f: name);

function AsRefField(field: name, T: name) returns (f: name);

function AsRangeField(field: name, T: name) returns (f: name);

axiom (forall f: name, T: name :: { AsNonNullRefField(f, T) } AsNonNullRefField(f, T) == f ==> AsRefField(f, T) == f);

axiom (forall h: [ref,name]any, o: ref, f: name, T: name :: { h[o, AsRefField(f, T)] } IsHeap(h) ==> $Is(cast(h[o, AsRefField(f, T)]):ref, T));

axiom (forall h: [ref,name]any, o: ref, f: name, T: name :: { h[o, AsNonNullRefField(f, T)] } IsHeap(h) ==> cast(h[o, AsNonNullRefField(f, T)]):ref != null);

axiom (forall h: [ref,name]any, o: ref, f: name, T: name :: { h[o, AsRangeField(f, T)] } IsHeap(h) ==> InRange(cast(h[o, AsRangeField(f, T)]):int, T));

const unique System.String: name;

axiom (forall h: [ref,name]any, s: ref :: IsHeap(h) && $typeof(s) == System.String ==> h[s, $inv] == $typeof(s) && cast(h[s, $writable]):bool);

function AsOwnedField(f: name) returns (name);

axiom (forall h: [ref,name]any, o: ref, f: name :: { h[o, AsOwnedField(f)] } IsHeap(h) && cast(h[o, $inv]):name <: DeclType(AsOwnedField(f)) ==> cast(h[o, AsOwnedField(f)]):ref == null || $typeof(cast(h[o, AsOwnedField(f)]):ref) == System.String || !cast(h[cast(h[o, AsOwnedField(f)]):ref, $writable]):bool);

axiom (forall h: [ref,name]any, o: ref :: { h[o, $writable] } IsHeap(h) && !cast(h[o, $writable]):bool ==> cast(h[o, $inv]):name == $typeof(o));

function Box(any, ref) returns (ref);

function Unbox(ref) returns (any);

axiom (forall x: any, p: ref :: { Unbox(Box(x, p)) } Unbox(Box(x, p)) == x);

axiom (forall heap: [ref,name]any, x: any, p: ref :: { heap[Box(x, p), $inv] } IsHeap(heap) ==> heap[Box(x, p), $inv] == $typeof(Box(x, p)));

function UnboxedType(ref) returns (name);

function BoxTester(p: ref, typ: name) returns (ref);

axiom (forall p: ref, typ: name :: { BoxTester(p, typ) } UnboxedType(p) == typ <==> BoxTester(p, typ) != null);

const unique System.Int16: name;

axiom $IsValueType(System.Int16);

const unique System.Int32: name;

axiom $IsValueType(System.Int32);

const unique System.Int64: name;

axiom $IsValueType(System.Int64);

const unique System.Byte: name;

axiom $IsValueType(System.Byte);

const unique System.Int16.MinValue: int;

const unique System.Int16.MaxValue: int;

const unique System.Int32.MinValue: int;

const unique System.Int32.MaxValue: int;

const unique System.Int64.MinValue: int;

const unique System.Int64.MaxValue: int;

axiom System.Int64.MinValue < System.Int32.MinValue;

axiom System.Int32.MinValue < System.Int16.MinValue;

axiom System.Int16.MinValue < System.Int16.MaxValue;

axiom System.Int16.MaxValue < System.Int32.MaxValue;

axiom System.Int32.MaxValue < System.Int64.MaxValue;

function InRange(i: int, T: name) returns (bool);

axiom (forall i: int :: InRange(i, System.Int16) <==> System.Int16.MinValue <= i && i <= System.Int16.MaxValue);

axiom (forall i: int :: InRange(i, System.Int32) <==> System.Int32.MinValue <= i && i <= System.Int32.MaxValue);

axiom (forall i: int :: InRange(i, System.Int64) <==> System.Int64.MinValue <= i && i <= System.Int64.MaxValue);

axiom (forall i: int :: { InRange(i, System.Byte) } InRange(i, System.Byte) <==> 0 <= i && i < 256);

function $RealToInt(real) returns (int);

function $IntToReal(int) returns (real);

function $SizeIs(name, int) returns (bool);

function $IfThenElse(bool, any, any) returns (any);

axiom (forall b: bool, x: any, y: any :: { $IfThenElse(b, x, y) } b ==> $IfThenElse(b, x, y) == x);

axiom (forall b: bool, x: any, y: any :: { $IfThenElse(b, x, y) } !b ==> $IfThenElse(b, x, y) == y);

function #neg(int) returns (int);

function #rneg(real) returns (real);

function #rdiv(real, real) returns (real);

function #and(int, int) returns (int);

function #or(int, int) returns (int);

function #xor(int, int) returns (int);

function #shl(int, int) returns (int);

function #shr(int, int) returns (int);

axiom (forall x: int, y: int :: { x mod y } { x div y } x mod y == x - x div y * y);

axiom (forall x: int, y: int :: { x mod y } 0 <= x && 0 < y ==> 0 <= x mod y && x mod y < y);

axiom (forall x: int, y: int :: { x mod y } 0 <= x && y < 0 ==> 0 <= x mod y && x mod y < 0 - y);

axiom (forall x: int, y: int :: { x mod y } x <= 0 && 0 < y ==> 0 - y < x mod y && x mod y <= 0);

axiom (forall x: int, y: int :: { x mod y } x <= 0 && y < 0 ==> y < x mod y && x mod y <= 0);

axiom (forall x: int, y: int :: { (x + y) mod y } 0 <= x && 0 <= y ==> (x + y) mod y == x mod y);

axiom (forall x: int, y: int :: { (y + x) mod y } 0 <= x && 0 <= y ==> (y + x) mod y == x mod y);

axiom (forall x: int, y: int :: { (x - y) mod y } 0 <= x - y && 0 <= y ==> (x - y) mod y == x mod y);

axiom (forall a: int, b: int, d: int :: { a mod d,b mod d } 2 <= d && a mod d == b mod d && a < b ==> a + d <= b);

axiom (forall i: int :: { #shl(i, 0) } #shl(i, 0) == i);

axiom (forall i: int, j: int :: 0 <= j ==> #shl(i, j + 1) == #shl(i, j) * 2);

axiom (forall i: int :: { #shr(i, 0) } #shr(i, 0) == i);

axiom (forall i: int, j: int :: 0 <= j ==> #shr(i, j + 1) == #shr(i, j) div 2);

const unique $UnknownRef: ref;

const unique System.IComparable: name;

const unique Microsoft.Singularity.Applications.ThreadTest: name;

const unique System.Threading.Thread: name;

const unique System.Collections.IEnumerable: name;

const unique System.Threading.ThreadStart: name;

const unique System.ICloneable: name;

const unique System.MulticastDelegate: name;

const unique System.Delegate: name;

const unique $stringLiteral0: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral0, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral0, $allocated]):bool) && $IsNotNull($stringLiteral0, System.String) && $Length($stringLiteral0) == 13;

const unique $stringLiteral1: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral1, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral1, $allocated]):bool) && $IsNotNull($stringLiteral1, System.String) && $Length($stringLiteral1) == 14;

const unique $stringLiteral2: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral2, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral2, $allocated]):bool) && $IsNotNull($stringLiteral2, System.String) && $Length($stringLiteral2) == 11;

const unique $stringLiteral3: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral3, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral3, $allocated]):bool) && $IsNotNull($stringLiteral3, System.String) && $Length($stringLiteral3) == 18;

const unique $stringLiteral4: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral4, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral4, $allocated]):bool) && $IsNotNull($stringLiteral4, System.String) && $Length($stringLiteral4) == 19;

const unique $stringLiteral5: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral5, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral5, $allocated]):bool) && $IsNotNull($stringLiteral5, System.String) && $Length($stringLiteral5) == 14;

const unique $stringLiteral6: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral6, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral6, $allocated]):bool) && $IsNotNull($stringLiteral6, System.String) && $Length($stringLiteral6) == 15;

const unique $stringLiteral7: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral7, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral7, $allocated]):bool) && $IsNotNull($stringLiteral7, System.String) && $Length($stringLiteral7) == 11;

const unique $stringLiteral8: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral8, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral8, $allocated]):bool) && $IsNotNull($stringLiteral8, System.String) && $Length($stringLiteral8) == 19;

const unique $stringLiteral9: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral9, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral9, $allocated]):bool) && $IsNotNull($stringLiteral9, System.String) && $Length($stringLiteral9) == 20;

const unique $stringLiteral10: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral10, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral10, $allocated]):bool) && $IsNotNull($stringLiteral10, System.String) && $Length($stringLiteral10) == 22;

const unique $stringLiteral11: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral11, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral11, $allocated]):bool) && $IsNotNull($stringLiteral11, System.String) && $Length($stringLiteral11) == 21;

const unique $stringLiteral12: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral12, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral12, $allocated]):bool) && $IsNotNull($stringLiteral12, System.String) && $Length($stringLiteral12) == 23;

const unique $stringLiteral13: ref;

axiom (forall heap: [ref,name]any :: { cast(heap[$stringLiteral13, $allocated]):bool } IsHeap(heap) ==> cast(heap[$stringLiteral13, $allocated]):bool) && $IsNotNull($stringLiteral13, System.String) && $Length($stringLiteral13) == 22;

axiom $IsClass(Microsoft.Singularity.Applications.ThreadTest);

axiom Microsoft.Singularity.Applications.ThreadTest <: System.Object && AsDirectSubClass(Microsoft.Singularity.Applications.ThreadTest, System.Object) == Microsoft.Singularity.Applications.ThreadTest;

axiom (forall $K: name :: { Microsoft.Singularity.Applications.ThreadTest <: $K } Microsoft.Singularity.Applications.ThreadTest <: $K <==> Microsoft.Singularity.Applications.ThreadTest == $K || System.Object <: $K);

function Inv_Microsoft.Singularity.Applications.ThreadTest(object: ref, heap: [ref,name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref,name]any :: { Inv_Microsoft.Singularity.Applications.ThreadTest(this, heap) } Inv_Microsoft.Singularity.Applications.ThreadTest(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref,name]any :: { cast(heap[$o, $inv]):name <: Microsoft.Singularity.Applications.ThreadTest } { Inv_Microsoft.Singularity.Applications.ThreadTest($o, heap) } IsHeap(heap) && cast(heap[$o, $inv]):name <: Microsoft.Singularity.Applications.ThreadTest ==> Inv_Microsoft.Singularity.Applications.ThreadTest($o, heap));

procedure Microsoft.Singularity.Applications.ThreadTest.FirstThreadMethod();
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);



implementation Microsoft.Singularity.Applications.ThreadTest.FirstThreadMethod()
{
  var stack0o: ref, i: int, stack0i: int, stack0b: bool, local1: int, $Heap$block1513$LoopPreheader: [ref,name]any;

  entry:
    assume IsHeap($Heap);
    goto block1479;

  block1479:
    goto block1496;

  block1496:
    // ----- load constant First thread!  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(21,13)
    stack0o := $stringLiteral0;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(21,13)
    call System.Console.WriteLine$System.String(stack0o);
    // ----- load constant First thread!   ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(22,13)
    stack0o := $stringLiteral1;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(22,13)
    call Microsoft.Singularity.DebugStub.Print$System.String(stack0o);
    // ----- load constant 0  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(24,18)
    i := 0;
    goto block1513$LoopPreheader;

  block1513:
    // ----- default loop invariant: $inv field  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(24,29)
    assert (forall $o: ref :: $Heap$block1513$LoopPreheader[$o, $inv] == $Heap[$o, $inv] || cast($Heap$block1513$LoopPreheader[$o, $allocated]):bool != true);
    assert (forall $o: ref :: cast($Heap$block1513$LoopPreheader[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
    // ----- load constant 10  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(24,29)
    stack0i := 10;
    // ----- binary operator  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(24,29)
    stack0b := i >= stack0i;
    // ----- branch  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(24,29)
    goto true1513to1547, false1513to1530;

  true1513to1547:
    assume stack0b == true;
    goto block1547;

  false1513to1530:
    assume stack0b == false;
    goto block1530;

  block1547:
    // ----- load constant First thread done!  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(29,13)
    stack0o := $stringLiteral3;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(29,13)
    call System.Console.WriteLine$System.String(stack0o);
    // ----- load constant First thread done!   ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(30,13)
    stack0o := $stringLiteral4;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(30,13)
    call Microsoft.Singularity.DebugStub.Print$System.String(stack0o);
    // ----- return  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(31,10)
    return;

  block1530:
    // ----- load constant [0] ...      ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(25,17)
    stack0o := $stringLiteral2;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(25,17)
    // Commented out, to avoid problems with the theorem prover nondeterministically choosing this error over the one 12 lines above: call System.Console.WriteLine$System.String(stack0o);
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(26,17)
    call System.Threading.Thread.Yield();
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(24,37)
    local1 := i;
    // ----- load constant 1
    stack0i := 1;
    // ----- binary operator
    stack0i := local1 + stack0i;
    // ----- copy
    i := stack0i;
    // ----- copy
    stack0i := local1;
    // ----- branch
    goto block1513;

  block1513$LoopPreheader:
    $Heap$block1513$LoopPreheader := $Heap;
    goto block1513;

}



axiom $IsClass(System.String);

axiom System.String <: System.Object && AsDirectSubClass(System.String, System.Object) == System.String;

axiom $IsInterface(System.IComparable);

axiom (forall $K: name :: { System.IComparable <: $K } System.IComparable <: $K <==> System.IComparable == $K || System.Object == $K);

axiom Implements(System.String, System.IComparable);

axiom $IsInterface(System.ICloneable);

axiom (forall $K: name :: { System.ICloneable <: $K } System.ICloneable <: $K <==> System.ICloneable == $K || System.Object == $K);

axiom Implements(System.String, System.ICloneable);

axiom $IsInterface(System.Collections.IEnumerable);

axiom (forall $K: name :: { System.Collections.IEnumerable <: $K } System.Collections.IEnumerable <: $K <==> System.Collections.IEnumerable == $K || System.Object == $K);

axiom Implements(System.String, System.Collections.IEnumerable);

axiom (forall $K: name :: { System.String <: $K } System.String <: $K <==> System.String == $K || System.Object <: $K || System.IComparable <: $K || System.ICloneable <: $K || System.Collections.IEnumerable <: $K);

axiom (forall $U: name :: { $U <: System.String } $U <: System.String ==> $U == System.String);

function Inv_System.String(object: ref, heap: [ref,name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref,name]any :: { Inv_System.String(this, heap) } Inv_System.String(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref,name]any :: { cast(heap[$o, $inv]):name <: System.String } { Inv_System.String($o, heap) } IsHeap(heap) && cast(heap[$o, $inv]):name <: System.String ==> Inv_System.String($o, heap));

procedure System.Console.WriteLine$System.String(value$in: ref);
  requires value$in == null || (cast($Heap[value$in, $writable]):bool == true && cast($Heap[value$in, $inv]):name == $typeof(value$in));
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);



procedure Microsoft.Singularity.DebugStub.Print$System.String(value$in: ref);
  requires value$in == null || (cast($Heap[value$in, $writable]):bool == true && cast($Heap[value$in, $inv]):name == $typeof(value$in));
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);



procedure System.Threading.Thread.Yield();
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);



procedure Microsoft.Singularity.Applications.ThreadTest.SecondThreadMethod();
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);



implementation Microsoft.Singularity.Applications.ThreadTest.SecondThreadMethod()
{
  var stack0o: ref, i: int, stack0i: int, stack0b: bool, local1: int, $Heap$block2516$LoopPreheader: [ref,name]any;

  entry:
    assume IsHeap($Heap);
    goto block2482;

  block2482:
    goto block2499;

  block2499:
    // ----- load constant Second thread!  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(35,13)
    stack0o := $stringLiteral5;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(35,13)
    call System.Console.WriteLine$System.String(stack0o);
    // ----- load constant Second thread!   ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(36,13)
    stack0o := $stringLiteral6;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(36,13)
    call Microsoft.Singularity.DebugStub.Print$System.String(stack0o);
    // ----- load constant 0  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(38,18)
    i := 0;
    goto block2516$LoopPreheader;

  block2516:
    // ----- default loop invariant: $inv field  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(38,29)
    assert (forall $o: ref :: $Heap$block2516$LoopPreheader[$o, $inv] == $Heap[$o, $inv] || cast($Heap$block2516$LoopPreheader[$o, $allocated]):bool != true);
    assert (forall $o: ref :: cast($Heap$block2516$LoopPreheader[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
    // ----- load constant 10  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(38,29)
    stack0i := 10;
    // ----- binary operator  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(38,29)
    stack0b := i >= stack0i;
    // ----- branch  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(38,29)
    goto true2516to2550, false2516to2533;

  true2516to2550:
    assume stack0b == true;
    goto block2550;

  false2516to2533:
    assume stack0b == false;
    goto block2533;

  block2550:
    // ----- load constant Second thread done!  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(44,13)
    stack0o := $stringLiteral8;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(44,13)
    call System.Console.WriteLine$System.String(stack0o);
    // ----- load constant Second thread done!   ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(45,13)
    stack0o := $stringLiteral9;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(45,13)
    call Microsoft.Singularity.DebugStub.Print$System.String(stack0o);
    // ----- return  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(46,10)
    return;

  block2533:
    // ----- load constant     ... [1]  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(40,17)
    stack0o := $stringLiteral7;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(40,17)
    // Commented out, to avoid problems with the theorem prover nondeterministically choosing this error over the one 12 lines above: call System.Console.WriteLine$System.String(stack0o);
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(41,17)
    call System.Threading.Thread.Yield();
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(38,37)
    local1 := i;
    // ----- load constant 1
    stack0i := 1;
    // ----- binary operator
    stack0i := local1 + stack0i;
    // ----- copy
    i := stack0i;
    // ----- copy
    stack0i := local1;
    // ----- branch
    goto block2516;

  block2516$LoopPreheader:
    $Heap$block2516$LoopPreheader := $Heap;
    goto block2516;

}



procedure Microsoft.Singularity.Applications.ThreadTest.Main$System.String.array(args$in: ref) returns ($result: int);
  requires args$in == null || (cast($Heap[args$in, $writable]):bool == true && cast($Heap[args$in, $inv]):name == $typeof(args$in));
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures IsAllocated($Heap, $result);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);



implementation Microsoft.Singularity.Applications.ThreadTest.Main$System.String.array(args$in: ref) returns ($result: int)
{
  var args: ref, stack0o: ref, stack1o: ref, stack50000o: ref, t1: ref, t2: ref, i: int, stack0i: int, stack0b: bool, local3: int, return.value: int, SS$Display.Return.Local: int, $Heap$block3825$LoopPreheader: [ref,name]any;

  entry:
    assume IsHeap($Heap);
    args := args$in;
    assume $Is(args, RefArray(System.String, 1));
    assume cast($Heap[args$in, $allocated]):bool == true;
    goto block3791;

  block3791:
    goto block3808;

  block3808:
    stack0o := null;
    // ----- load function  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(51,13)
    havoc stack1o;
    // ----- new object  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(51,13)
    havoc stack50000o;
    assume cast($Heap[stack50000o, $allocated]):bool == false && stack50000o != null && $typeof(stack50000o) == System.Threading.ThreadStart;
    $Heap[stack50000o, $allocated] := true;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(51,13)
    assert stack50000o != null;
    call System.Threading.ThreadStart..ctor$System.Object$System.IntPtr(stack50000o, stack0o, stack1o);
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(51,13)
    stack0o := stack50000o;
    // ----- new object  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(51,13)
    havoc stack50000o;
    assume cast($Heap[stack50000o, $allocated]):bool == false && stack50000o != null && $typeof(stack50000o) == System.Threading.Thread;
    $Heap[stack50000o, $allocated] := true;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(51,13)
    assert stack50000o != null;
    call System.Threading.Thread..ctor$System.Threading.ThreadStart(stack50000o, stack0o);
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(51,13)
    stack0o := stack50000o;
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(51,13)
    t1 := stack0o;
    stack0o := null;
    // ----- load function  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(52,13)
    havoc stack1o;
    // ----- new object  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(52,13)
    havoc stack50000o;
    assume cast($Heap[stack50000o, $allocated]):bool == false && stack50000o != null && $typeof(stack50000o) == System.Threading.ThreadStart;
    $Heap[stack50000o, $allocated] := true;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(52,13)
    assert stack50000o != null;
    call System.Threading.ThreadStart..ctor$System.Object$System.IntPtr(stack50000o, stack0o, stack1o);
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(52,13)
    stack0o := stack50000o;
    // ----- new object  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(52,13)
    havoc stack50000o;
    assume cast($Heap[stack50000o, $allocated]):bool == false && stack50000o != null && $typeof(stack50000o) == System.Threading.Thread;
    $Heap[stack50000o, $allocated] := true;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(52,13)
    assert stack50000o != null;
    call System.Threading.Thread..ctor$System.Threading.ThreadStart(stack50000o, stack0o);
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(52,13)
    stack0o := stack50000o;
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(52,13)
    t2 := stack0o;
    // ----- load constant Starting first thread.  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(54,13)
    stack0o := $stringLiteral10;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(54,13)
    call System.Console.WriteLine$System.String(stack0o);
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(55,13)
    assert t1 != null;
    call System.Threading.Thread.Start(t1);
    // ----- load constant Started first thread.  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(56,13)
    stack0o := $stringLiteral11;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(56,13)
    call System.Console.WriteLine$System.String(stack0o);
    // ----- load constant Starting second thread.  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(58,13)
    stack0o := $stringLiteral12;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(58,13)
    call System.Console.WriteLine$System.String(stack0o);
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(59,13)
    assert t2 != null;
    call System.Threading.Thread.Start(t2);
    // ----- load constant Started second thread.  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(60,13)
    stack0o := $stringLiteral13;
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(60,13)
    call System.Console.WriteLine$System.String(stack0o);
    // ----- load constant 0  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(62,18)
    i := 0;
    goto block3825$LoopPreheader;

  block3825:
    // ----- default loop invariant: $inv field  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(62,29)
    assert (forall $o: ref :: $Heap$block3825$LoopPreheader[$o, $inv] == $Heap[$o, $inv] || cast($Heap$block3825$LoopPreheader[$o, $allocated]):bool != true);
    assert (forall $o: ref :: cast($Heap$block3825$LoopPreheader[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
    // ----- load constant 30  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(62,29)
    stack0i := 30;
    // ----- binary operator  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(62,29)
    stack0b := i >= stack0i;
    // ----- branch  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(62,29)
    goto true3825to3859, false3825to3842;

  true3825to3859:
    assume stack0b == true;
    goto block3859;

  false3825to3842:
    assume stack0b == false;
    goto block3842;

  block3859:
    // ----- load constant 0  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(66,13)
    return.value := 0;
    // ----- branch
    goto block3876;

  block3842:
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(64,17)
    call System.Threading.Thread.Yield();
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(62,37)
    local3 := i;
    // ----- load constant 1
    stack0i := 1;
    // ----- binary operator
    stack0i := local3 + stack0i;
    // ----- copy
    i := stack0i;
    // ----- copy
    stack0i := local3;
    // ----- branch
    goto block3825;

  block3876:
    // ----- copy
    SS$Display.Return.Local := return.value;
    // ----- copy  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(67,10)
    stack0i := return.value;
    // ----- return  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(67,10)
    $result := stack0i;
    return;

  block3825$LoopPreheader:
    $Heap$block3825$LoopPreheader := $Heap;
    goto block3825;

}



axiom $IsClass(System.Threading.ThreadStart);

axiom $IsClass(System.MulticastDelegate);

axiom $IsClass(System.Delegate);

axiom System.Delegate <: System.Object && AsDirectSubClass(System.Delegate, System.Object) == System.Delegate;

axiom Implements(System.Delegate, System.ICloneable);

axiom (forall $K: name :: { System.Delegate <: $K } System.Delegate <: $K <==> System.Delegate == $K || System.Object <: $K || System.ICloneable <: $K);

function Inv_System.Delegate(object: ref, heap: [ref,name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref,name]any :: { Inv_System.Delegate(this, heap) } Inv_System.Delegate(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref,name]any :: { cast(heap[$o, $inv]):name <: System.Delegate } { Inv_System.Delegate($o, heap) } IsHeap(heap) && cast(heap[$o, $inv]):name <: System.Delegate ==> Inv_System.Delegate($o, heap));

axiom System.MulticastDelegate <: System.Delegate && AsDirectSubClass(System.MulticastDelegate, System.Delegate) == System.MulticastDelegate;

axiom (forall $K: name :: { System.MulticastDelegate <: $K } System.MulticastDelegate <: $K <==> System.MulticastDelegate == $K || System.Delegate <: $K);

function Inv_System.MulticastDelegate(object: ref, heap: [ref,name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref,name]any :: { Inv_System.MulticastDelegate(this, heap) } Inv_System.MulticastDelegate(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref,name]any :: { cast(heap[$o, $inv]):name <: System.MulticastDelegate } { Inv_System.MulticastDelegate($o, heap) } IsHeap(heap) && cast(heap[$o, $inv]):name <: System.MulticastDelegate ==> Inv_System.MulticastDelegate($o, heap));

axiom System.Threading.ThreadStart <: System.MulticastDelegate && AsDirectSubClass(System.Threading.ThreadStart, System.MulticastDelegate) == System.Threading.ThreadStart;

axiom (forall $K: name :: { System.Threading.ThreadStart <: $K } System.Threading.ThreadStart <: $K <==> System.Threading.ThreadStart == $K || System.MulticastDelegate <: $K);

axiom (forall $U: name :: { $U <: System.Threading.ThreadStart } $U <: System.Threading.ThreadStart ==> $U == System.Threading.ThreadStart);

function Inv_System.Threading.ThreadStart(object: ref, heap: [ref,name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref,name]any :: { Inv_System.Threading.ThreadStart(this, heap) } Inv_System.Threading.ThreadStart(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref,name]any :: { cast(heap[$o, $inv]):name <: System.Threading.ThreadStart } { Inv_System.Threading.ThreadStart($o, heap) } IsHeap(heap) && cast(heap[$o, $inv]):name <: System.Threading.ThreadStart ==> Inv_System.Threading.ThreadStart($o, heap));

procedure System.Threading.ThreadStart..ctor$System.Object$System.IntPtr(this: ref, object$in: ref, method$in: ref);
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);
  ensures cast($Heap[this, $writable]):bool == true && cast($Heap[this, $inv]):name == System.Threading.ThreadStart;



axiom $IsClass(System.Threading.Thread);

axiom System.Threading.Thread <: System.Object && AsDirectSubClass(System.Threading.Thread, System.Object) == System.Threading.Thread;

axiom (forall $K: name :: { System.Threading.Thread <: $K } System.Threading.Thread <: $K <==> System.Threading.Thread == $K || System.Object <: $K);

axiom (forall $U: name :: { $U <: System.Threading.Thread } $U <: System.Threading.Thread ==> $U == System.Threading.Thread);

function Inv_System.Threading.Thread(object: ref, heap: [ref,name]any) returns (result: bool);

axiom (forall this: ref, heap: [ref,name]any :: { Inv_System.Threading.Thread(this, heap) } Inv_System.Threading.Thread(this, heap) <==> true);

axiom (forall $o: ref, heap: [ref,name]any :: { cast(heap[$o, $inv]):name <: System.Threading.Thread } { Inv_System.Threading.Thread($o, heap) } IsHeap(heap) && cast(heap[$o, $inv]):name <: System.Threading.Thread ==> Inv_System.Threading.Thread($o, heap));

procedure System.Threading.Thread..ctor$System.Threading.ThreadStart(this: ref, start$in: ref);
  requires start$in == null || (cast($Heap[start$in, $writable]):bool == true && cast($Heap[start$in, $inv]):name == $typeof(start$in));
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) && ($o != this || !(System.Threading.Thread <: DeclType($f))) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: $o == this || old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: $o == this || old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);
  ensures cast($Heap[this, $writable]):bool == true && cast($Heap[this, $inv]):name == System.Threading.Thread;
  ensures $Heap[this, $sharingMode] == $SharingMode_Unshared;



procedure System.Threading.Thread.Start(this: ref);
  requires cast($Heap[this, $writable]):bool == true && cast($Heap[this, $inv]):name == $typeof(this);
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);



procedure Microsoft.Singularity.Applications.ThreadTest..ctor(this: ref);
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) && ($o != this || !(Microsoft.Singularity.Applications.ThreadTest <: DeclType($f))) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: $o == this || old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: $o == this || old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);
  ensures cast($Heap[this, $writable]):bool == true && cast($Heap[this, $inv]):name == Microsoft.Singularity.Applications.ThreadTest;
  ensures $Heap[this, $sharingMode] == $SharingMode_Unshared;



implementation Microsoft.Singularity.Applications.ThreadTest..ctor(this: ref)
{

  entry:
    assume IsHeap($Heap);
    assume $IsNotNull(this, Microsoft.Singularity.Applications.ThreadTest);
    assume cast($Heap[this, $allocated]):bool == true;
    assume cast($Heap[this, $writable]):bool == true && cast($Heap[this, $inv]):name == System.Object;
    goto block4777;

  block4777:
    goto block4794;

  block4794:
    // ----- call  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(17,18)
    assert this != null;
    call System.Object..ctor(this);
    // ----- return  ----- C:\Maf\Singularity\base\Applications\Tests\ThreadTest\ThreadTest.cs(17,28)
    assert this != null;
    assert cast($Heap[this, $writable]):bool == true && System.Object <: cast($Heap[this, $inv]):name;
    assert cast($Heap[this, $writable]):bool == true && cast($Heap[this, $inv]):name == System.Object;
    assert Inv_Microsoft.Singularity.Applications.ThreadTest(this, $Heap);
    $Heap[this, $inv] := Microsoft.Singularity.Applications.ThreadTest;
    return;

}



procedure System.Object..ctor(this: ref);
  modifies $Heap;
  free ensures IsHeap($Heap);
  free ensures (forall $o: ref, $f: name :: $f != $inv && $o != null && cast(old($Heap)[$o, $allocated]):bool == true && cast(old($Heap)[$o, $writable]):bool == true && (!IsStaticField($f) || !IsDirectlyModifiableField($f)) && ($o != this || !(System.Object <: DeclType($f))) ==> old($Heap[$o, $f]) == $Heap[$o, $f]);
  free ensures (forall $o: ref :: $o == this || old($Heap)[$o, $inv] == $Heap[$o, $inv] || cast(old($Heap)[$o, $allocated]):bool != true);
  free ensures (forall $o: ref :: cast(old($Heap)[$o, $allocated]):bool ==> cast($Heap[$o, $allocated]):bool);
  free ensures (forall $o: ref :: $o == this || old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]);
  ensures cast($Heap[this, $writable]):bool == true && cast($Heap[this, $inv]):name == System.Object;
  ensures $Heap[this, $sharingMode] == $SharingMode_Unshared;



type ref, name, any;
const null : ref;
