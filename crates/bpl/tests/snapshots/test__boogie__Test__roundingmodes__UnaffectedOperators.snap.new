---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "fp.add",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "ADD",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "rmode",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "float24e8",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "fp.sub",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "SUB",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "rmode",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "float24e8",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "fp.mul",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MUL",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "rmode",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "float24e8",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "fp.div",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "DIV",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "rmode",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "float24e8",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "float24e8",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "float24e8",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "b",
                                ),
                                op: Neq,
                                rhs: Float(
                                    Float {
                                        value: Plain(
                                            PlainFloatValue {
                                                is_neg: false,
                                                whole: "0",
                                                fract: "0",
                                                exp: Exp {
                                                    is_neg: false,
                                                    digits: "0",
                                                },
                                            },
                                        ),
                                        sig_size: "24",
                                        exp_size: "8",
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "c",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "float24e8",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "float24e8",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "c",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "b",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "ADD",
                                                args: [
                                                    Var(
                                                        "RNE",
                                                    ),
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "c",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "d",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "c",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Sub,
                                                rhs: Var(
                                                    "b",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "SUB",
                                                args: [
                                                    Var(
                                                        "RNE",
                                                    ),
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "c",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "d",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "c",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Factor(
                                            Factor {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: Mul,
                                                rhs: Var(
                                                    "b",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "MUL",
                                                args: [
                                                    Var(
                                                        "RNE",
                                                    ),
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "c",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "d",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "c",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Factor(
                                            Factor {
                                                lhs: Var(
                                                    "a",
                                                ),
                                                op: RealDiv,
                                                rhs: Var(
                                                    "b",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "DIV",
                                                args: [
                                                    Var(
                                                        "RNE",
                                                    ),
                                                    Var(
                                                        "a",
                                                    ),
                                                    Var(
                                                        "b",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "c",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "d",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
function {:builtin "fp.add"} ADD(rmode, float24e8, float24e8): float24e8;

function {:builtin "fp.sub"} SUB(rmode, float24e8, float24e8): float24e8;

function {:builtin "fp.mul"} MUL(rmode, float24e8, float24e8): float24e8;

function {:builtin "fp.div"} DIV(rmode, float24e8, float24e8): float24e8;

procedure foo(a: float24e8, b: float24e8)
  requires b != 0x0.0e0f24e8;
{
  var c: float24e8;
  var d: float24e8;

  c := a + b;
  d := ADD(RNE, a, b);
  assert c == d;
  c := a - b;
  d := SUB(RNE, a, b);
  assert c == d;
  c := a * b;
  d := MUL(RNE, a, b);
  assert c == d;
  c := a / b;
  d := DIV(RNE, a, b);
  assert c == d;
}

[Input - ../../vendor/boogie/Test/roundingmodes/UnaffectedOperators.bpl]
// RUN: %boogie -proverWarnings:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

function {:builtin "fp.add"} ADD(rmode, float24e8, float24e8) returns (float24e8);
function {:builtin "fp.sub"} SUB(rmode, float24e8, float24e8) returns (float24e8);
function {:builtin "fp.mul"} MUL(rmode, float24e8, float24e8) returns (float24e8);
function {:builtin "fp.div"} DIV(rmode, float24e8, float24e8) returns (float24e8);

procedure foo(a : float24e8, b : float24e8)
requires b != 0x0.0e0f24e8;
{
  var c : float24e8;
  var d : float24e8;

  c := a + b;
  d := ADD(RNE, a, b);
  assert (c == d);

  c := a - b;
  d := SUB(RNE, a, b);
  assert (c == d);

  c := a * b;
  d := MUL(RNE, a, b);
  assert (c == d);

  c := a / b;
  d := DIV(RNE, a, b);
  assert (c == d);

}
