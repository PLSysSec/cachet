---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapConst",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapConst",
            type_params: [
                "T",
                "U",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "U",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: App(
                            TypeApp {
                                head: "U",
                                tail: None,
                            },
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapEq",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapEq",
            type_params: [
                "T",
                "U",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "U",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "U",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapIte",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapIte",
            type_params: [
                "T",
                "U",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "U",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "U",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: App(
                            TypeApp {
                                head: "U",
                                tail: None,
                            },
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapOr",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapOr",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapAnd",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapAnd",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapNot",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapNot",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapImp",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapImp",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapIff",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapIff",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "MapDiff",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "MapAnd",
                        args: [
                            Var(
                                "a",
                            ),
                            FuncCall(
                                FuncCall {
                                    target: "MapNot",
                                    args: [
                                        Var(
                                            "b",
                                        ),
                                    ],
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapAdd",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapAdd",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapSub",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapSub",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapMul",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapMul",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapDiv",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapDiv",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapMod",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapMod",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapGt",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapGt",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapGe",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapGe",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapLt",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapLt",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapLe",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapLe",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "MapUnit",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Array(
                    ArrayExpr {
                        expr: FuncCall(
                            FuncCall {
                                target: "MapConst",
                                args: [
                                    BoolLit(
                                        false,
                                    ),
                                ],
                            },
                        ),
                        subscripts: [
                            ArraySubscript {
                                keys: [
                                    Var(
                                        "t",
                                    ),
                                ],
                                value: Some(
                                    BoolLit(
                                        true,
                                    ),
                                ),
                            },
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Id",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            body: Some(
                Var(
                    "t",
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Default",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Vec",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "Vec",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "contents",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "len",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "Identity",
                ],
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "Identity",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "AtLeast",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "MapLe",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "MapConst",
                                    args: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                            Var(
                                "Identity",
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Range",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "from",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "n",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "MapDiff",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "AtLeast",
                                    args: [
                                        Var(
                                            "from",
                                        ),
                                    ],
                                },
                            ),
                            FuncCall(
                                FuncCall {
                                    target: "AtLeast",
                                    args: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "from",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "n",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "ctor",
                        params: [
                            String(
                                StringLit {
                                    text: "Vec",
                                },
                            ),
                        ],
                    },
                ),
            ],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Vec",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "len#Vec",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "contents#Vec",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "MapIte",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Range",
                                                    args: [
                                                        Nat(
                                                            "0",
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "len#Vec",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "MapConst",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Default",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "contents#Vec",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "MapConst",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Default",
                                                    args: [],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "ctor",
                        params: [
                            String(
                                StringLit {
                                    text: "Vec",
                                },
                            ),
                        ],
                    },
                ),
            ],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Vec",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "T",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "len#Vec",
                                            args: [
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "len#Vec",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                op: Ge,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Empty",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "Vec",
                        args: [
                            FuncCall(
                                FuncCall {
                                    target: "MapConst",
                                    args: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Default",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                            Nat(
                                "0",
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Append",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "Vec",
                        args: [
                            Array(
                                ArrayExpr {
                                    expr: FuncCall(
                                        FuncCall {
                                            target: "contents#Vec",
                                            args: [
                                                Var(
                                                    "v",
                                                ),
                                            ],
                                        },
                                    ),
                                    subscripts: [
                                        ArraySubscript {
                                            keys: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "len#Vec",
                                                        args: [
                                                            Var(
                                                                "v",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            value: Some(
                                                Var(
                                                    "x",
                                                ),
                                            ),
                                        },
                                    ],
                                },
                            ),
                            Term(
                                Term {
                                    lhs: FuncCall(
                                        FuncCall {
                                            target: "len#Vec",
                                            args: [
                                                Var(
                                                    "v",
                                                ),
                                            ],
                                        },
                                    ),
                                    op: Add,
                                    rhs: Nat(
                                        "1",
                                    ),
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Update",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: Some(
                IfThenElse(
                    IfThenElseExpr {
                        cond: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Le,
                                        rhs: Var(
                                            "i",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "i",
                                        ),
                                        op: Lt,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "len#Vec",
                                                args: [
                                                    Var(
                                                        "v",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        then: FuncCall(
                            FuncCall {
                                target: "Vec",
                                args: [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "contents#Vec",
                                                    args: [
                                                        Var(
                                                            "v",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Var(
                                                            "x",
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "len#Vec",
                                            args: [
                                                Var(
                                                    "v",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        else_: Var(
                            "v",
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Nth",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            body: Some(
                Array(
                    ArrayExpr {
                        expr: FuncCall(
                            FuncCall {
                                target: "contents#Vec",
                                args: [
                                    Var(
                                        "v",
                                    ),
                                ],
                            },
                        ),
                        subscripts: [
                            ArraySubscript {
                                keys: [
                                    Var(
                                        "i",
                                    ),
                                ],
                                value: None,
                            },
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Len",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "len#Vec",
                        args: [
                            Var(
                                "v",
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Concat",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v1",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v2",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "Vec",
                        args: [
                            Quant(
                                QuantExpr {
                                    kind: Lambda,
                                    body: QuantBody {
                                        type_params: [],
                                        bound_vars: [
                                            AttrTypedIdentsWhere {
                                                attrs: [
                                                    Attr(
                                                        AttrContent {
                                                            ident: "pool",
                                                            params: [
                                                                String(
                                                                    StringLit {
                                                                        text: "Concat",
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                typed_idents_where: TypedIdentsWhere {
                                                    typed_idents: TypedIdents {
                                                        idents: [
                                                            "i",
                                                        ],
                                                        type_: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                    where_: None,
                                                },
                                            },
                                        ],
                                        attrs: [],
                                        expr: IfThenElse(
                                            IfThenElseExpr {
                                                cond: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "i",
                                                        ),
                                                        op: Lt,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                                then: FuncCall(
                                                    FuncCall {
                                                        target: "Default",
                                                        args: [],
                                                    },
                                                ),
                                                else_: IfThenElse(
                                                    IfThenElseExpr {
                                                        cond: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Nat(
                                                                            "0",
                                                                        ),
                                                                        op: Le,
                                                                        rhs: Var(
                                                                            "i",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "i",
                                                                        ),
                                                                        op: Lt,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "Vec_Len",
                                                                                args: [
                                                                                    Var(
                                                                                        "v1",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        then: FuncCall(
                                                            FuncCall {
                                                                target: "Vec_Nth",
                                                                args: [
                                                                    Var(
                                                                        "v1",
                                                                    ),
                                                                    Var(
                                                                        "i",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        else_: IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "Vec_Len",
                                                                                        args: [
                                                                                            Var(
                                                                                                "v1",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "i",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Term(
                                                                                    Term {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "Vec_Len",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "v1",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Add,
                                                                                        rhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "Vec_Len",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "v2",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                then: FuncCall(
                                                                    FuncCall {
                                                                        target: "Vec_Nth",
                                                                        args: [
                                                                            Var(
                                                                                "v2",
                                                                            ),
                                                                            Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "i",
                                                                                    ),
                                                                                    op: Sub,
                                                                                    rhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "Vec_Len",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "v1",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                else_: FuncCall(
                                                                    FuncCall {
                                                                        target: "Default",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                },
                            ),
                            Term(
                                Term {
                                    lhs: FuncCall(
                                        FuncCall {
                                            target: "Vec_Len",
                                            args: [
                                                Var(
                                                    "v1",
                                                ),
                                            ],
                                        },
                                    ),
                                    op: Add,
                                    rhs: FuncCall(
                                        FuncCall {
                                            target: "Vec_Len",
                                            args: [
                                                Var(
                                                    "v2",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Slice",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "j",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: Some(
                IfThenElse(
                    IfThenElseExpr {
                        cond: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "i",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "j",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "j",
                                        ),
                                        op: Le,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "len#Vec",
                                                args: [
                                                    Var(
                                                        "v",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        then: FuncCall(
                            FuncCall {
                                target: "Vec",
                                args: [
                                    Quant(
                                        QuantExpr {
                                            kind: Lambda,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [
                                                            Attr(
                                                                AttrContent {
                                                                    ident: "pool",
                                                                    params: [
                                                                        String(
                                                                            StringLit {
                                                                                text: "Slice",
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "k",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: IfThenElse(
                                                    IfThenElseExpr {
                                                        cond: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "k",
                                                                ),
                                                                op: Lt,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                        then: FuncCall(
                                                            FuncCall {
                                                                target: "Default",
                                                                args: [],
                                                            },
                                                        ),
                                                        else_: IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                                op: Le,
                                                                                rhs: Var(
                                                                                    "k",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "k",
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Term(
                                                                                    Term {
                                                                                        lhs: Var(
                                                                                            "j",
                                                                                        ),
                                                                                        op: Sub,
                                                                                        rhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                then: FuncCall(
                                                                    FuncCall {
                                                                        target: "Vec_Nth",
                                                                        args: [
                                                                            Var(
                                                                                "v",
                                                                            ),
                                                                            Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "k",
                                                                                    ),
                                                                                    op: Add,
                                                                                    rhs: Var(
                                                                                        "i",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                else_: FuncCall(
                                                                    FuncCall {
                                                                        target: "Default",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "j",
                                            ),
                                            op: Sub,
                                            rhs: Var(
                                                "i",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                        else_: FuncCall(
                            FuncCall {
                                target: "Vec_Empty",
                                args: [],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Swap",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "j",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: Some(
                IfThenElse(
                    IfThenElseExpr {
                        cond: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Nat(
                                                                    "0",
                                                                ),
                                                                op: Le,
                                                                rhs: Var(
                                                                    "i",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Lt,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "len#Vec",
                                                                        args: [
                                                                            Var(
                                                                                "v",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Nat(
                                                            "0",
                                                        ),
                                                        op: Le,
                                                        rhs: Var(
                                                            "j",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "j",
                                                ),
                                                op: Lt,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "len#Vec",
                                                        args: [
                                                            Var(
                                                                "v",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "i",
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "j",
                                        ),
                                    },
                                ),
                            },
                        ),
                        then: FuncCall(
                            FuncCall {
                                target: "Vec",
                                args: [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "contents#Vec",
                                                    args: [
                                                        Var(
                                                            "v",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Array(
                                                            ArrayExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "contents#Vec",
                                                                        args: [
                                                                            Var(
                                                                                "v",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "j",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                },
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "j",
                                                        ),
                                                    ],
                                                    value: Some(
                                                        Array(
                                                            ArrayExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "contents#Vec",
                                                                        args: [
                                                                            Var(
                                                                                "v",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "len#Vec",
                                            args: [
                                                Var(
                                                    "v",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        else_: Var(
                            "v",
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Vec_Remove",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Vec",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Vec",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: Some(
                IfThenElse(
                    IfThenElseExpr {
                        cond: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "0",
                                ),
                                op: Lt,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "len#Vec",
                                        args: [
                                            Var(
                                                "v",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        then: FuncCall(
                            FuncCall {
                                target: "Vec",
                                args: [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "contents#Vec",
                                                    args: [
                                                        Var(
                                                            "v",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Term(
                                                            Term {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "len#Vec",
                                                                        args: [
                                                                            Var(
                                                                                "v",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                    value: Some(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Default",
                                                                args: [],
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                    Term(
                                        Term {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "len#Vec",
                                                    args: [
                                                        Var(
                                                            "v",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                        else_: FuncCall(
                            FuncCall {
                                target: "Vec_Empty",
                                args: [],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Vec_Ext",
                type_params: [
                    "T",
                ],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "A",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "T",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "B",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Vec",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "T",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "A",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "B",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Vec_Len",
                                                        args: [
                                                            Var(
                                                                "A",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Neq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Vec_Len",
                                                        args: [
                                                            Var(
                                                                "B",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Vec_Nth",
                                                args: [
                                                    Var(
                                                        "A",
                                                    ),
                                                    Var(
                                                        "i",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Vec_Nth",
                                                args: [
                                                    Var(
                                                        "B",
                                                    ),
                                                    Var(
                                                        "i",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "Seq",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Seq",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.empty",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Empty",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.len",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Len",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.++",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Concat",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "b",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.unit",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Unit",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.nth",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Nth",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "seq.extract",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "Seq_Extract",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "a",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pos",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "length",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
]

[Printed]
function {:builtin "MapConst"} MapConst<T, U>(U): [T]U;

function {:builtin "MapEq"} MapEq<T, U>([T]U, [T]U): [T]bool;

function {:builtin "MapIte"} MapIte<T, U>([T]bool, [T]U, [T]U): [T]U;

function {:builtin "MapOr"} MapOr<T>([T]bool, [T]bool): [T]bool;

function {:builtin "MapAnd"} MapAnd<T>([T]bool, [T]bool): [T]bool;

function {:builtin "MapNot"} MapNot<T>([T]bool): [T]bool;

function {:builtin "MapImp"} MapImp<T>([T]bool, [T]bool): [T]bool;

function {:builtin "MapIff"} MapIff<T>([T]bool, [T]bool): [T]bool;

function {:inline} MapDiff<T>(a: [T]bool, b: [T]bool): [T]bool {
  MapAnd(a, MapNot(b))
}

function {:builtin "MapAdd"} MapAdd<T>([T]int, [T]int): [T]int;

function {:builtin "MapSub"} MapSub<T>([T]int, [T]int): [T]int;

function {:builtin "MapMul"} MapMul<T>([T]int, [T]int): [T]int;

function {:builtin "MapDiv"} MapDiv<T>([T]int, [T]int): [T]int;

function {:builtin "MapMod"} MapMod<T>([T]int, [T]int): [T]int;

function {:builtin "MapGt"} MapGt<T>([T]int, [T]int): [T]bool;

function {:builtin "MapGe"} MapGe<T>([T]int, [T]int): [T]bool;

function {:builtin "MapLt"} MapLt<T>([T]int, [T]int): [T]bool;

function {:builtin "MapLe"} MapLe<T>([T]int, [T]int): [T]bool;

function {:inline} MapUnit<T>(t: T): [T]bool {
  MapConst(false)[t := true]
}

function {:inline} Id<T>(t: T): T {
  t
}

function Default<T>(): T;

type {:datatype} Vec _;

function {:constructor} Vec<T>(contents: [int]T, len: int): Vec T;

const Identity: [int]int;

axiom (forall x: int :: Identity[x] == x);

function {:inline} AtLeast(x: int): [int]bool {
  MapLe(MapConst(x), Identity)
}

function {:inline} Range(from: int, n: int): [int]bool {
  MapDiff(AtLeast(from), AtLeast(from + n))
}

axiom {:ctor "Vec"} (forall <T> x: Vec T :: {len#Vec(x)} {contents#Vec(x)} MapIte(Range(0, len#Vec(x)), MapConst(Default()), contents#Vec(x)) == MapConst(Default()));

axiom {:ctor "Vec"} (forall <T> x: Vec T :: {len#Vec(x)} len#Vec(x) >= 0);

function {:inline} Vec_Empty<T>(): Vec T {
  Vec(MapConst(Default()), 0)
}

function {:inline} Vec_Append<T>(v: Vec T, x: T): Vec T {
  Vec(contents#Vec(v)[len#Vec(v) := x], len#Vec(v) + 1)
}

function {:inline} Vec_Update<T>(v: Vec T, i: int, x: T): Vec T {
  if 0 <= i && i < len#Vec(v) then Vec(contents#Vec(v)[i := x], len#Vec(v)) else v
}

function {:inline} Vec_Nth<T>(v: Vec T, i: int): T {
  contents#Vec(v)[i]
}

function {:inline} Vec_Len<T>(v: Vec T): int {
  len#Vec(v)
}

function {:inline} Vec_Concat<T>(v1: Vec T, v2: Vec T): Vec T {
  Vec((lambda {:pool "Concat"} i: int :: if i < 0 then Default() else if 0 <= i && i < Vec_Len(v1) then Vec_Nth(v1, i) else if Vec_Len(v1) <= i && i < Vec_Len(v1) + Vec_Len(v2) then Vec_Nth(v2, i - Vec_Len(v1)) else Default()), Vec_Len(v1) + Vec_Len(v2))
}

function {:inline} Vec_Slice<T>(v: Vec T, i: int, j: int): Vec T {
  if 0 <= i && i < j && j <= len#Vec(v) then Vec((lambda {:pool "Slice"} k: int :: if k < 0 then Default() else if 0 <= k && k < j - i then Vec_Nth(v, k + i) else Default()), j - i) else Vec_Empty()
}

function {:inline} Vec_Swap<T>(v: Vec T, i: int, j: int): Vec T {
  if 0 <= i && i < len#Vec(v) && 0 <= j && j < len#Vec(v) && i != j then Vec(contents#Vec(v)[i := contents#Vec(v)[j]][j := contents#Vec(v)[i]], len#Vec(v)) else v
}

function {:inline} Vec_Remove<T>(v: Vec T): Vec T {
  if 0 < len#Vec(v) then Vec(contents#Vec(v)[len#Vec(v) - 1 := Default()], len#Vec(v) - 1) else Vec_Empty()
}

procedure Vec_Ext<T>(A: Vec T, B: Vec T) returns (i: int);
  ensures A == B || Vec_Len(A) != Vec_Len(B) || Vec_Nth(A, i) != Vec_Nth(B, i);

type {:builtin "Seq"} Seq _;

function {:builtin "seq.empty"} Seq_Empty<T>(): Seq T;

function {:builtin "seq.len"} Seq_Len<T>(a: Seq T): int;

function {:builtin "seq.++"} Seq_Concat<T>(a: Seq T, b: Seq T): Seq T;

function {:builtin "seq.unit"} Seq_Unit<T>(v: T): Seq T;

function {:builtin "seq.nth"} Seq_Nth<T>(a: Seq T, i: int): T;

function {:builtin "seq.extract"} Seq_Extract<T>(a: Seq T, pos: int, length: int): Seq T;

[Input - ../../vendor/boogie/Source/Core/LibraryDefinitions.bpl]
/// maps
function {:builtin "MapConst"} MapConst<T,U>(U): [T]U;
function {:builtin "MapEq"} MapEq<T,U>([T]U, [T]U) : [T]bool;
function {:builtin "MapIte"} MapIte<T,U>([T]bool, [T]U, [T]U) : [T]U;

function {:builtin "MapOr"} MapOr<T>([T]bool, [T]bool) : [T]bool;
function {:builtin "MapAnd"} MapAnd<T>([T]bool, [T]bool) : [T]bool;
function {:builtin "MapNot"} MapNot<T>([T]bool) : [T]bool;
function {:builtin "MapImp"} MapImp<T>([T]bool, [T]bool) : [T]bool;
function {:builtin "MapIff"} MapIff<T>([T]bool, [T]bool) : [T]bool;
function {:inline} MapDiff<T>(a: [T]bool, b: [T]bool) : [T]bool
{
  MapAnd(a, MapNot(b))
}

function {:builtin "MapAdd"} MapAdd<T>([T]int, [T]int) : [T]int;
function {:builtin "MapSub"} MapSub<T>([T]int, [T]int) : [T]int;
function {:builtin "MapMul"} MapMul<T>([T]int, [T]int) : [T]int;
function {:builtin "MapDiv"} MapDiv<T>([T]int, [T]int) : [T]int;
function {:builtin "MapMod"} MapMod<T>([T]int, [T]int) : [T]int;
function {:builtin "MapGt"} MapGt<T>([T]int, [T]int) : [T]bool;
function {:builtin "MapGe"} MapGe<T>([T]int, [T]int) : [T]bool;
function {:builtin "MapLt"} MapLt<T>([T]int, [T]int) : [T]bool;
function {:builtin "MapLe"} MapLe<T>([T]int, [T]int) : [T]bool;

function {:inline} MapUnit<T>(t: T): [T]bool
{
  MapConst(false)[t := true]
}

function {:inline} Id<T>(t: T): T
{
  t
}

function Default<T>(): T;

/// vectors
type {:datatype} Vec _;
function {:constructor} Vec<T>(contents: [int]T, len: int): Vec T;

const Identity: [int]int;
axiom (forall x: int :: Identity[x] == x);

function {:inline} AtLeast(x: int): [int]bool
{
  MapLe(MapConst(x), Identity)
}
function {:inline} Range(from: int, n: int): [int]bool {
  MapDiff(AtLeast(from), AtLeast(from + n))
}

axiom {:ctor "Vec"} (forall<T> x: Vec T :: {len#Vec(x)}{contents#Vec(x)} MapIte(Range(0, len#Vec(x)), MapConst(Default()), contents#Vec(x)) == MapConst(Default()));
axiom {:ctor "Vec"} (forall<T> x: Vec T :: {len#Vec(x)} len#Vec(x) >= 0);

function {:inline} Vec_Empty<T>(): Vec T
{
  Vec(MapConst(Default()), 0)
}
function {:inline} Vec_Append<T>(v: Vec T, x: T) : Vec T
{
  Vec(contents#Vec(v)[len#Vec(v) := x], len#Vec(v) + 1)
}
function {:inline} Vec_Update<T>(v: Vec T, i: int, x: T) : Vec T
{
  if (0 <= i && i < len#Vec(v)) then Vec(contents#Vec(v)[i := x], len#Vec(v)) else v
}
function {:inline} Vec_Nth<T>(v: Vec T, i: int): T
{
  contents#Vec(v)[i]
}
function {:inline} Vec_Len<T>(v: Vec T): int
{
  len#Vec(v)
}

function {:inline} Vec_Concat<T>(v1: Vec T, v2: Vec T): Vec T {
    Vec(
        (lambda {:pool "Concat"} i: int ::
            if (i < 0) then Default()
            else if (0 <= i && i < Vec_Len(v1)) then Vec_Nth(v1, i)
            else if (Vec_Len(v1) <= i && i < Vec_Len(v1) + Vec_Len(v2)) then Vec_Nth(v2, i - Vec_Len(v1))
            else Default()),
        Vec_Len(v1) + Vec_Len(v2)
        )
}

function {:inline} Vec_Slice<T>(v: Vec T, i: int, j: int): Vec T {
    if (0 <= i && i < j && j <= len#Vec(v)) then
        Vec(
            (lambda {:pool "Slice"} k: int ::
                if (k < 0) then Default()
                else if (0 <= k && k < j - i) then Vec_Nth(v, k + i)
                else Default()),
            j - i
            )
    else Vec_Empty()
}

function {:inline} Vec_Swap<T>(v: Vec T, i: int, j: int): Vec T {
    if (0 <= i && i < len#Vec(v) && 0 <= j && j < len#Vec(v) && i != j)
    then Vec(contents#Vec(v)[i := contents#Vec(v)[j]][j := contents#Vec(v)[i]], len#Vec(v))
    else v
}

function {:inline} Vec_Remove<T>(v: Vec T): Vec T {
    if (0 < len#Vec(v))
    then Vec(contents#Vec(v)[len#Vec(v)-1 := Default()], len#Vec(v) - 1)
    else Vec_Empty()
}

// extensionality lemma to be used explicitly by the programmer
procedure Vec_Ext<T>(A: Vec T, B: Vec T) returns (i: int);
ensures A == B || Vec_Len(A) != Vec_Len(B) || Vec_Nth(A, i) != Vec_Nth(B, i);

/// sequences
type {:builtin "Seq"} Seq _;
function {:builtin "seq.empty"} Seq_Empty<T>(): Seq T;
function {:builtin "seq.len"} Seq_Len<T>(a: Seq T): int;
function {:builtin "seq.++"} Seq_Concat<T>(a: Seq T, b: Seq T): Seq T;
function {:builtin "seq.unit"} Seq_Unit<T>(v: T): Seq T;
function {:builtin "seq.nth"} Seq_Nth<T>(a: Seq T, i: int): T;
function {:builtin "seq.extract"} Seq_Extract<T>(a: Seq T, pos: int, length: int): Seq T;
