---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "never_pattern",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "f1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "never_pattern",
                        params: [
                            Expr(
                                BoolLit(
                                    false,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "f2",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "f3",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "f1",
                                                                                args: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "f2",
                                                                                args: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "f3",
                                                                        args: [
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Gt,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f2",
                                                    args: [
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f3",
                                                    args: [
                                                        Nat(
                                                            "4",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "bar",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "f1",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Gt,
                                                                                rhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "f2",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Gt,
                                                                                rhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "f3",
                                                                                args: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "f1",
                                                                        args: [
                                                                            Nat(
                                                                                "7",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Nat(
                                                                    "3",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f1",
                                                    args: [
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "bar1",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Attr(
                                                        AttrContent {
                                                            ident: "nopats",
                                                            params: [
                                                                Expr(
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "f2",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                expr: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "f1",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Gt,
                                                                                rhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "f2",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Gt,
                                                                                rhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "f3",
                                                                                args: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "f1",
                                                                        args: [
                                                                            Nat(
                                                                                "7",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Nat(
                                                                    "3",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f1",
                                                    args: [
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "bar2",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [
                                                    Attr(
                                                        AttrContent {
                                                            ident: "nopats",
                                                            params: [
                                                                Expr(
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "f2",
                                                                            args: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                                expr: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "f1",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Gt,
                                                                                rhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "f2",
                                                                                        args: [
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Gt,
                                                                                rhs: Nat(
                                                                                    "0",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "f3",
                                                                                args: [
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "f1",
                                                                        args: [
                                                                            Nat(
                                                                                "7",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Nat(
                                                                    "3",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f2",
                                                    args: [
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "never_pattern",
                        params: [],
                    },
                ),
            ],
            ident: "P",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "F",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "G",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "NestedBinders",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "A",
                                        "B",
                                        "C",
                                        "D",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "A",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "s",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Quant(
                                                            QuantExpr {
                                                                kind: ForAll,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "x",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Int,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [
                                                                        Trigger(
                                                                            [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "F",
                                                                                        args: [
                                                                                            Var(
                                                                                                "s",
                                                                                            ),
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        ),
                                                                    ],
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "F",
                                                                                        args: [
                                                                                            Var(
                                                                                                "s",
                                                                                            ),
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "G",
                                                                args: [
                                                                    Var(
                                                                        "s",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "End",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "B",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "s",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Quant(
                                                    QuantExpr {
                                                        kind: Exists,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "x",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [
                                                                Trigger(
                                                                    [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "F",
                                                                                args: [
                                                                                    Var(
                                                                                        "s",
                                                                                    ),
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "P",
                                                                    args: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "F",
                                                                                args: [
                                                                                    Var(
                                                                                        "s",
                                                                                    ),
                                                                                    Var(
                                                                                        "x",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "End",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "C",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "s",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "m",
                                                                ],
                                                                type_: Map(
                                                                    MapType {
                                                                        type_params: [],
                                                                        keys: [
                                                                            Atom(
                                                                                Int,
                                                                            ),
                                                                        ],
                                                                        value: Atom(
                                                                            Bool,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Quant(
                                                            QuantExpr {
                                                                kind: Lambda,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "x",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Int,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "P",
                                                                            args: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "F",
                                                                                        args: [
                                                                                            Var(
                                                                                                "s",
                                                                                            ),
                                                                                            Var(
                                                                                                "x",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "m",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "End",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "D",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x0",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Quant(
                                                    QuantExpr {
                                                        kind: ForAll,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "x1",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "P",
                                                                    args: [
                                                                        Var(
                                                                            "x1",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "End",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "End",
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
function {:never_pattern true} f1(x: int): int;

function {:never_pattern false} f2(x: int): int;

function f3(x: int): int;

procedure foo() {
  assume (forall x: int :: f1(x) > 0 && f2(x) > 0 && f3(x) > 0);
  assert f2(3) > 0;
  assert f3(4) > 0;
}

procedure bar() {
  assume (forall x: int :: f1(x) > 0 && f2(x) > 0 && f3(x) > 0 && f1(7) == 3);
  assert f1(3) > 0;
}

procedure bar1() {
  assume (forall x: int :: {:nopats f2(x)} f1(x) > 0 && f2(x) > 0 && f3(x) > 0 && f1(7) == 3);
  assert f1(3) > 0;
}

procedure bar2() {
  assume (forall x: int :: {:nopats f2(x)} f1(x) > 0 && f2(x) > 0 && f3(x) > 0 && f1(7) == 3);
  assert f2(3) > 0;
}

function {:never_pattern} P(int): bool;

function F(int, int): int;

function G(int): bool;

procedure NestedBinders() {
  goto A, B, C, D;
  A:
  assume (forall s: int :: (forall x: int :: {F(s, x)} P(F(s, x))) ==> G(s));
  goto End;
  B:
  assume (forall s: int :: (exists x: int :: {F(s, x)} P(F(s, x))));
  goto End;
  C:
  assume (forall s: int, m: [int]bool :: (lambda x: int :: P(F(s, x))) == m);
  goto End;
  D:
  assume (forall x0: int :: (forall x1: int :: P(x1)));
  goto End;
  End:
}

[Input - ../../vendor/boogie/Test/test2/NeverPattern.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
function {:never_pattern true} f1(x:int) returns(int);
function {:never_pattern false} f2(x:int) returns(int);
function f3(x:int) returns(int);


procedure foo()
{
  assume (forall x : int :: f1(x) > 0 && f2(x) > 0 && f3(x) > 0);
  assert f2(3) > 0;
  assert f3(4) > 0;
}

procedure bar()
{
  assume (forall x : int :: f1(x) > 0 && f2(x) > 0 && f3(x) > 0 && f1(7) == 3);
  assert f1(3) > 0;
}

procedure bar1()
{
  assume (forall x : int :: {:nopats f2(x)} f1(x) > 0 && f2(x) > 0 && f3(x) > 0 && f1(7) == 3);
  assert f1(3) > 0;
}

procedure bar2()
{
  assume (forall x : int :: {:nopats f2(x)} f1(x) > 0 && f2(x) > 0 && f3(x) > 0 && f1(7) == 3);
  assert f2(3) > 0;
}

// ----- nested binders -----

function {:never_pattern} P(int): bool;
function F(int, int): int;
function G(int): bool;

procedure NestedBinders()
{
  goto A, B, C, D;
  A:
    assume (forall s: int ::
      // the occurrence of P in the next line had once caused a crash
      (forall x: int :: { F(s, x) } P(F(s, x)))
      ==> G(s));  // this places the nested forall in a negative position
    goto End;

  B:
    assume (forall s: int ::
      // the occurrence of P in the next line had once caused a crash
      (exists x: int :: { F(s, x) } P(F(s, x))));
    goto End;

  C:
    assume (forall s: int, m: [int]bool ::
      // the occurrence of P in the next line had once caused a crash
      (lambda x: int :: P(F(s, x))) == m);
    goto End;

  D:
    assume (forall x0: int ::
             // The following quantifier will get a {:nopats P(x1,s)}, which is good.
             // But that added trigger expression had once caused the outer quantifier
             // to crash.
             (forall x1: int :: P(x1)));
    goto End;

  End:
}
