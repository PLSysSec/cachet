---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "glb",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "recursivetest",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "glb",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "glb",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "5",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "glb",
                                        ],
                                        target: "recursive",
                                        params: [
                                            Var(
                                                "glb",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "inline",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "recursive",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "k",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Eq,
                                                rhs: Nat(
                                                    "0",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "y",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        TransferCmd(
                                            Return(
                                                ReturnCmd,
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "k",
                                        ],
                                        target: "recursive",
                                        params: [
                                            Term(
                                                Term {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Sub,
                                                    rhs: Nat(
                                                        "1",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "k",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
var glb: int;

procedure recursivetest()
  modifies glb;
{
  glb := 5;
  call glb := recursive(glb);
  return;
}

procedure {:inline 3} recursive(x: int) returns (y: int) {
  var k: int;

  if (x == 0) {
    y := 1;
    return;
  }
  call k := recursive(x - 1);
  y := y + k;
  return;
}

[Input - ../../vendor/boogie/Test/inline/test3.bpl]
// RUN: %boogie -inline:spec -print:- -env:0 -printInlined "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

var glb:int;

procedure recursivetest()
modifies glb;
{
	glb := 5;
	call glb := recursive(glb);

	return;

}

procedure {:inline 3} recursive(x:int) returns (y:int) 
{

	var k: int;	

	if(x == 0) {
		y := 1;
		return;
	}

	call k := recursive(x-1);
	y := y + k;
	return;

}
