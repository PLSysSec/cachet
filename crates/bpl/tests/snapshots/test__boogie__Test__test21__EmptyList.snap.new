---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "List",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "NIL",
            type_params: [
                "a",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "List",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Cons",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "List",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "List",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "car",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "List",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "a",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "cdr",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "List",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "List",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "l",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "List",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "car",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Cons",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "l",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "l",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "List",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "cdr",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "Cons",
                                                    args: [
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "l",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "l",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "l",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "List",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "a",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Cons",
                                        args: [
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "l",
                                            ),
                                        ],
                                    },
                                ),
                                op: Neq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "NIL",
                                        args: [],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "l",
                        ],
                        type_: App(
                            TypeApp {
                                head: "List",
                                tail: Some(
                                    AtomApp(
                                        TypeApp {
                                            head: Bool,
                                            tail: None,
                                        },
                                    ),
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "m",
                        ],
                        type_: App(
                            TypeApp {
                                head: "List",
                                tail: Some(
                                    AtomApp(
                                        TypeApp {
                                            head: Int,
                                            tail: None,
                                        },
                                    ),
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "mar",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Paren(
                                        App(
                                            TypeApp {
                                                head: "List",
                                                tail: Some(
                                                    AtomApp(
                                                        TypeApp {
                                                            head: Int,
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "m",
                                ),
                                op: Neq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "NIL",
                                        args: [],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "mar",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Nat(
                                                                "0",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "m",
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "i",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Gt,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "mar",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "cdr",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "mar",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Term(
                                                                                                Term {
                                                                                                    lhs: Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                    op: Sub,
                                                                                                    rhs: Nat(
                                                                                                        "1",
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "l",
                            "m",
                            "mar",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "l",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Cons",
                                                args: [
                                                    BoolLit(
                                                        true,
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "NIL",
                                                            args: [],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "l",
                                            ),
                                            op: Neq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "NIL",
                                                    args: [],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "l",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "cdr",
                                                args: [
                                                    Var(
                                                        "l",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "l",
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "NIL",
                                                    args: [],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "l",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Cons",
                                                args: [
                                                    BoolLit(
                                                        true,
                                                    ),
                                                    Var(
                                                        "l",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "l",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Cons",
                                                args: [
                                                    BoolLit(
                                                        false,
                                                    ),
                                                    Var(
                                                        "l",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "car",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "mar",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Nat(
                                                                                "1",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "car",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "cdr",
                                                                args: [
                                                                    Var(
                                                                        "m",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "mar",
                                            subscripts: [
                                                [
                                                    Nat(
                                                        "0",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "NIL",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "mar",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Nat(
                                                                    "0",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Neq,
                                            rhs: Var(
                                                "m",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Neg(
                                                NegExpr {
                                                    op: Logical,
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "car",
                                                            args: [
                                                                Var(
                                                                    "l",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "car",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "cdr",
                                                                args: [
                                                                    Var(
                                                                        "l",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "l",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "cdr",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "cdr",
                                                            args: [
                                                                Var(
                                                                    "l",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Gt,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "mar",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "cdr",
                                                                        args: [
                                                                            Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "mar",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Term(
                                                                                                    Term {
                                                                                                        lhs: Var(
                                                                                                            "i",
                                                                                                        ),
                                                                                                        op: Sub,
                                                                                                        rhs: Nat(
                                                                                                            "1",
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "Cons",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "NIL",
                                                                args: [],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "NIL",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Neq,
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "NIL",
                                                    args: [],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
type List _;

function NIL<a>(): List a;

function Cons<a>(a, List a): List a;

function car<a>(List a): a;

function cdr<a>(List a): List a;

axiom (forall <a> x: a, l: List a :: car(Cons(x, l)) == x);

axiom (forall <a> x: a, l: List a :: cdr(Cons(x, l)) == l);

axiom (forall <a> x: a, l: List a :: Cons(x, l) != NIL());

var l: List bool;

var m: List int;

var mar: [int](List int);

procedure P()
  requires m != NIL();
  requires mar[0] == m && (forall i: int :: i > 0 ==> mar[i] == cdr(mar[i - 1]));
  modifies l, m, mar;
{
  l := Cons(true, NIL());
  assert l != NIL();
  l := cdr(l);
  assert l == NIL();
  l := Cons(true, l);
  l := Cons(false, l);
  assert car(mar[1]) == car(cdr(m));
  mar[0] := NIL();
  assert mar[0] != m;
  assert !car(l) && car(cdr(l));
  l := cdr(cdr(l));
  assert (forall i: int :: i > 0 ==> mar[i] == cdr(mar[i - 1]));
}

procedure Q() {
  assert Cons(NIL(), NIL()) != NIL();
}

[Input - ../../vendor/boogie/Test/test21/EmptyList.bpl]
// RUN: %boogie -typeEncoding:p -logPrefix:0p "%s" > "%t"
// RUN: %diff "%s.p.expect" "%t"
// RUN: %boogie -typeEncoding:a -logPrefix:0a "%s" > "%t"
// RUN: %diff "%s.a.expect" "%t"


type List _;

function NIL<a>() returns (List a);
function Cons<a>(a, List a) returns (List a);

function car<a>(List a) returns (a);
function cdr<a>(List a) returns (List a);

axiom (forall<a> x:a, l:List a :: car(Cons(x, l)) == x);
axiom (forall<a> x:a, l:List a :: cdr(Cons(x, l)) == l);

axiom (forall<a> x:a, l:List a :: Cons(x, l) != NIL());

var l:List bool;

var m:List int;
var mar:[int](List int);

procedure P() returns ()
      requires m != NIL();
      requires mar[0] == m && (forall i:int :: i > 0 ==> mar[i] == cdr(mar[i-1]));
      modifies l, m, mar; {

  l := Cons(true, NIL());

  assert l != NIL();
  l := cdr(l);

  assert l == NIL();
  l := Cons(true, l);
  l := Cons(false, l);

  assert car(mar[1]) == car(cdr(m));
  mar[0] := NIL();
  assert mar[0] != m;

  assert !car(l) && car(cdr(l));
  l := cdr(cdr(l));

  assert (forall i:int :: i > 0 ==> mar[i] == cdr(mar[i-1]));    // error
}

procedure Q() returns () {
  assert Cons(NIL(), NIL()) != NIL();  // warning, but provable
}
