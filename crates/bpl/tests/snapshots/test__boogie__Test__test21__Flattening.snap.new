---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [],
            ident: "g",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "f",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "f",
                            args: [
                                Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "g",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Ge,
                                                    rhs: Nat(
                                                        "12",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "3",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "f",
                            args: [
                                Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "g",
                                                            args: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "f",
                                                                        args: [
                                                                            Quant(
                                                                                QuantExpr {
                                                                                    kind: ForAll,
                                                                                    body: QuantBody {
                                                                                        type_params: [],
                                                                                        bound_vars: [
                                                                                            AttrTypedIdentsWhere {
                                                                                                attrs: [],
                                                                                                typed_idents_where: TypedIdentsWhere {
                                                                                                    typed_idents: TypedIdents {
                                                                                                        idents: [
                                                                                                            "y",
                                                                                                        ],
                                                                                                        type_: Atom(
                                                                                                            Int,
                                                                                                        ),
                                                                                                    },
                                                                                                    where_: None,
                                                                                                },
                                                                                            },
                                                                                        ],
                                                                                        attrs: [],
                                                                                        expr: Rel(
                                                                                            RelExpr {
                                                                                                lhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "g",
                                                                                                        args: [
                                                                                                            Term(
                                                                                                                Term {
                                                                                                                    lhs: Var(
                                                                                                                        "x",
                                                                                                                    ),
                                                                                                                    op: Add,
                                                                                                                    rhs: Var(
                                                                                                                        "y",
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                op: Ge,
                                                                                                rhs: Nat(
                                                                                                    "0",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Ge,
                                                    rhs: Nat(
                                                        "12",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "3",
                    ),
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: BoolLit(
                                        false,
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
function g(int): int;

function f(bool): int;

axiom f((exists x: int :: g(x) >= 12)) == 3;

axiom f((exists x: int :: g(f((forall y: int :: g(x + y) >= 0))) >= 12)) == 3;

procedure P() {
  assert false;
}

[Input - ../../vendor/boogie/Test/test21/Flattening.bpl]
// RUN: %boogie -typeEncoding:p -logPrefix:0p "%s" > "%t"
// RUN: %diff "%s.p.expect" "%t"
// RUN: %boogie -typeEncoding:a -logPrefix:0a "%s" > "%t"
// RUN: %diff "%s.a.expect" "%t"


function g(int) returns (int);
function f(bool) returns (int);


axiom (f((exists x:int :: g(x) >= 12)) == 3);
axiom (f((exists x:int :: g(f((forall y:int :: g(x+y) >= 0))) >= 12)) == 3);


procedure P() returns () {
  assert false;
}
