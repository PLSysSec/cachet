---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Code(
                                        CodeExpr {
                                            local_vars: [],
                                            spec_blocks: [
                                                SpecBlock {
                                                    label: "A",
                                                    cmds: [],
                                                    transfer: Return(
                                                        SpecReturn {
                                                            value: BoolLit(
                                                                true,
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Code(
                                        CodeExpr {
                                            local_vars: [
                                                LocalVars {
                                                    attrs: [],
                                                    vars: [
                                                        TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    ],
                                                },
                                            ],
                                            spec_blocks: [
                                                SpecBlock {
                                                    label: "A",
                                                    cmds: [
                                                        Assign(
                                                            AssignCmd {
                                                                lhs: [
                                                                    AssignLhs {
                                                                        ident: "x",
                                                                        subscripts: [],
                                                                    },
                                                                ],
                                                                rhs: [
                                                                    BoolLit(
                                                                        true,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    transfer: Return(
                                                        SpecReturn {
                                                            value: Var(
                                                                "x",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Code(
                                        CodeExpr {
                                            local_vars: [
                                                LocalVars {
                                                    attrs: [],
                                                    vars: [
                                                        TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    ],
                                                },
                                            ],
                                            spec_blocks: [
                                                SpecBlock {
                                                    label: "A",
                                                    cmds: [
                                                        Assign(
                                                            AssignCmd {
                                                                lhs: [
                                                                    AssignLhs {
                                                                        ident: "x",
                                                                        subscripts: [],
                                                                    },
                                                                ],
                                                                rhs: [
                                                                    BoolLit(
                                                                        false,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    transfer: Return(
                                                        SpecReturn {
                                                            value: Var(
                                                                "x",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "S",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Code(
                                        CodeExpr {
                                            local_vars: [
                                                LocalVars {
                                                    attrs: [],
                                                    vars: [
                                                        TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    ],
                                                },
                                            ],
                                            spec_blocks: [
                                                SpecBlock {
                                                    label: "A",
                                                    cmds: [],
                                                    transfer: Return(
                                                        SpecReturn {
                                                            value: Var(
                                                                "x",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "T",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Code(
                            CodeExpr {
                                local_vars: [
                                    LocalVars {
                                        attrs: [],
                                        vars: [
                                            TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "z",
                                                    ],
                                                    type_: Atom(
                                                        Bool,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        ],
                                    },
                                ],
                                spec_blocks: [
                                    SpecBlock {
                                        label: "Start",
                                        cmds: [],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "A",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "A",
                                        cmds: [
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "z",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            false,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "B",
                                                    "C",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "B",
                                        cmds: [
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "x",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "D",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "C",
                                        cmds: [
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Lt,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "R",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "D",
                                        cmds: [],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "E",
                                                    "F",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "E",
                                        cmds: [
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "y",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "z",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "R",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "F",
                                        cmds: [
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "y",
                                                            ),
                                                            op: Lt,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "R",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "R",
                                        cmds: [],
                                        transfer: Return(
                                            SpecReturn {
                                                value: Var(
                                                    "z",
                                                ),
                                            },
                                        ),
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Term(
                                                Term {
                                                    lhs: Var(
                                                        "x",
                                                    ),
                                                    op: Add,
                                                    rhs: Var(
                                                        "y",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "U",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Code(
                            CodeExpr {
                                local_vars: [
                                    LocalVars {
                                        attrs: [],
                                        vars: [
                                            TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "z",
                                                    ],
                                                    type_: Atom(
                                                        Bool,
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        ],
                                    },
                                ],
                                spec_blocks: [
                                    SpecBlock {
                                        label: "Start",
                                        cmds: [],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "A",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "A",
                                        cmds: [
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "z",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            false,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "B",
                                                    "C",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "B",
                                        cmds: [
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "x",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "D",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "C",
                                        cmds: [
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Lt,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "R",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "D",
                                        cmds: [],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "E",
                                                    "F",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "E",
                                        cmds: [
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "y",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "z",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "R",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "F",
                                        cmds: [
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "y",
                                                            ),
                                                            op: Lt,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ],
                                        transfer: Goto(
                                            SpecGoto {
                                                labels: [
                                                    "R",
                                                ],
                                            },
                                        ),
                                    },
                                    SpecBlock {
                                        label: "R",
                                        cmds: [],
                                        transfer: Return(
                                            SpecReturn {
                                                value: Var(
                                                    "z",
                                                ),
                                            },
                                        ),
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "y",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure P() {
  assert |{
    A:
      return true;
  }|;
}

procedure Q() {
  assert |{
    var x: bool;

    A:
      x := true;
      return x;
  }|;
}

procedure R() {
  assert |{
    var x: bool;

    A:
      x := false;
      return x;
  }|;
}

procedure S() {
  assert |{
    var x: bool;

    A:
      return x;
  }|;
}

procedure T(x: int, y: int)
  requires |{
    var z: bool;

    Start:
      goto A;
    A:
      z := false;
      goto B, C;
    B:
      assume 0 <= x;
      goto D;
    C:
      assume x < 0;
      goto R;
    D:
      goto E, F;
    E:
      assume 0 <= y;
      z := true;
      goto R;
    F:
      assume y < 0;
      goto R;
    R:
      return z;
  }|;
{
  assert 0 <= x + y;
}

procedure U(x: int, y: int)
  requires |{
    var z: bool;

    Start:
      goto A;
    A:
      z := false;
      goto B, C;
    B:
      assume 0 <= x;
      goto D;
    C:
      assume x < 0;
      goto R;
    D:
      goto E, F;
    E:
      assume 0 <= y;
      z := true;
      goto R;
    F:
      assume y < 0;
      goto R;
    R:
      return z;
  }|;
{
  assert x <= y;
}

[Input - ../../vendor/boogie/Test/codeexpr/CodeExpr0.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
procedure P()
{
  assert |{ A: return true; }|;
}

// ------------

procedure Q()
{
  assert |{ var x: bool; A: x := true; return x; }|;
}

procedure R()
{
  assert |{ var x: bool; A: x := false; return x; }|;  // error
}

procedure S()
{
  assert |{ var x: bool; A: return x; }|;  // error
}

// ------------

procedure T(x: int, y: int)
  requires |{ var z: bool;
              Start: goto A;
              A: z := false; goto B, C;
              B: assume 0 <= x; goto D;
              C: assume x < 0; goto R;
              D: goto E, F;
              E: assume 0 <= y; z := true; goto R;
              F: assume y < 0; goto R;
              R: return z;
           }|;
{
  assert 0 <= x + y;
}

procedure U(x: int, y: int)
  requires |{ var z: bool;
              Start: goto A;
              A: z := false; goto B, C;
              B: assume 0 <= x; goto D;
              C: assume x < 0; goto R;
              D: goto E, F;
              E: assume 0 <= y; z := true; goto R;
              F: assume y < 0; goto R;
              R: return z;
           }|;
{
  assert x <= y;  // error
}
