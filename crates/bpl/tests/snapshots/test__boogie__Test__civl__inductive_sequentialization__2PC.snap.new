---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "pid",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Pid",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "vote",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "YES",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "vote",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "NO",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "vote",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "decision",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "COMMIT",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "decision",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "ABORT",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "decision",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "NONE",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "decision",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "n",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "n",
                    ),
                    op: Gt,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "pid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "1",
                                ),
                                op: Le,
                                rhs: Var(
                                    "pid",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Le,
                                rhs: Var(
                                    "n",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "pidLe",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "k",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "1",
                                ),
                                op: Le,
                                rhs: Var(
                                    "pid",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Le,
                                rhs: Var(
                                    "k",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "pidGt",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "k",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "k",
                                ),
                                op: Lt,
                                rhs: Var(
                                    "pid",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Le,
                                rhs: Var(
                                    "n",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "6",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "ReqCH",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "6",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "DecCH",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "decision",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "6",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "VoteCH",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "vote",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "6",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "votes",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "vote",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "6",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "decisions",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "decision",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "pending_async",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "PA",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "COORDINATOR1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "COORDINATOR2",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "PARTICIPANT1",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "PARTICIPANT2",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pid",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "PA",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "NoPAs",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "PA",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "pa",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Nat(
                                "0",
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "SingletonPA",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pa",
                    ),
                    type_: App(
                        TypeApp {
                            head: "PA",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "PA",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: Some(
                Array(
                    ArrayExpr {
                        expr: FuncCall(
                            FuncCall {
                                target: "NoPAs",
                                args: [],
                            },
                        ),
                        subscripts: [
                            ArraySubscript {
                                keys: [
                                    Var(
                                        "pa",
                                    ),
                                ],
                                value: Some(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            },
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "MapAdd",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "MapAddPA",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "PA",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "PA",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "PA",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Init",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pids",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "ReqCH",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "VoteCH",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "vote",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "DecCH",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    ],
                                    value: Atom(
                                        Int,
                                    ),
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "decisions",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "decision",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "pids",
                                                        ),
                                                        op: Eq,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "MapConst",
                                                                args: [
                                                                    BoolLit(
                                                                        true,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "ReqCH",
                                                        ),
                                                        op: Eq,
                                                        rhs: Quant(
                                                            QuantExpr {
                                                                kind: Lambda,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "i",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Int,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "VoteCH",
                                                ),
                                                op: Eq,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: Lambda,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "v",
                                                                            ],
                                                                            type_: App(
                                                                                TypeApp {
                                                                                    head: "vote",
                                                                                    tail: None,
                                                                                },
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "DecCH",
                                        ),
                                        op: Eq,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "d",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "decision",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "decisions",
                                ),
                                op: Eq,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "i",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "NONE",
                                                    args: [],
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "6",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN5",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                            "VoteCH",
                            "votes",
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "dec",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "ReqCH",
                                        "VoteCH",
                                        "votes",
                                        "decisions",
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "dec",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "COMMIT",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "dec",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "ABORT",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "dec",
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "COMMIT",
                                                            args: [],
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "votes",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "YES",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "i",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Or,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "decisions",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "dec",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "5",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "INV4",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT2",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "choice",
                                    params: [],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "choice",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "PA",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                            "VoteCH",
                            "DecCH",
                            "votes",
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "pool",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "INV1",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "k",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "INV1",
                                                        },
                                                    ),
                                                    Expr(
                                                        Var(
                                                            "k",
                                                        ),
                                                    ),
                                                    Expr(
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "k",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "PARTICIPANT2",
                                                        },
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "PARTICIPANT2",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "k",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "k",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "n",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "ReqCH",
                                        "VoteCH",
                                        "votes",
                                        "decisions",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "decisions",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Nat(
                                                                                            "0",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "COMMIT",
                                                                            args: [],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "decisions",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Nat(
                                                                                            "0",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "ABORT",
                                                                            args: [],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "decisions",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Nat(
                                                                                            "0",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "COMMIT",
                                                                            args: [],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Quant(
                                                                QuantExpr {
                                                                    kind: ForAll,
                                                                    body: QuantBody {
                                                                        type_params: [],
                                                                        bound_vars: [
                                                                            AttrTypedIdentsWhere {
                                                                                attrs: [],
                                                                                typed_idents_where: TypedIdentsWhere {
                                                                                    typed_idents: TypedIdents {
                                                                                        idents: [
                                                                                            "i",
                                                                                        ],
                                                                                        type_: Atom(
                                                                                            Int,
                                                                                        ),
                                                                                    },
                                                                                    where_: None,
                                                                                },
                                                                            },
                                                                        ],
                                                                        attrs: [],
                                                                        expr: Implies(
                                                                            ImpliesExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "votes",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "YES",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pidLe",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                            Var(
                                                                                "k",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "decisions",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "decisions",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Nat(
                                                                                                "0",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "DecCH",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "d",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "decision",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pidGt",
                                                                                        args: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                            Var(
                                                                                                "k",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "d",
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "decisions",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Nat(
                                                                                                                "0",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Nat(
                                                                            "1",
                                                                        ),
                                                                        else_: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "pool",
                                                                        params: [
                                                                            String(
                                                                                StringLit {
                                                                                    text: "PARTICIPANT2",
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "pa",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "PA",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "is#PARTICIPANT2",
                                                                            args: [
                                                                                Var(
                                                                                    "pa",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "pidGt",
                                                                            args: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid#PARTICIPANT2",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                Var(
                                                                                    "k",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            then: Nat(
                                                                "1",
                                                            ),
                                                            else_: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "choice",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "PARTICIPANT2",
                                                args: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "k",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_abstraction",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "5",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "PARTICIPANT2'",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "VoteCH",
                            "DecCH",
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pid",
                                            args: [
                                                Var(
                                                    "pid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "DecCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "NONE",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "DecCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "pid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "COMMIT",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Gt,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "DecCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "pid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "ABORT",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Gt,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "d",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "COMMIT",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "d",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "ABORT",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "DecCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "d",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "DecCH",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "d",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "DecCH",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "d",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "decisions",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "d",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "5",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "IS",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN5",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "INV4",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "elim",
                            params: [
                                String(
                                    StringLit {
                                        text: "PARTICIPANT2",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "PARTICIPANT2'",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN4",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT2",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                            "VoteCH",
                            "DecCH",
                            "votes",
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "dec",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "INV1",
                                                        },
                                                    ),
                                                    Expr(
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "ReqCH",
                                        "VoteCH",
                                        "votes",
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "dec",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "COMMIT",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "dec",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "ABORT",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "dec",
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "COMMIT",
                                                            args: [],
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "votes",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "YES",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "decisions",
                                            subscripts: [
                                                [
                                                    Nat(
                                                        "0",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "dec",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "DecCH",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "d",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "decision",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "d",
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "dec",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Nat(
                                                                            "1",
                                                                        ),
                                                                        else_: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "pa",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "PA",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "is#PARTICIPANT2",
                                                                            args: [
                                                                                Var(
                                                                                    "pa",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "pid",
                                                                            args: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid#PARTICIPANT2",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            then: Nat(
                                                                "1",
                                                            ),
                                                            else_: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "4",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "INV3",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "COORDINATOR2",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT2",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                            "VoteCH",
                            "DecCH",
                            "votes",
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "dec",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "ReqCH",
                                        "VoteCH",
                                        "votes",
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "YES",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Ge,
                                                                    rhs: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "NO",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Ge,
                                                                    rhs: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Term(
                                                                Term {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "YES",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "NO",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "n",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "YES",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "n",
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Quant(
                                                                QuantExpr {
                                                                    kind: ForAll,
                                                                    body: QuantBody {
                                                                        type_params: [],
                                                                        bound_vars: [
                                                                            AttrTypedIdentsWhere {
                                                                                attrs: [],
                                                                                typed_idents_where: TypedIdentsWhere {
                                                                                    typed_idents: TypedIdents {
                                                                                        idents: [
                                                                                            "i",
                                                                                        ],
                                                                                        type_: Atom(
                                                                                            Int,
                                                                                        ),
                                                                                    },
                                                                                    where_: None,
                                                                                },
                                                                            },
                                                                        ],
                                                                        attrs: [],
                                                                        expr: Implies(
                                                                            ImpliesExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "votes",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "YES",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PAs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "MapAddPA",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "SingletonPA",
                                                                            args: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "COORDINATOR2",
                                                                                        args: [
                                                                                            Nat(
                                                                                                "0",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    Quant(
                                                                        QuantExpr {
                                                                            kind: Lambda,
                                                                            body: QuantBody {
                                                                                type_params: [],
                                                                                bound_vars: [
                                                                                    AttrTypedIdentsWhere {
                                                                                        attrs: [],
                                                                                        typed_idents_where: TypedIdentsWhere {
                                                                                            typed_idents: TypedIdents {
                                                                                                idents: [
                                                                                                    "pa",
                                                                                                ],
                                                                                                type_: App(
                                                                                                    TypeApp {
                                                                                                        head: "PA",
                                                                                                        tail: None,
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                            where_: None,
                                                                                        },
                                                                                    },
                                                                                ],
                                                                                attrs: [],
                                                                                expr: IfThenElse(
                                                                                    IfThenElseExpr {
                                                                                        cond: Logical(
                                                                                            LogicalExpr {
                                                                                                lhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "is#PARTICIPANT2",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "pa",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                op: And,
                                                                                                rhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "pid",
                                                                                                        args: [
                                                                                                            FuncCall(
                                                                                                                FuncCall {
                                                                                                                    target: "pid#PARTICIPANT2",
                                                                                                                    args: [
                                                                                                                        Var(
                                                                                                                            "pa",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        then: Nat(
                                                                                            "1",
                                                                                        ),
                                                                                        else_: Nat(
                                                                                            "0",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                StructuredCmd(
                                                    If(
                                                        IfCmd {
                                                            guard: Asterisk,
                                                            then: [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "dec",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "COMMIT",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                            else_: Some(
                                                                Else(
                                                                    [
                                                                        LabelOrCmd(
                                                                            Assign(
                                                                                AssignCmd {
                                                                                    lhs: [
                                                                                        AssignLhs {
                                                                                            ident: "dec",
                                                                                            subscripts: [],
                                                                                        },
                                                                                    ],
                                                                                    rhs: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "ABORT",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Implies(
                                                                ImpliesExpr {
                                                                    lhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "dec",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "COMMIT",
                                                                                    args: [],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    rhs: Quant(
                                                                        QuantExpr {
                                                                            kind: ForAll,
                                                                            body: QuantBody {
                                                                                type_params: [],
                                                                                bound_vars: [
                                                                                    AttrTypedIdentsWhere {
                                                                                        attrs: [],
                                                                                        typed_idents_where: TypedIdentsWhere {
                                                                                            typed_idents: TypedIdents {
                                                                                                idents: [
                                                                                                    "i",
                                                                                                ],
                                                                                                type_: Atom(
                                                                                                    Int,
                                                                                                ),
                                                                                            },
                                                                                            where_: None,
                                                                                        },
                                                                                    },
                                                                                ],
                                                                                attrs: [],
                                                                                expr: Implies(
                                                                                    ImpliesExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "pid",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        rhs: Rel(
                                                                                            RelExpr {
                                                                                                lhs: Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Var(
                                                                                                            "votes",
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "i",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                op: Eq,
                                                                                                rhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "YES",
                                                                                                        args: [],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "decisions",
                                                                    subscripts: [
                                                                        [
                                                                            Nat(
                                                                                "0",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "dec",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "DecCH",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Quant(
                                                                    QuantExpr {
                                                                        kind: Lambda,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "i",
                                                                                            ],
                                                                                            type_: Atom(
                                                                                                Int,
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: Quant(
                                                                                QuantExpr {
                                                                                    kind: Lambda,
                                                                                    body: QuantBody {
                                                                                        type_params: [],
                                                                                        bound_vars: [
                                                                                            AttrTypedIdentsWhere {
                                                                                                attrs: [],
                                                                                                typed_idents_where: TypedIdentsWhere {
                                                                                                    typed_idents: TypedIdents {
                                                                                                        idents: [
                                                                                                            "d",
                                                                                                        ],
                                                                                                        type_: App(
                                                                                                            TypeApp {
                                                                                                                head: "decision",
                                                                                                                tail: None,
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                    where_: None,
                                                                                                },
                                                                                            },
                                                                                        ],
                                                                                        attrs: [],
                                                                                        expr: IfThenElse(
                                                                                            IfThenElseExpr {
                                                                                                cond: Logical(
                                                                                                    LogicalExpr {
                                                                                                        lhs: FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "pid",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "i",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                        op: And,
                                                                                                        rhs: Rel(
                                                                                                            RelExpr {
                                                                                                                lhs: Var(
                                                                                                                    "d",
                                                                                                                ),
                                                                                                                op: Eq,
                                                                                                                rhs: Var(
                                                                                                                    "dec",
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                then: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                                else_: Nat(
                                                                                                    "0",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "PAs",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Quant(
                                                                    QuantExpr {
                                                                        kind: Lambda,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "pa",
                                                                                            ],
                                                                                            type_: App(
                                                                                                TypeApp {
                                                                                                    head: "PA",
                                                                                                    tail: None,
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: IfThenElse(
                                                                                IfThenElseExpr {
                                                                                    cond: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "is#PARTICIPANT2",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "pa",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "pid",
                                                                                                    args: [
                                                                                                        FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "pid#PARTICIPANT2",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "pa",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    then: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                    else_: Nat(
                                                                                        "0",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_abstraction",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "4",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "COORDINATOR2'",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "VoteCH",
                            "DecCH",
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "dec",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "pid",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "VoteCH",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "YES",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Ge,
                                                            rhs: Var(
                                                                "n",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "dec",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "COMMIT",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "dec",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "ABORT",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "decisions",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "dec",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "VoteCH",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "DecCH",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "d",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "decision",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "d",
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "dec",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Term(
                                                                            Term {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "DecCH",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "d",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        else_: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "DecCH",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "d",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "4",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "IS",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN4",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "INV3",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "elim",
                            params: [
                                String(
                                    StringLit {
                                        text: "COORDINATOR2",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "COORDINATOR2'",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN3",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "COORDINATOR2",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT2",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                            "VoteCH",
                            "votes",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "ReqCH",
                                        "VoteCH",
                                        "votes",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "VoteCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "YES",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Ge,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "VoteCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "NO",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Ge,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Term(
                                                Term {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "VoteCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "YES",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Add,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "VoteCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "NO",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "VoteCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "YES",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "n",
                                                    ),
                                                },
                                            ),
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "pid",
                                                                        args: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "votes",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "YES",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "MapAddPA",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "SingletonPA",
                                                            args: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "COORDINATOR2",
                                                                        args: [
                                                                            Nat(
                                                                                "0",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "pa",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "PA",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "is#PARTICIPANT2",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "pid#PARTICIPANT2",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "pa",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Nat(
                                                                            "1",
                                                                        ),
                                                                        else_: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "INV2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "COORDINATOR2",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT1",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT2",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "choice",
                                    params: [],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "choice",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "PA",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                            "VoteCH",
                            "votes",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "pool",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "INV2",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "k",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "ReqCH",
                                        "VoteCH",
                                        "votes",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "INV2",
                                                        },
                                                    ),
                                                    Expr(
                                                        Var(
                                                            "k",
                                                        ),
                                                    ),
                                                    Expr(
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "k",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "PARTICIPANT1",
                                                        },
                                                    ),
                                                    Expr(
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "PARTICIPANT1",
                                                                args: [
                                                                    Var(
                                                                        "n",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Nat(
                                                        "0",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "k",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "k",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "n",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Quant(
                                                                        QuantExpr {
                                                                            kind: ForAll,
                                                                            body: QuantBody {
                                                                                type_params: [],
                                                                                bound_vars: [
                                                                                    AttrTypedIdentsWhere {
                                                                                        attrs: [],
                                                                                        typed_idents_where: TypedIdentsWhere {
                                                                                            typed_idents: TypedIdents {
                                                                                                idents: [
                                                                                                    "i",
                                                                                                ],
                                                                                                type_: Atom(
                                                                                                    Int,
                                                                                                ),
                                                                                            },
                                                                                            where_: None,
                                                                                        },
                                                                                    },
                                                                                ],
                                                                                attrs: [],
                                                                                expr: Implies(
                                                                                    ImpliesExpr {
                                                                                        lhs: FuncCall(
                                                                                            FuncCall {
                                                                                                target: "pidGt",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                    Var(
                                                                                                        "k",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        rhs: Rel(
                                                                                            RelExpr {
                                                                                                lhs: Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Var(
                                                                                                            "ReqCH",
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "i",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                op: Eq,
                                                                                                rhs: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "VoteCH",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "YES",
                                                                                                        args: [],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Ge,
                                                                            rhs: Nat(
                                                                                "0",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "NO",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Ge,
                                                                    rhs: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Term(
                                                                Term {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "YES",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "NO",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "k",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Implies(
                                                ImpliesExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "VoteCH",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "YES",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "k",
                                                            ),
                                                        },
                                                    ),
                                                    rhs: Quant(
                                                        QuantExpr {
                                                            kind: ForAll,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "i",
                                                                                ],
                                                                                type_: Atom(
                                                                                    Int,
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: Implies(
                                                                    ImpliesExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "pidLe",
                                                                                args: [
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                    Var(
                                                                                        "k",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "votes",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Eq,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "YES",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "MapAddPA",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "SingletonPA",
                                                            args: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "COORDINATOR2",
                                                                        args: [
                                                                            Nat(
                                                                                "0",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "MapAddPA",
                                                            args: [
                                                                Quant(
                                                                    QuantExpr {
                                                                        kind: Lambda,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "pa",
                                                                                            ],
                                                                                            type_: App(
                                                                                                TypeApp {
                                                                                                    head: "PA",
                                                                                                    tail: None,
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: IfThenElse(
                                                                                IfThenElseExpr {
                                                                                    cond: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "is#PARTICIPANT2",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "pa",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "pidLe",
                                                                                                    args: [
                                                                                                        FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "pid#PARTICIPANT2",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "pa",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "k",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    then: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                    else_: Nat(
                                                                                        "0",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                                Quant(
                                                                    QuantExpr {
                                                                        kind: Lambda,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [
                                                                                        Attr(
                                                                                            AttrContent {
                                                                                                ident: "pool",
                                                                                                params: [
                                                                                                    String(
                                                                                                        StringLit {
                                                                                                            text: "PARTICIPANT1",
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "pa",
                                                                                            ],
                                                                                            type_: App(
                                                                                                TypeApp {
                                                                                                    head: "PA",
                                                                                                    tail: None,
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: IfThenElse(
                                                                                IfThenElseExpr {
                                                                                    cond: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "is#PARTICIPANT1",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "pa",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "pidGt",
                                                                                                    args: [
                                                                                                        FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "pid#PARTICIPANT1",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "pa",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "k",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    then: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                    else_: Nat(
                                                                                        "0",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "choice",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "PARTICIPANT1",
                                                args: [
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "k",
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "IS",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN3",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "INV2",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "elim",
                            params: [
                                String(
                                    StringLit {
                                        text: "PARTICIPANT1",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "COORDINATOR2",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT1",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "add_to_pool",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "INV2",
                                                        },
                                                    ),
                                                    Expr(
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "ReqCH",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: FuncCall(
                                                                FuncCall {
                                                                    target: "pid",
                                                                    args: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            then: Nat(
                                                                "1",
                                                            ),
                                                            else_: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "MapAddPA",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "SingletonPA",
                                                            args: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "COORDINATOR2",
                                                                        args: [
                                                                            Nat(
                                                                                "0",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "pa",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "PA",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "is#PARTICIPANT1",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "pid#PARTICIPANT1",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "pa",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Nat(
                                                                            "1",
                                                                        ),
                                                                        else_: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "IS_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "INV1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "COORDINATOR1",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "COORDINATOR2",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT1",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "PAs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "MapAddPA",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "SingletonPA",
                                                                            args: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "COORDINATOR1",
                                                                                        args: [
                                                                                            Nat(
                                                                                                "0",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    Quant(
                                                                        QuantExpr {
                                                                            kind: Lambda,
                                                                            body: QuantBody {
                                                                                type_params: [],
                                                                                bound_vars: [
                                                                                    AttrTypedIdentsWhere {
                                                                                        attrs: [],
                                                                                        typed_idents_where: TypedIdentsWhere {
                                                                                            typed_idents: TypedIdents {
                                                                                                idents: [
                                                                                                    "pa",
                                                                                                ],
                                                                                                type_: App(
                                                                                                    TypeApp {
                                                                                                        head: "PA",
                                                                                                        tail: None,
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                            where_: None,
                                                                                        },
                                                                                    },
                                                                                ],
                                                                                attrs: [],
                                                                                expr: IfThenElse(
                                                                                    IfThenElseExpr {
                                                                                        cond: Logical(
                                                                                            LogicalExpr {
                                                                                                lhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "is#PARTICIPANT1",
                                                                                                        args: [
                                                                                                            Var(
                                                                                                                "pa",
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                op: And,
                                                                                                rhs: FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "pid",
                                                                                                        args: [
                                                                                                            FuncCall(
                                                                                                                FuncCall {
                                                                                                                    target: "pid#PARTICIPANT1",
                                                                                                                    args: [
                                                                                                                        Var(
                                                                                                                            "pa",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        then: Nat(
                                                                                            "1",
                                                                                        ),
                                                                                        else_: Nat(
                                                                                            "0",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "PAs",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "COORDINATOR1",
                                                                                        args: [
                                                                                            Nat(
                                                                                                "0",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Gt,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "ReqCH",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Quant(
                                                                    QuantExpr {
                                                                        kind: Lambda,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "i",
                                                                                            ],
                                                                                            type_: Atom(
                                                                                                Int,
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: IfThenElse(
                                                                                IfThenElseExpr {
                                                                                    cond: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "pid",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "i",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    then: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                    else_: Nat(
                                                                                        "0",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "PAs",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "MapAddPA",
                                                                        args: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "SingletonPA",
                                                                                    args: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "COORDINATOR2",
                                                                                                args: [
                                                                                                    Nat(
                                                                                                        "0",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            Quant(
                                                                                QuantExpr {
                                                                                    kind: Lambda,
                                                                                    body: QuantBody {
                                                                                        type_params: [],
                                                                                        bound_vars: [
                                                                                            AttrTypedIdentsWhere {
                                                                                                attrs: [],
                                                                                                typed_idents_where: TypedIdentsWhere {
                                                                                                    typed_idents: TypedIdents {
                                                                                                        idents: [
                                                                                                            "pa",
                                                                                                        ],
                                                                                                        type_: App(
                                                                                                            TypeApp {
                                                                                                                head: "PA",
                                                                                                                tail: None,
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                    where_: None,
                                                                                                },
                                                                                            },
                                                                                        ],
                                                                                        attrs: [],
                                                                                        expr: IfThenElse(
                                                                                            IfThenElseExpr {
                                                                                                cond: Logical(
                                                                                                    LogicalExpr {
                                                                                                        lhs: FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "is#PARTICIPANT1",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "pa",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                        op: And,
                                                                                                        rhs: FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "pid",
                                                                                                                args: [
                                                                                                                    FuncCall(
                                                                                                                        FuncCall {
                                                                                                                            target: "pid#PARTICIPANT1",
                                                                                                                            args: [
                                                                                                                                Var(
                                                                                                                                    "pa",
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                then: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                                else_: Nat(
                                                                                                    "0",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Quant(
                                                                QuantExpr {
                                                                    kind: ForAll,
                                                                    body: QuantBody {
                                                                        type_params: [],
                                                                        bound_vars: [
                                                                            AttrTypedIdentsWhere {
                                                                                attrs: [],
                                                                                typed_idents_where: TypedIdentsWhere {
                                                                                    typed_idents: TypedIdents {
                                                                                        idents: [
                                                                                            "pa",
                                                                                        ],
                                                                                        type_: App(
                                                                                            TypeApp {
                                                                                                head: "PA",
                                                                                                tail: None,
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                    where_: None,
                                                                                },
                                                                            },
                                                                        ],
                                                                        attrs: [],
                                                                        expr: Explies(
                                                                            ExpliesExpr {
                                                                                lhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "PAs",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "pa",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Nat(
                                                                                            "0",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "is#COORDINATOR1",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "PAs",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "COORDINATOR2",
                                                                                                args: [
                                                                                                    Nat(
                                                                                                        "0",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "IS",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN2",
                                    },
                                ),
                                String(
                                    StringLit {
                                        text: "INV1",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "elim",
                            params: [
                                String(
                                    StringLit {
                                        text: "COORDINATOR1",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "MAIN1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "COORDINATOR1",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT1",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Init",
                                            args: [
                                                Var(
                                                    "pids",
                                                ),
                                                Var(
                                                    "ReqCH",
                                                ),
                                                Var(
                                                    "VoteCH",
                                                ),
                                                Var(
                                                    "DecCH",
                                                ),
                                                Var(
                                                    "decisions",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "MapAddPA",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "SingletonPA",
                                                            args: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "COORDINATOR1",
                                                                        args: [
                                                                            Nat(
                                                                                "0",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "pa",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "PA",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "is#PARTICIPANT1",
                                                                                        args: [
                                                                                            Var(
                                                                                                "pa",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "pid#PARTICIPANT1",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "pa",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Nat(
                                                                            "1",
                                                                        ),
                                                                        else_: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "PARTICIPANT1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "PARTICIPANT2",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                            "VoteCH",
                            "votes",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "vote",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pid",
                                            args: [
                                                Var(
                                                    "pid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "ReqCH",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "pid",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Gt,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "ReqCH",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "ReqCH",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "pid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Asterisk,
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "v",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "YES",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: Some(
                                                        Else(
                                                            [
                                                                LabelOrCmd(
                                                                    Assign(
                                                                        AssignCmd {
                                                                            lhs: [
                                                                                AssignLhs {
                                                                                    ident: "v",
                                                                                    subscripts: [],
                                                                                },
                                                                            ],
                                                                            rhs: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "NO",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "votes",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "v",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "VoteCH",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "v",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "VoteCH",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "v",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "SingletonPA",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "PARTICIPANT2",
                                                            args: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "5",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "PARTICIPANT2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "DecCH",
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pid",
                                            args: [
                                                Var(
                                                    "pid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "DecCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "NONE",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "d",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "COMMIT",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "d",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "ABORT",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "DecCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "d",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "DecCH",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "d",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "DecCH",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "d",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "decisions",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "d",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "COORDINATOR1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "pending_async",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "COORDINATOR2",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "PAs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "PA",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "pid",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "ReqCH",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: IfThenElse(
                                                        IfThenElseExpr {
                                                            cond: FuncCall(
                                                                FuncCall {
                                                                    target: "pid",
                                                                    args: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            then: Term(
                                                                Term {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "ReqCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "i",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                            else_: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "ReqCH",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "PAs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "SingletonPA",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "COORDINATOR2",
                                                            args: [
                                                                Nat(
                                                                    "0",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "4",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "COORDINATOR2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "VoteCH",
                            "DecCH",
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "dec",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "pid",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "VoteCH",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "YES",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Ge,
                                                            rhs: Var(
                                                                "n",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "VoteCH",
                                                            subscripts: [
                                                                [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "YES",
                                                                            args: [],
                                                                        },
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "VoteCH",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "YES",
                                                                                            args: [],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Sub,
                                                                rhs: Var(
                                                                    "n",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "dec",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "COMMIT",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "NO",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Gt,
                                                                    rhs: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Havoc(
                                                        HavocCmd {
                                                            vars: [
                                                                "VoteCH",
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "VoteCH",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "NO",
                                                                                                args: [],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Term(
                                                                        Term {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Old(
                                                                                        OldExpr {
                                                                                            expr: Var(
                                                                                                "VoteCH",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "NO",
                                                                                                        args: [],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Sub,
                                                                            rhs: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assume,
                                                            attrs: [],
                                                            proposition: Logical(
                                                                LogicalExpr {
                                                                    lhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Nat(
                                                                                "0",
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "VoteCH",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "YES",
                                                                                                        args: [],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "VoteCH",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "YES",
                                                                                                        args: [],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Old(
                                                                                        OldExpr {
                                                                                            expr: Var(
                                                                                                "VoteCH",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                FuncCall(
                                                                                                    FuncCall {
                                                                                                        target: "YES",
                                                                                                        args: [],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "dec",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "ABORT",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "decisions",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "dec",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "DecCH",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "d",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "decision",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "d",
                                                                                        ),
                                                                                        op: Eq,
                                                                                        rhs: Var(
                                                                                            "dec",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Term(
                                                                            Term {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "DecCH",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "d",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        else_: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "DecCH",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "d",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "MAIN1",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "main",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Init",
                                args: [
                                    Var(
                                        "pids",
                                    ),
                                    Var(
                                        "ReqCH",
                                    ),
                                    Var(
                                        "VoteCH",
                                    ),
                                    Var(
                                        "DecCH",
                                    ),
                                    Var(
                                        "decisions",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "pending_async",
                                        params: [],
                                    },
                                ),
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "1",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "PAs",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "PA",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "pid",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pid",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "pid",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pids'",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "pids'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "pids",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "pid",
                                            "pids'",
                                        ],
                                        target: "linear_transfer",
                                        params: [
                                            Nat(
                                                "0",
                                            ),
                                            Var(
                                                "pids'",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "coordinator1",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                        ],
                                    },
                                    is_async: true,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "n",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "cooperates",
                                                        params: [],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "1",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Le,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "n",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Quant(
                                                QuantExpr {
                                                    kind: ForAll,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "ii",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "pid",
                                                                                args: [
                                                                                    Var(
                                                                                        "ii",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "ii",
                                                                                ),
                                                                                op: Ge,
                                                                                rhs: Var(
                                                                                    "i",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "pids'",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "ii",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "PAs",
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "MapAddPA",
                                                            args: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "SingletonPA",
                                                                        args: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "COORDINATOR1",
                                                                                    args: [
                                                                                        Nat(
                                                                                            "0",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                Quant(
                                                                    QuantExpr {
                                                                        kind: Lambda,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "pa",
                                                                                            ],
                                                                                            type_: App(
                                                                                                TypeApp {
                                                                                                    head: "PA",
                                                                                                    tail: None,
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: IfThenElse(
                                                                                IfThenElseExpr {
                                                                                    cond: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: Logical(
                                                                                                LogicalExpr {
                                                                                                    lhs: FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "is#PARTICIPANT1",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "pa",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                    op: And,
                                                                                                    rhs: FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "pid",
                                                                                                            args: [
                                                                                                                FuncCall(
                                                                                                                    FuncCall {
                                                                                                                        target: "pid#PARTICIPANT1",
                                                                                                                        args: [
                                                                                                                            Var(
                                                                                                                                "pa",
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: Rel(
                                                                                                RelExpr {
                                                                                                    lhs: FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "pid#PARTICIPANT1",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "pa",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                    op: Lt,
                                                                                                    rhs: Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    then: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                    else_: Nat(
                                                                                        "0",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "pid",
                                                            "pids'",
                                                        ],
                                                        target: "linear_transfer",
                                                        params: [
                                                            Var(
                                                                "i",
                                                            ),
                                                            Var(
                                                                "pids'",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "participant1",
                                                        params: [
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: true,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "PARTICIPANT1",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "participant1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "pid",
                                args: [
                                    Var(
                                        "pid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "vote",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "receive_req",
                                                        params: [
                                                            Var(
                                                                "pid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Havoc(
                                                HavocCmd {
                                                    vars: [
                                                        "v",
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "set_vote",
                                                        params: [
                                                            Var(
                                                                "pid",
                                                            ),
                                                            Var(
                                                                "v",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "send_vote",
                                                        params: [
                                                            Var(
                                                                "v",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "participant2",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                        ],
                                    },
                                    is_async: true,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "PARTICIPANT2",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "participant2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "pid",
                                args: [
                                    Var(
                                        "pid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "d",
                                        ],
                                        target: "receive_dec",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "set_decision",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                            Var(
                                                "d",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "COORDINATOR1",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "coordinator1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "vv",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "vote",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "VoteCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "vv",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "1",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "old_ReqCH",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "old_ReqCH",
                                        ],
                                        target: "Snapshot_ReqCH",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "n",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "cooperates",
                                                        params: [],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "1",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Le,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "n",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "ReqCH",
                                                    ),
                                                    op: Eq,
                                                    rhs: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "ii",
                                                                                ],
                                                                                type_: Atom(
                                                                                    Int,
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Logical(
                                                                            LogicalExpr {
                                                                                lhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "pid",
                                                                                        args: [
                                                                                            Var(
                                                                                                "ii",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Var(
                                                                                            "ii",
                                                                                        ),
                                                                                        op: Lt,
                                                                                        rhs: Var(
                                                                                            "i",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        then: Term(
                                                                            Term {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "old_ReqCH",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "ii",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        else_: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "old_ReqCH",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "ii",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "send_req",
                                                        params: [
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "coordinator2",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                        ],
                                    },
                                    is_async: true,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "COORDINATOR2",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "coordinator2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "pid",
                                ),
                                op: Eq,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "vv",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "vote",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "VoteCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "vv",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "decision",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "vote",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "1",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "old_VoteCH",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "vote",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "1",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "old_DecCH",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Map(
                                                    MapType {
                                                        type_params: [],
                                                        keys: [
                                                            App(
                                                                TypeApp {
                                                                    head: "decision",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        ],
                                                        value: Atom(
                                                            Int,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "old_VoteCH",
                                        ],
                                        target: "Snapshot_VoteCH",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "old_DecCH",
                                        ],
                                        target: "Snapshot_DecCH",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "COMMIT",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Lt,
                                                rhs: Var(
                                                    "n",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "0",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "n",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "VoteCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "YES",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Term(
                                                        Term {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "old_VoteCH",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "YES",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Sub,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Term(
                                                        Term {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "old_VoteCH",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "YES",
                                                                                        args: [],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Sub,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: Ge,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "VoteCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "NO",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "old_VoteCH",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "NO",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "v",
                                                        ],
                                                        target: "receive_vote",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "v",
                                                                ),
                                                                op: Eq,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "NO",
                                                                        args: [],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "d",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "ABORT",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        StructuredCmd(
                                                            Break(
                                                                BreakCmd {
                                                                    label: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "set_decision",
                                        params: [
                                            Var(
                                                "pid",
                                            ),
                                            Var(
                                                "d",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "n",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "cooperates",
                                                        params: [],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "1",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Le,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "n",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "DecCH",
                                                    ),
                                                    op: Eq,
                                                    rhs: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "ii",
                                                                                ],
                                                                                type_: Atom(
                                                                                    Int,
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: Quant(
                                                                    QuantExpr {
                                                                        kind: Lambda,
                                                                        body: QuantBody {
                                                                            type_params: [],
                                                                            bound_vars: [
                                                                                AttrTypedIdentsWhere {
                                                                                    attrs: [],
                                                                                    typed_idents_where: TypedIdentsWhere {
                                                                                        typed_idents: TypedIdents {
                                                                                            idents: [
                                                                                                "dd",
                                                                                            ],
                                                                                            type_: App(
                                                                                                TypeApp {
                                                                                                    head: "decision",
                                                                                                    tail: None,
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                        where_: None,
                                                                                    },
                                                                                },
                                                                            ],
                                                                            attrs: [],
                                                                            expr: IfThenElse(
                                                                                IfThenElseExpr {
                                                                                    cond: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: Logical(
                                                                                                LogicalExpr {
                                                                                                    lhs: FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "pid",
                                                                                                            args: [
                                                                                                                Var(
                                                                                                                    "ii",
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                    op: And,
                                                                                                    rhs: Rel(
                                                                                                        RelExpr {
                                                                                                            lhs: Var(
                                                                                                                "ii",
                                                                                                            ),
                                                                                                            op: Lt,
                                                                                                            rhs: Var(
                                                                                                                "i",
                                                                                                            ),
                                                                                                        },
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: Rel(
                                                                                                RelExpr {
                                                                                                    lhs: Var(
                                                                                                        "dd",
                                                                                                    ),
                                                                                                    op: Eq,
                                                                                                    rhs: Var(
                                                                                                        "d",
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    then: Term(
                                                                                        Term {
                                                                                            lhs: Array(
                                                                                                ArrayExpr {
                                                                                                    expr: Var(
                                                                                                        "old_DecCH",
                                                                                                    ),
                                                                                                    subscripts: [
                                                                                                        ArraySubscript {
                                                                                                            keys: [
                                                                                                                Var(
                                                                                                                    "ii",
                                                                                                                ),
                                                                                                            ],
                                                                                                            value: None,
                                                                                                        },
                                                                                                        ArraySubscript {
                                                                                                            keys: [
                                                                                                                Var(
                                                                                                                    "dd",
                                                                                                                ),
                                                                                                            ],
                                                                                                            value: None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            op: Add,
                                                                                            rhs: Nat(
                                                                                                "1",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    else_: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "old_DecCH",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "ii",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "dd",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "send_dec",
                                                        params: [
                                                            Var(
                                                                "i",
                                                            ),
                                                            Var(
                                                                "d",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "intro",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Snapshot_ReqCH",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "snapshot",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "snapshot",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "ReqCH",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "intro",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Snapshot_VoteCH",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "snapshot",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "vote",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "snapshot",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "VoteCH",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "intro",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Snapshot_DecCH",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "snapshot",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "decision",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "snapshot",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "DecCH",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SET_VOTE",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "vote",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "votes",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "votes",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "v",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SET_DECISION",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "d",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "decision",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "decisions",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "decisions",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "d",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SEND_REQ",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "ReqCH",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "ReqCH",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "right",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "RECEIVE_REQ",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "ReqCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "ReqCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "ReqCH",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "ReqCH",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SEND_VOTE",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "vote",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "VoteCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "VoteCH",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "v",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "VoteCH",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "v",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "right",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "RECEIVE_VOTE",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "vote",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "VoteCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "VoteCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "v",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "VoteCH",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "v",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "VoteCH",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "v",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SEND_DEC",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "d",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "decision",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "DecCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "DecCH",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "d",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "DecCH",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "d",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "right",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "RECEIVE_DEC",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "d",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "decision",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "DecCH",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "DecCH",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "pid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "d",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "DecCH",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "d",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "DecCH",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "pid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "d",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "SET_VOTE",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "set_vote",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "vote",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "SET_DECISION",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "set_decision",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "d",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "decision",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "SEND_REQ",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "send_req",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "RECEIVE_REQ",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "receive_req",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "SEND_VOTE",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "send_vote",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "vote",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "RECEIVE_VOTE",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "receive_vote",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "vote",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "SEND_DEC",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "send_dec",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "d",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "decision",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "RECEIVE_DEC",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "receive_dec",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pid",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "d",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "decision",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "LINEAR_TRANSFER",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids'",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "pids",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "p",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "i",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "pids'",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "pids",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                false,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "LINEAR_TRANSFER",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "linear_transfer",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "p",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pids'",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
]

[Printed]
type {:linear "pid"} Pid = int;

type {:datatype} vote;

function {:constructor} YES(): vote;

function {:constructor} NO(): vote;

type {:datatype} decision;

function {:constructor} COMMIT(): decision;

function {:constructor} ABORT(): decision;

function {:constructor} NONE(): decision;

const n: int;

axiom n > 0;

function {:inline} pid(pid: int): bool {
  1 <= pid && pid <= n
}

function {:inline} pidLe(pid: int, k: int): bool {
  1 <= pid && pid <= k
}

function {:inline} pidGt(pid: int, k: int): bool {
  k < pid && pid <= n
}

var {:layer 0, 6} ReqCH: [int]int;

var {:layer 0, 6} DecCH: [int][decision]int;

var {:layer 0, 6} VoteCH: [vote]int;

var {:layer 0, 6} votes: [int]vote;

var {:layer 0, 6} decisions: [int]decision;

type {:pending_async} {:datatype} PA;

function {:constructor} COORDINATOR1(pid: int): PA;

function {:constructor} COORDINATOR2(pid: int): PA;

function {:constructor} PARTICIPANT1(pid: int): PA;

function {:constructor} PARTICIPANT2(pid: int): PA;

function {:inline} NoPAs(): [PA]int {
  (lambda pa: PA :: 0)
}

function {:inline} SingletonPA(pa: PA): [PA]int {
  NoPAs()[pa := 1]
}

function {:builtin "MapAdd"} MapAddPA([PA]int, [PA]int): [PA]int;

function {:inline} Init(pids: [int]bool, ReqCH: [int]int, VoteCH: [vote]int, DecCH: [int][decision]int, decisions: [int]decision): bool {
  pids == MapConst(true) && ReqCH == (lambda i: int :: 0) && VoteCH == (lambda v: vote :: 0) && DecCH == (lambda i: int :: (lambda d: decision :: 0)) && decisions == (lambda i: int :: NONE())
}

procedure {:atomic} {:layer 6} MAIN5({:linear_in "pid"} pids: [int]bool)
  modifies ReqCH, VoteCH, votes, decisions;
{
  var dec: decision;

  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  havoc ReqCH, VoteCH, votes, decisions;
  if (*) {
    dec := COMMIT();
  } else {
    dec := ABORT();
  }
  assume dec == COMMIT() ==> (forall i: int :: pid(i) ==> votes[i] == YES());
  assume (forall i: int :: i == 0 || pid(i) ==> decisions[i] == dec);
}

procedure {:IS_invariant} {:layer 5} INV4({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "PARTICIPANT2"} PAs: [PA]int, {:choice} choice: PA)
  modifies ReqCH, VoteCH, DecCH, votes, decisions;
{
  var {:pool "INV1"} k: int;

  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  assume {:add_to_pool "INV1", k, k + 1} {:add_to_pool "PARTICIPANT2", PARTICIPANT2(n)} 0 <= k && k <= n;
  havoc ReqCH, VoteCH, votes, decisions;
  assume (decisions[0] == COMMIT() || decisions[0] == ABORT()) && (decisions[0] == COMMIT() ==> (forall i: int :: pid(i) ==> votes[i] == YES())) && (forall i: int :: pidLe(i, k) ==> decisions[i] == decisions[0]);
  DecCH := (lambda i: int :: (lambda d: decision :: if pidGt(i, k) && d == decisions[0] then 1 else 0));
  PAs := (lambda {:pool "PARTICIPANT2"} pa: PA :: if is#PARTICIPANT2(pa) && pidGt(pid#PARTICIPANT2(pa), k) then 1 else 0);
  choice := PARTICIPANT2(k + 1);
}

procedure {:IS_abstraction} {:layer 5} PARTICIPANT2'({:linear_in "pid"} pid: int)
  modifies VoteCH, DecCH, decisions;
{
  var d: decision;

  assert pid(pid);
  assert DecCH[pid][NONE()] == 0;
  assert DecCH[pid][COMMIT()] > 0 || DecCH[pid][ABORT()] > 0;
  if (*) {
    d := COMMIT();
  } else {
    d := ABORT();
  }
  assume DecCH[pid][d] > 0;
  DecCH[pid][d] := DecCH[pid][d] - 1;
  decisions[pid] := d;
}

procedure {:atomic} {:layer 5} {:IS "MAIN5", "INV4"} {:elim "PARTICIPANT2", "PARTICIPANT2'"} MAIN4({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "PARTICIPANT2"} PAs: [PA]int)
  modifies ReqCH, VoteCH, DecCH, votes, decisions;
{
  var dec: decision;

  assert {:add_to_pool "INV1", 0} Init(pids, ReqCH, VoteCH, DecCH, decisions);
  havoc ReqCH, VoteCH, votes;
  if (*) {
    dec := COMMIT();
  } else {
    dec := ABORT();
  }
  assume dec == COMMIT() ==> (forall i: int :: pid(i) ==> votes[i] == YES());
  decisions[0] := dec;
  DecCH := (lambda i: int :: (lambda d: decision :: if pid(i) && d == dec then 1 else 0));
  PAs := (lambda pa: PA :: if is#PARTICIPANT2(pa) && pid(pid#PARTICIPANT2(pa)) then 1 else 0);
}

procedure {:IS_invariant} {:layer 4} INV3({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "COORDINATOR2", "PARTICIPANT2"} PAs: [PA]int)
  modifies ReqCH, VoteCH, DecCH, votes, decisions;
{
  var dec: decision;

  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  havoc ReqCH, VoteCH, votes;
  if (*) {
    assume VoteCH[YES()] >= 0 && VoteCH[NO()] >= 0;
    assume VoteCH[YES()] + VoteCH[NO()] <= n;
    assume VoteCH[YES()] == n ==> (forall i: int :: pid(i) ==> votes[i] == YES());
    PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), (lambda pa: PA :: if is#PARTICIPANT2(pa) && pid(pid#PARTICIPANT2(pa)) then 1 else 0));
  } else {
    if (*) {
      dec := COMMIT();
    } else {
      dec := ABORT();
    }
    assume dec == COMMIT() ==> (forall i: int :: pid(i) ==> votes[i] == YES());
    decisions[0] := dec;
    DecCH := (lambda i: int :: (lambda d: decision :: if pid(i) && d == dec then 1 else 0));
    PAs := (lambda pa: PA :: if is#PARTICIPANT2(pa) && pid(pid#PARTICIPANT2(pa)) then 1 else 0);
  }
}

procedure {:IS_abstraction} {:layer 4} COORDINATOR2'({:linear_in "pid"} pid: int)
  modifies VoteCH, DecCH, decisions;
{
  var dec: decision;

  assert pid == 0;
  if (*) {
    assume VoteCH[YES()] >= n;
    dec := COMMIT();
  } else {
    dec := ABORT();
  }
  decisions[pid] := dec;
  havoc VoteCH;
  DecCH := (lambda i: int :: (lambda d: decision :: if pid(i) && d == dec then DecCH[i][d] + 1 else DecCH[i][d]));
}

procedure {:atomic} {:layer 4} {:IS "MAIN4", "INV3"} {:elim "COORDINATOR2", "COORDINATOR2'"} MAIN3({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "COORDINATOR2", "PARTICIPANT2"} PAs: [PA]int)
  modifies ReqCH, VoteCH, votes;
{
  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  havoc ReqCH, VoteCH, votes;
  assume VoteCH[YES()] >= 0 && VoteCH[NO()] >= 0;
  assume VoteCH[YES()] + VoteCH[NO()] <= n;
  assume VoteCH[YES()] == n ==> (forall i: int :: pid(i) ==> votes[i] == YES());
  PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), (lambda pa: PA :: if is#PARTICIPANT2(pa) && pid(pid#PARTICIPANT2(pa)) then 1 else 0));
}

procedure {:IS_invariant} {:layer 3} INV2({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "COORDINATOR2", "PARTICIPANT1", "PARTICIPANT2"} PAs: [PA]int, {:choice} choice: PA)
  modifies ReqCH, VoteCH, votes;
{
  var {:pool "INV2"} k: int;

  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  havoc ReqCH, VoteCH, votes;
  assume {:add_to_pool "INV2", k, k + 1} {:add_to_pool "PARTICIPANT1", PARTICIPANT1(n)} 0 <= k && k <= n;
  assume (forall i: int :: pidGt(i, k) ==> ReqCH[i] == 1) && VoteCH[YES()] >= 0 && VoteCH[NO()] >= 0 && VoteCH[YES()] + VoteCH[NO()] <= k && (VoteCH[YES()] == k ==> (forall i: int :: pidLe(i, k) ==> votes[i] == YES()));
  PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), MapAddPA((lambda pa: PA :: if is#PARTICIPANT2(pa) && pidLe(pid#PARTICIPANT2(pa), k) then 1 else 0), (lambda {:pool "PARTICIPANT1"} pa: PA :: if is#PARTICIPANT1(pa) && pidGt(pid#PARTICIPANT1(pa), k) then 1 else 0)));
  choice := PARTICIPANT1(k + 1);
}

procedure {:atomic} {:layer 3} {:IS "MAIN3", "INV2"} {:elim "PARTICIPANT1"} MAIN2({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "COORDINATOR2", "PARTICIPANT1"} PAs: [PA]int)
  modifies ReqCH;
{
  assert {:add_to_pool "INV2", 0} Init(pids, ReqCH, VoteCH, DecCH, decisions);
  ReqCH := (lambda i: int :: if pid(i) then 1 else 0);
  PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), (lambda pa: PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) then 1 else 0));
}

procedure {:IS_invariant} {:layer 2} INV1({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "COORDINATOR1", "COORDINATOR2", "PARTICIPANT1"} PAs: [PA]int)
  modifies ReqCH;
{
  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  if (*) {
    PAs := MapAddPA(SingletonPA(COORDINATOR1(0)), (lambda pa: PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) then 1 else 0));
    assume PAs[COORDINATOR1(0)] > 0;
  } else {
    ReqCH := (lambda i: int :: if pid(i) then 1 else 0);
    PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), (lambda pa: PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) then 1 else 0));
    assume (forall pa: PA :: PAs[pa] == 0 <== is#COORDINATOR1(pa));
    assume PAs[COORDINATOR2(0)] == 1;
  }
}

procedure {:atomic} {:layer 2} {:IS "MAIN2", "INV1"} {:elim "COORDINATOR1"} MAIN1({:linear_in "pid"} pids: [int]bool) returns ({:pending_async "COORDINATOR1", "PARTICIPANT1"} PAs: [PA]int) {
  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  PAs := MapAddPA(SingletonPA(COORDINATOR1(0)), (lambda pa: PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) then 1 else 0));
}

procedure {:atomic} {:layer 2, 3} PARTICIPANT1({:linear_in "pid"} pid: int) returns ({:pending_async "PARTICIPANT2"} PAs: [PA]int)
  modifies ReqCH, VoteCH, votes;
{
  var v: vote;

  assert pid(pid);
  if (*) {
    assume ReqCH[pid] > 0;
    ReqCH[pid] := ReqCH[pid] - 1;
    if (*) {
      v := YES();
    } else {
      v := NO();
    }
    votes[pid] := v;
    VoteCH[v] := VoteCH[v] + 1;
  }
  PAs := SingletonPA(PARTICIPANT2(pid));
}

procedure {:atomic} {:layer 2, 5} PARTICIPANT2({:linear_in "pid"} pid: int)
  modifies DecCH, decisions;
{
  var d: decision;

  assert pid(pid);
  assert DecCH[pid][NONE()] == 0;
  if (*) {
    d := COMMIT();
  } else {
    d := ABORT();
  }
  assume DecCH[pid][d] > 0;
  DecCH[pid][d] := DecCH[pid][d] - 1;
  decisions[pid] := d;
}

procedure {:left} {:layer 2} COORDINATOR1({:linear_in "pid"} pid: int) returns ({:pending_async "COORDINATOR2"} PAs: [PA]int)
  modifies ReqCH;
{
  assert pid == 0;
  ReqCH := (lambda i: int :: if pid(i) then ReqCH[i] + 1 else ReqCH[i]);
  PAs := SingletonPA(COORDINATOR2(0));
}

procedure {:atomic} {:layer 2, 4} COORDINATOR2({:linear_in "pid"} pid: int)
  modifies VoteCH, DecCH, decisions;
{
  var dec: decision;

  assert pid == 0;
  if (*) {
    assume VoteCH[YES()] >= n;
    VoteCH[YES()] := VoteCH[YES()] - n;
    dec := COMMIT();
  } else {
    assume VoteCH[NO()] > 0;
    havoc VoteCH;
    assume VoteCH[NO()] == old (VoteCH)[NO()] - 1;
    assume 0 <= VoteCH[YES()] && VoteCH[YES()] <= old (VoteCH)[YES()];
    dec := ABORT();
  }
  decisions[pid] := dec;
  DecCH := (lambda i: int :: (lambda d: decision :: if pid(i) && d == dec then DecCH[i][d] + 1 else DecCH[i][d]));
}

procedure {:yields} {:layer 1} {:refines "MAIN1"} main({:linear_in "pid"} pids: [int]bool)
  requires {:layer 1} Init(pids, ReqCH, VoteCH, DecCH, decisions);
{
  var i: int;
  var {:pending_async} {:layer 1} PAs: [PA]int;
  var {:linear "pid"} pid: int;
  var {:linear "pid"} pids': [int]bool;

  pids' := pids;
  call pid, pids' := linear_transfer(0, pids');
  async call coordinator1(pid);
  i := 1;
  while (i <= n)
    invariant {:layer 1} {:cooperates} true;
    invariant {:layer 1} 1 <= i && i <= n + 1;
    invariant {:layer 1} (forall ii: int :: pid(ii) && ii >= i ==> pids'[ii]);
    invariant {:layer 1} PAs == MapAddPA(SingletonPA(COORDINATOR1(0)), (lambda pa: PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) && pid#PARTICIPANT1(pa) < i then 1 else 0));
  {
    call pid, pids' := linear_transfer(i, pids');
    async call participant1(pid);
    i := i + 1;
  }
}

procedure {:yields} {:layer 1} {:refines "PARTICIPANT1"} participant1({:linear_in "pid"} pid: int)
  requires {:layer 1} pid(pid);
{
  var v: vote;

  if (*) {
    call receive_req(pid);
    havoc v;
    call set_vote(pid, v);
    call send_vote(v);
  }
  async call participant2(pid);
}

procedure {:yields} {:layer 1} {:refines "PARTICIPANT2"} participant2({:linear_in "pid"} pid: int)
  requires {:layer 1} pid(pid);
{
  var d: decision;

  call d := receive_dec(pid);
  call set_decision(pid, d);
}

procedure {:yields} {:layer 1} {:refines "COORDINATOR1"} coordinator1({:linear_in "pid"} pid: int)
  requires {:layer 1} pid == 0;
  requires {:layer 1} (forall vv: vote :: VoteCH[vv] >= 0);
{
  var i: int;
  var {:layer 1} old_ReqCH: [int]int;

  call old_ReqCH := Snapshot_ReqCH();
  i := 1;
  while (i <= n)
    invariant {:layer 1} {:cooperates} true;
    invariant {:layer 1} 1 <= i && i <= n + 1;
    invariant {:layer 1} ReqCH == (lambda ii: int :: if pid(ii) && ii < i then old_ReqCH[ii] + 1 else old_ReqCH[ii]);
  {
    call send_req(i);
    i := i + 1;
  }
  async call coordinator2(pid);
}

procedure {:yields} {:layer 1} {:refines "COORDINATOR2"} coordinator2({:linear_in "pid"} pid: int)
  requires {:layer 1} pid == 0;
  requires {:layer 1} (forall vv: vote :: VoteCH[vv] >= 0);
{
  var d: decision;
  var v: vote;
  var i: int;
  var {:layer 1} old_VoteCH: [vote]int;
  var {:layer 1} old_DecCH: [int][decision]int;

  call old_VoteCH := Snapshot_VoteCH();
  call old_DecCH := Snapshot_DecCH();
  i := 0;
  d := COMMIT();
  while (i < n)
    invariant {:layer 1} 0 <= i && i <= n;
    invariant {:layer 1} VoteCH[YES()] == old_VoteCH[YES()] - i;
    invariant {:layer 1} old_VoteCH[YES()] - i >= 0;
    invariant {:layer 1} VoteCH[NO()] == old_VoteCH[NO()];
  {
    call v := receive_vote();
    if (v == NO()) {
      d := ABORT();
      break;
    }
    i := i + 1;
  }
  call set_decision(pid, d);
  i := 1;
  while (i <= n)
    invariant {:layer 1} {:cooperates} true;
    invariant {:layer 1} 1 <= i && i <= n + 1;
    invariant {:layer 1} DecCH == (lambda ii: int :: (lambda dd: decision :: if pid(ii) && ii < i && dd == d then old_DecCH[ii][dd] + 1 else old_DecCH[ii][dd]));
  {
    call send_dec(i, d);
    i := i + 1;
  }
}

procedure {:intro} {:layer 1} Snapshot_ReqCH() returns (snapshot: [int]int) {
  snapshot := ReqCH;
}

procedure {:intro} {:layer 1} Snapshot_VoteCH() returns (snapshot: [vote]int) {
  snapshot := VoteCH;
}

procedure {:intro} {:layer 1} Snapshot_DecCH() returns (snapshot: [int][decision]int) {
  snapshot := DecCH;
}

procedure {:both} {:layer 1} SET_VOTE({:linear "pid"} pid: int, v: vote)
  modifies votes;
{
  votes[pid] := v;
}

procedure {:both} {:layer 1} SET_DECISION({:linear "pid"} pid: int, d: decision)
  modifies decisions;
{
  decisions[pid] := d;
}

procedure {:left} {:layer 1} SEND_REQ(pid: int)
  modifies ReqCH;
{
  ReqCH[pid] := ReqCH[pid] + 1;
}

procedure {:right} {:layer 1} RECEIVE_REQ(pid: int)
  modifies ReqCH;
{
  assume ReqCH[pid] > 0;
  ReqCH[pid] := ReqCH[pid] - 1;
}

procedure {:left} {:layer 1} SEND_VOTE(v: vote)
  modifies VoteCH;
{
  VoteCH[v] := VoteCH[v] + 1;
}

procedure {:right} {:layer 1} RECEIVE_VOTE() returns (v: vote)
  modifies VoteCH;
{
  assume VoteCH[v] > 0;
  VoteCH[v] := VoteCH[v] - 1;
}

procedure {:left} {:layer 1} SEND_DEC(pid: int, d: decision)
  modifies DecCH;
{
  DecCH[pid][d] := DecCH[pid][d] + 1;
}

procedure {:right} {:layer 1} RECEIVE_DEC(pid: int) returns (d: decision)
  modifies DecCH;
{
  assume DecCH[pid][d] > 0;
  DecCH[pid][d] := DecCH[pid][d] - 1;
}

procedure {:yields} {:layer 0} {:refines "SET_VOTE"} set_vote({:linear "pid"} pid: int, v: vote);

procedure {:yields} {:layer 0} {:refines "SET_DECISION"} set_decision({:linear "pid"} pid: int, d: decision);

procedure {:yields} {:layer 0} {:refines "SEND_REQ"} send_req(pid: int);

procedure {:yields} {:layer 0} {:refines "RECEIVE_REQ"} receive_req(pid: int);

procedure {:yields} {:layer 0} {:refines "SEND_VOTE"} send_vote(v: vote);

procedure {:yields} {:layer 0} {:refines "RECEIVE_VOTE"} receive_vote() returns (v: vote);

procedure {:yields} {:layer 0} {:refines "SEND_DEC"} send_dec(pid: int, d: decision);

procedure {:yields} {:layer 0} {:refines "RECEIVE_DEC"} receive_dec(pid: int) returns (d: decision);

procedure {:both} {:layer 1} LINEAR_TRANSFER(i: int, {:linear_in "pid"} pids: [int]bool) returns ({:linear "pid"} p: int, {:linear "pid"} pids': [int]bool) {
  assert pids[i];
  p := i;
  pids' := pids[i := false];
}

procedure {:yields} {:layer 0} {:refines "LINEAR_TRANSFER"} linear_transfer(i: int, {:linear_in "pid"} pids: [int]bool) returns ({:linear "pid"} p: int, {:linear "pid"} pids': [int]bool);

[Input - ../../vendor/boogie/Test/civl/inductive-sequentialization/2PC.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type {:linear "pid"} Pid = int;

// A type for vote messages of participants
type {:datatype} vote;
function {:constructor} YES():vote;
function {:constructor} NO():vote;

// A type for decision message of the coordinator
type {:datatype} decision;
function {:constructor} COMMIT():decision;
function {:constructor} ABORT():decision;
function {:constructor} NONE():decision;

// Number of participants
const n:int;
axiom n > 0;

// Participants have IDs from 1 to n, and the coordinator has ID 0.
function {:inline} pid (pid:int) : bool { 1 <= pid && pid <= n }
function {:inline} pidLe (pid:int, k:int) : bool { 1 <= pid && pid <= k }
function {:inline} pidGt (pid:int, k:int) : bool { k < pid && pid <= n }

var {:layer 0,6} ReqCH:[int]int;           // Channel of the participants for request messages from the coordinator
var {:layer 0,6} DecCH:[int][decision]int; // Channel of the participants for decision messages from the coordinator
var {:layer 0,6} VoteCH:[vote]int;         // Channel of the coordinator for vote messages from the participants

var {:layer 0,6} votes:[int]vote;          // Participant votes
var {:layer 0,6} decisions:[int]decision;  // Coordinator and participant decisions

type {:pending_async}{:datatype} PA;
function {:constructor} COORDINATOR1(pid:int) : PA;
function {:constructor} COORDINATOR2(pid:int) : PA;
function {:constructor} PARTICIPANT1(pid:int) : PA;
function {:constructor} PARTICIPANT2(pid:int) : PA;

function {:inline} NoPAs () : [PA]int
{ (lambda pa:PA :: 0) }

function {:inline} SingletonPA (pa:PA) : [PA]int
{ NoPAs()[pa := 1] }

function {:builtin "MapAdd"} MapAddPA([PA]int, [PA]int) : [PA]int;

////////////////////////////////////////////////////////////////////////////////

function {:inline} Init(pids:[int]bool, ReqCH:[int]int, VoteCH:[vote]int,
  DecCH:[int][decision]int, decisions:[int]decision) : bool
{
  pids == MapConst(true) &&
  ReqCH == (lambda i:int :: 0) &&
  VoteCH == (lambda v:vote :: 0) &&
  DecCH == (lambda i:int :: (lambda d:decision :: 0)) &&
  decisions == (lambda i:int :: NONE())
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 6}
MAIN5 ({:linear_in "pid"} pids:[int]bool)
modifies ReqCH, VoteCH, votes, decisions;
{
  var dec:decision;
  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  havoc ReqCH, VoteCH, votes, decisions;
  if (*) { dec := COMMIT(); } else { dec := ABORT(); }
  assume dec == COMMIT() ==> (forall i:int :: pid(i) ==> votes[i] == YES());
  assume (forall i:int :: (i == 0 || pid(i)) ==> decisions[i] == dec);
}

procedure {:IS_invariant}{:layer 5}
INV4 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "PARTICIPANT2"} PAs:[PA]int, {:choice} choice:PA)
modifies ReqCH, VoteCH, DecCH, votes, decisions;
{
  var {:pool "INV1"} k: int;

  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  assume
    {:add_to_pool "INV1", k, k+1}
    {:add_to_pool "PARTICIPANT2", PARTICIPANT2(n)}
    0 <= k && k <= n;
  havoc ReqCH, VoteCH, votes, decisions;
  assume
    (decisions[0] == COMMIT() || decisions[0] == ABORT()) &&
    (decisions[0] == COMMIT() ==> (forall i:int :: pid(i) ==> votes[i] == YES())) &&
    (forall i:int :: pidLe(i,k) ==> decisions[i] == decisions[0]);
  DecCH := (lambda i:int :: (lambda d:decision :: if pidGt(i, k) && d == decisions[0] then 1 else 0));
  PAs := (lambda {:pool "PARTICIPANT2"} pa:PA :: if is#PARTICIPANT2(pa) && pidGt(pid#PARTICIPANT2(pa), k) then 1 else 0);
  choice := PARTICIPANT2(k+1);
}

procedure {:IS_abstraction}{:layer 5}
PARTICIPANT2' ({:linear_in "pid"} pid:int)
modifies VoteCH, DecCH, decisions;
{
  var d:decision;
  assert pid(pid);
  assert DecCH[pid][NONE()] == 0;
  assert DecCH[pid][COMMIT()] > 0 || DecCH[pid][ABORT()] > 0;
  if (*) { d := COMMIT(); } else { d := ABORT(); }
  assume DecCH[pid][d] > 0;
  DecCH[pid][d] := DecCH[pid][d] - 1;
  decisions[pid] := d;
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 5}
{:IS "MAIN5","INV4"}{:elim "PARTICIPANT2","PARTICIPANT2'"}
MAIN4 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "PARTICIPANT2"} PAs:[PA]int)
modifies ReqCH, VoteCH, DecCH, votes, decisions;
{
  var dec:decision;
  assert
    {:add_to_pool "INV1", 0}
    Init(pids, ReqCH, VoteCH, DecCH, decisions);
  havoc ReqCH, VoteCH, votes;
  if (*) { dec := COMMIT(); } else { dec := ABORT(); }
  assume dec == COMMIT() ==> (forall i:int :: pid(i) ==> votes[i] == YES());
  decisions[0] := dec;
  DecCH := (lambda i:int :: (lambda d:decision :: if pid(i) && d == dec then 1 else 0));
  PAs := (lambda pa:PA :: if is#PARTICIPANT2(pa) && pid(pid#PARTICIPANT2(pa)) then 1 else 0);
}

procedure {:IS_invariant}{:layer 4}
INV3 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "COORDINATOR2","PARTICIPANT2"} PAs:[PA]int)
modifies ReqCH, VoteCH, DecCH, votes, decisions;
{
  var dec:decision;
  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);

  havoc ReqCH, VoteCH, votes;

  if (*)
  {
    assume VoteCH[YES()] >= 0 && VoteCH[NO()] >= 0;
    assume VoteCH[YES()] + VoteCH[NO()] <= n;
    assume VoteCH[YES()] == n ==> (forall i:int :: pid(i) ==> votes[i] == YES());
    PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), (lambda pa:PA :: if is#PARTICIPANT2(pa) && pid(pid#PARTICIPANT2(pa)) then 1 else 0));
  }
  else
  {
    if (*) { dec := COMMIT(); } else { dec := ABORT(); }
    assume dec == COMMIT() ==> (forall i:int :: pid(i) ==> votes[i] == YES());
    decisions[0] := dec;
    DecCH := (lambda i:int :: (lambda d:decision :: if pid(i) && d == dec then 1 else 0));
    PAs := (lambda pa:PA :: if is#PARTICIPANT2(pa) && pid(pid#PARTICIPANT2(pa)) then 1 else 0);
  }
}

procedure {:IS_abstraction}{:layer 4}
COORDINATOR2' ({:linear_in "pid"} pid:int)
modifies VoteCH, DecCH, decisions;
{
  var dec:decision;
  assert pid == 0;

  if (*)
  {
    assume VoteCH[YES()] >= n;
    dec := COMMIT();
  }
  else
  {
    dec := ABORT();
  }

  decisions[pid] := dec;
  havoc VoteCH;
  DecCH := (lambda i:int :: (lambda d:decision :: if pid(i) && d == dec then DecCH[i][d] + 1 else DecCH[i][d]));
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 4}
{:IS "MAIN4","INV3"}{:elim "COORDINATOR2","COORDINATOR2'"}
MAIN3 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "COORDINATOR2","PARTICIPANT2"} PAs:[PA]int)
modifies ReqCH, VoteCH, votes;
{
  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  havoc ReqCH, VoteCH, votes;
  assume VoteCH[YES()] >= 0 && VoteCH[NO()] >= 0;
  assume VoteCH[YES()] + VoteCH[NO()] <= n;
  assume VoteCH[YES()] == n ==> (forall i:int :: pid(i) ==> votes[i] == YES());
  PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), (lambda pa:PA :: if is#PARTICIPANT2(pa) && pid(pid#PARTICIPANT2(pa)) then 1 else 0));
}

procedure {:IS_invariant}{:layer 3}
INV2 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "COORDINATOR2","PARTICIPANT1","PARTICIPANT2"} PAs:[PA]int, {:choice} choice:PA)
modifies ReqCH, VoteCH, votes;
{
  var {:pool "INV2"} k: int;

  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);

  havoc ReqCH, VoteCH, votes;
  assume
    {:add_to_pool "INV2", k, k+1}
    {:add_to_pool "PARTICIPANT1", PARTICIPANT1(n)}
    0 <= k && k <= n;
  assume (forall i:int :: pidGt(i,k) ==> ReqCH[i] == 1) &&
    VoteCH[YES()] >= 0 && VoteCH[NO()] >= 0 &&
    VoteCH[YES()] + VoteCH[NO()] <= k &&
    (VoteCH[YES()] == k ==> (forall i:int :: pidLe(i,k) ==> votes[i] == YES()));
  PAs := MapAddPA(SingletonPA(COORDINATOR2(0)),
      MapAddPA((lambda pa:PA :: if is#PARTICIPANT2(pa) && pidLe(pid#PARTICIPANT2(pa), k) then 1 else 0),
               (lambda {:pool "PARTICIPANT1"} pa:PA :: if is#PARTICIPANT1(pa) && pidGt(pid#PARTICIPANT1(pa), k) then 1 else 0)));
  choice := PARTICIPANT1(k+1);
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 3}
{:IS "MAIN3","INV2"}{:elim "PARTICIPANT1"}
MAIN2 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "COORDINATOR2","PARTICIPANT1"} PAs:[PA]int)
modifies ReqCH;
{
  assert
    {:add_to_pool "INV2", 0}
    Init(pids, ReqCH, VoteCH, DecCH, decisions);
  ReqCH := (lambda i:int :: if pid(i) then 1 else 0);
  PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), (lambda pa:PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) then 1 else 0));
}

procedure {:IS_invariant}{:layer 2}
INV1 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "COORDINATOR1","COORDINATOR2","PARTICIPANT1"} PAs:[PA]int)
modifies ReqCH;
{
  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  if (*)
  {
    PAs := MapAddPA(SingletonPA(COORDINATOR1(0)), (lambda pa:PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) then 1 else 0));
    assume PAs[COORDINATOR1(0)] > 0;
  }
  else
  {
    ReqCH := (lambda i:int :: if pid(i) then 1 else 0);
    PAs := MapAddPA(SingletonPA(COORDINATOR2(0)), (lambda pa:PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) then 1 else 0));
    assume (forall pa:PA :: PAs[pa] == 0 <== is#COORDINATOR1(pa));
    assume PAs[COORDINATOR2(0)] == 1;
  }
}

////////////////////////////////////////////////////////////////////////////////

procedure {:atomic}{:layer 2}
{:IS "MAIN2","INV1"}{:elim "COORDINATOR1"}
MAIN1 ({:linear_in "pid"} pids:[int]bool)
returns ({:pending_async "COORDINATOR1","PARTICIPANT1"} PAs:[PA]int)
{
  assert Init(pids, ReqCH, VoteCH, DecCH, decisions);
  PAs := MapAddPA(SingletonPA(COORDINATOR1(0)), (lambda pa:PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) then 1 else 0));
}

procedure {:atomic}{:layer 2,3}
PARTICIPANT1 ({:linear_in "pid"} pid:int)
returns ({:pending_async "PARTICIPANT2"} PAs:[PA]int)
modifies ReqCH, VoteCH, votes;
{
  var v:vote;
  assert pid(pid);

  if (*)
  {
    assume ReqCH[pid] > 0;
    ReqCH[pid] := ReqCH[pid] - 1;
    if (*) { v := YES(); } else { v := NO(); }
    votes[pid] := v;
    VoteCH[v] := VoteCH[v] + 1;
  }

  PAs := SingletonPA(PARTICIPANT2(pid));
}

procedure {:atomic}{:layer 2,5}
PARTICIPANT2 ({:linear_in "pid"} pid:int)
modifies DecCH, decisions;
{
  var d:decision;
  assert pid(pid);
  assert DecCH[pid][NONE()] == 0;
  if (*) { d := COMMIT(); } else { d := ABORT(); }
  assume DecCH[pid][d] > 0;
  DecCH[pid][d] := DecCH[pid][d] - 1;
  decisions[pid] := d;
}

procedure {:left}{:layer 2}
COORDINATOR1 ({:linear_in "pid"} pid:int)
returns ({:pending_async "COORDINATOR2"} PAs:[PA]int)
modifies ReqCH;
{
  assert pid == 0;
  ReqCH := (lambda i:int :: if pid(i) then ReqCH[i] + 1 else ReqCH[i]);
  PAs := SingletonPA(COORDINATOR2(0));
}

procedure {:atomic}{:layer 2,4}
COORDINATOR2 ({:linear_in "pid"} pid:int)
modifies VoteCH, DecCH, decisions;
{
  var dec:decision;
  assert pid == 0;

  if (*)
  {
    assume VoteCH[YES()] >= n;
    VoteCH[YES()] := VoteCH[YES()] - n;
    dec := COMMIT();
  }
  else
  {
    assume VoteCH[NO()] > 0;
    havoc VoteCH;
    assume VoteCH[NO()] == old(VoteCH)[NO()] - 1;
    assume 0 <= VoteCH[YES()] && VoteCH[YES()] <= old(VoteCH)[YES()];
    dec := ABORT();
  }

  decisions[pid] := dec;
  DecCH := (lambda i:int :: (lambda d:decision :: if pid(i) && d == dec then DecCH[i][d] + 1 else DecCH[i][d]));
}

////////////////////////////////////////////////////////////////////////////////

procedure {:yields}{:layer 1}{:refines "MAIN1"}
main ({:linear_in "pid"} pids:[int]bool)
requires {:layer 1} Init(pids, ReqCH, VoteCH, DecCH, decisions);
{
  var i:int;
  var {:pending_async}{:layer 1} PAs:[PA]int;
  var {:linear "pid"} pid:int;
  var {:linear "pid"} pids':[int]bool;

  pids' := pids;
  call pid, pids' := linear_transfer(0, pids');
  async call coordinator1(pid);
  i := 1;
  while (i <= n)
  invariant {:layer 1}{:cooperates} true;
  invariant {:layer 1} 1 <= i && i <= n+1;
  invariant {:layer 1} (forall ii:int :: pid(ii) && ii >= i ==> pids'[ii]);
  invariant {:layer 1} PAs == MapAddPA(SingletonPA(COORDINATOR1(0)), (lambda pa:PA :: if is#PARTICIPANT1(pa) && pid(pid#PARTICIPANT1(pa)) && pid#PARTICIPANT1(pa) < i then 1 else 0));
  {
    call pid, pids' := linear_transfer(i, pids');
    async call participant1(pid);
    i := i + 1;
  }
}

procedure {:yields}{:layer 1}{:refines "PARTICIPANT1"}
participant1 ({:linear_in "pid"} pid:int)
requires {:layer 1} pid(pid);
{
  var v:vote;

  if (*)
  {
    call receive_req(pid);
    havoc v;
    call set_vote(pid, v);
    call send_vote(v);
  }
  async call participant2(pid);
}

procedure {:yields}{:layer 1}{:refines "PARTICIPANT2"}
participant2 ({:linear_in "pid"} pid:int)
requires {:layer 1} pid(pid);
{
  var d:decision;

  call d := receive_dec(pid);
  call set_decision(pid, d);
}

procedure {:yields}{:layer 1}{:refines "COORDINATOR1"}
coordinator1 ({:linear_in "pid"} pid:int)
requires {:layer 1} pid == 0;
requires {:layer 1} (forall vv:vote :: VoteCH[vv] >= 0);
{
  var i:int;
  var {:layer 1} old_ReqCH:[int]int;

  call old_ReqCH := Snapshot_ReqCH();
  i := 1;
  while (i <= n)
  invariant {:layer 1}{:cooperates} true;
  invariant {:layer 1} 1 <= i && i <= n+1;
  invariant {:layer 1} ReqCH == (lambda ii:int :: if pid(ii) && ii < i then old_ReqCH[ii] + 1 else old_ReqCH[ii]);
  {
    call send_req(i);
    i := i + 1;
  }
  async call coordinator2(pid);
}

procedure {:yields}{:layer 1}{:refines "COORDINATOR2"}
coordinator2 ({:linear_in "pid"} pid:int)
requires {:layer 1} pid == 0;
requires {:layer 1} (forall vv:vote :: VoteCH[vv] >= 0);
{
  var d:decision;
  var v:vote;
  var i:int;
  var {:layer 1} old_VoteCH:[vote]int;
  var {:layer 1} old_DecCH:[int][decision]int;

  call old_VoteCH := Snapshot_VoteCH();
  call old_DecCH := Snapshot_DecCH();
  i := 0;
  d := COMMIT();
  while (i < n)
  invariant {:layer 1} 0 <= i && i <= n;
  invariant {:layer 1} VoteCH[YES()] == old_VoteCH[YES()] - i;
  invariant {:layer 1} old_VoteCH[YES()] - i >= 0;
  invariant {:layer 1} VoteCH[NO()] == old_VoteCH[NO()];
  {
    call v := receive_vote();
    if (v == NO())
    {
      d := ABORT();
      break;
    }
    i := i + 1;
  }
  call set_decision(pid, d);
  i := 1;
  while (i <= n)
  invariant {:layer 1}{:cooperates} true;
  invariant {:layer 1} 1 <= i && i <= n+1;
  invariant {:layer 1} DecCH == (lambda ii:int :: (lambda dd:decision :: if pid(ii) && ii < i && dd == d then old_DecCH[ii][dd] + 1 else old_DecCH[ii][dd]));
  {
    call send_dec(i, d);
    i := i + 1;
  }
}

procedure {:intro}{:layer 1} Snapshot_ReqCH() returns (snapshot:[int]int)
{
  snapshot := ReqCH;
}

procedure {:intro}{:layer 1} Snapshot_VoteCH() returns (snapshot:[vote]int)
{
  snapshot := VoteCH;
}

procedure {:intro}{:layer 1} Snapshot_DecCH() returns (snapshot:[int][decision]int)
{
  snapshot := DecCH;
}

////////////////////////////////////////////////////////////////////////////////

procedure {:both}{:layer 1} SET_VOTE({:linear "pid"} pid:int, v:vote)
modifies votes;
{
  votes[pid] := v;
}

procedure {:both}{:layer 1} SET_DECISION({:linear "pid"} pid:int, d:decision)
modifies decisions;
{
  decisions[pid] := d;
}

procedure {:left}{:layer 1} SEND_REQ(pid:int)
modifies ReqCH;
{
  ReqCH[pid] := ReqCH[pid] + 1;
}

procedure {:right}{:layer 1} RECEIVE_REQ(pid:int)
modifies ReqCH;
{
  assume ReqCH[pid] > 0;
  ReqCH[pid] := ReqCH[pid] - 1;
}

procedure {:left}{:layer 1} SEND_VOTE(v:vote)
modifies VoteCH;
{
  VoteCH[v] := VoteCH[v] + 1;
}

procedure {:right}{:layer 1} RECEIVE_VOTE() returns (v:vote)
modifies VoteCH;
{
  assume VoteCH[v] > 0;
  VoteCH[v] := VoteCH[v] - 1;
}

procedure {:left}{:layer 1} SEND_DEC(pid:int, d:decision)
modifies DecCH;
{
  DecCH[pid][d] := DecCH[pid][d] + 1;
}

procedure {:right}{:layer 1} RECEIVE_DEC(pid:int) returns (d:decision)
modifies DecCH;
{
  assume DecCH[pid][d] > 0;
  DecCH[pid][d] := DecCH[pid][d] - 1;
}

procedure {:yields}{:layer 0}{:refines "SET_VOTE"} set_vote({:linear "pid"} pid:int, v:vote);
procedure {:yields}{:layer 0}{:refines "SET_DECISION"} set_decision({:linear "pid"} pid:int, d:decision);
procedure {:yields}{:layer 0}{:refines "SEND_REQ"} send_req(pid:int);
procedure {:yields}{:layer 0}{:refines "RECEIVE_REQ"} receive_req(pid:int);
procedure {:yields}{:layer 0}{:refines "SEND_VOTE"} send_vote(v:vote);
procedure {:yields}{:layer 0}{:refines "RECEIVE_VOTE"} receive_vote() returns (v:vote);
procedure {:yields}{:layer 0}{:refines "SEND_DEC"} send_dec(pid:int, d:decision);
procedure {:yields}{:layer 0}{:refines "RECEIVE_DEC"} receive_dec(pid:int) returns (d:decision);

procedure {:both}{:layer 1}
LINEAR_TRANSFER(i:int, {:linear_in "pid"} pids:[int]bool)
returns ({:linear "pid"} p:int, {:linear "pid"} pids':[int]bool)
{
  assert pids[i];
  p := i;
  pids' := pids[i := false];
}

procedure {:yields}{:layer 0}{:refines "LINEAR_TRANSFER"} linear_transfer(i:int, {:linear_in "pid"} pids:[int]bool)
returns ({:linear "pid"} p:int, {:linear "pid"} pids':[int]bool);
