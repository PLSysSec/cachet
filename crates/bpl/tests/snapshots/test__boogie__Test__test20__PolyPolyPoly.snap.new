---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "C",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "p",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                        ],
                        keys: [],
                        value: App(
                            TypeApp {
                                head: "a",
                                tail: None,
                            },
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "q",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                        ],
                        keys: [
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                            App(
                                TypeApp {
                                    head: "a",
                                    tail: None,
                                },
                            ),
                        ],
                        value: App(
                            TypeApp {
                                head: "a",
                                tail: None,
                            },
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "r",
                ],
                type_: Map(
                    MapType {
                        type_params: [
                            "a",
                        ],
                        keys: [],
                        value: Atom(
                            Paren(
                                App(
                                    TypeApp {
                                        head: "C",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "a",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "x",
                ],
                type_: App(
                    TypeApp {
                        head: "C",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Int,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "y",
                ],
                type_: App(
                    TypeApp {
                        head: "C",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Bool,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Nat(
                                            "5",
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "p",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Nat(
                                            "5",
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "r",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Var(
                                            "x",
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Var(
                                            "y",
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "p",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Var(
                                            "x",
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Var(
                                            "y",
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "r",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Var(
                                            "x",
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Nat(
                                            "5",
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "r",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Var(
                                            "x",
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Var(
                                            "y",
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "p",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Nat(
                                            "5",
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "q",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "p",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: None,
                                                    },
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: Some(
                                                            Var(
                                                                "x",
                                                            ),
                                                        ),
                                                    },
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: Some(
                                                            Var(
                                                                "y",
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "p",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: None,
                                                    },
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: Some(
                                                            Nat(
                                                                "5",
                                                            ),
                                                        ),
                                                    },
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: Some(
                                                            BoolLit(
                                                                true,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                    value: None,
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "p",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Array(
                        ArrayExpr {
                            expr: Var(
                                "q",
                            ),
                            subscripts: [
                                ArraySubscript {
                                    keys: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "p",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "p",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                    value: None,
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        Nat(
                                            "5",
                                        ),
                                    ),
                                },
                                ArraySubscript {
                                    keys: [],
                                    value: Some(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                },
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Var(
                        "p",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [
                            "a",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "p",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [],
                                                value: None,
                                            },
                                            ArraySubscript {
                                                keys: [],
                                                value: Some(
                                                    Nat(
                                                        "5",
                                                    ),
                                                ),
                                            },
                                            ArraySubscript {
                                                keys: [],
                                                value: Some(
                                                    BoolLit(
                                                        true,
                                                    ),
                                                ),
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Var(
                                    "x",
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [
                            "a",
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "p",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [],
                                                value: None,
                                            },
                                            ArraySubscript {
                                                keys: [],
                                                value: Some(
                                                    Nat(
                                                        "5",
                                                    ),
                                                ),
                                            },
                                            ArraySubscript {
                                                keys: [],
                                                value: Some(
                                                    BoolLit(
                                                        true,
                                                    ),
                                                ),
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "q",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: Exists,
                    body: QuantBody {
                        type_params: [
                            "a",
                            "b",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "b",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Rel(
                            RelExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "q",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "q",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
]

[Printed]
type C _;

const p: <a>[]a;

const q: <a>[a, a]a;

const r: <a>[](C a);

const x: C int;

const y: C bool;

axiom p[][:= 5][:= true] == p;

axiom p[][:= 5][:= true] == r;

axiom p[][:= x][:= y] == p;

axiom p[][:= x][:= y] == r;

axiom p[][:= x][:= 5] == r;

axiom p[][:= x][:= y] == p[][:= 5][:= true];

axiom q[p[][:= x][:= y], p[][:= 5][:= true]] == p;

axiom q[p[], p[]][:= 5][:= true] == p;

axiom (exists <a> x: a :: p[][:= 5][:= true] == x);

axiom (exists <a, b> x: a, y: b :: p[][:= 5][:= true] == q[x, y]);

axiom (exists <a, b> x: a, y: b :: q[x, x] == q[y, y]);

[Input - ../../vendor/boogie/Test/test20/PolyPolyPoly.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type C _;

const p: <a>[]a;
const q: <a>[a, a]a;
const r: <a>[](C a);

const x: C int;
const y: C bool;

axiom (p[][:= 5][:= true] == p);
axiom (p[][:= 5][:= true] == r);               // error
axiom (p[][:= x][:= y] == p);
axiom (p[][:= x][:= y] == r);
axiom (p[][:= x][:= 5] == r);                  // error
axiom (p[][:= x][:= y] == p[][:= 5][:= true]);
axiom (q[p[][:= x][:= y], p[][:= 5][:= true]] == p);
axiom (q[p[], p[]][:= 5][:= true] == p);

axiom (exists<a> x:a :: p[][:= 5][:= true] == x);
axiom (exists<a,b> x:a, y:b :: p[][:= 5][:= true] == q[x,y]);  // error
axiom (exists<a,b> x:a, y:b :: q[x, x] == q[y, y]);
