---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "g0",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "g1",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "h0",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "name",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "h1",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "name",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "X",
                ],
                type_: App(
                    TypeApp {
                        head: "name",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "hh",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "name",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "hout",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "name",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "h1",
                            "g0",
                        ],
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "hh",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "name",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "hout",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "name",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: App(
                                            TypeApp {
                                                head: "any",
                                                tail: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "g0",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "5",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "g1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "6",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "a",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "null",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "b",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "12",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "next",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "next",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "g0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "g1",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "a",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "b",
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "more",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "more",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "hh",
                                        subscripts: [
                                            [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "X",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "101",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "h0",
                                        subscripts: [
                                            [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "X",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "102",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "h1",
                                        subscripts: [
                                            [
                                                Var(
                                                    "a",
                                                ),
                                                Var(
                                                    "X",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "103",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "hh",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "h0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "h0",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "h1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "h1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "hh",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "hh",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "h0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "h1",
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "PX",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "h1",
                            "g0",
                        ],
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "PY",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "h1",
                            "g0",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "PX",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "PY",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "PZ",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "h1",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "PX",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "h",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "name",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Int,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "QCallerBad",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "g0",
                                            "g1",
                                            "h0",
                                        ],
                                        target: "Q",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "QCallerGood",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "g0",
                            "h0",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "start",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "t",
                                            "g0",
                                            "h0",
                                        ],
                                        target: "Q",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "MismatchedTypes",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "MismatchedTypes",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "MismatchedTypes",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "start",
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "name",
                    type_params: [],
                    type_: None,
                },
                TypeDecl {
                    ident: "any",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "null",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
]

[Printed]
var g0: int;

var g1: int;

var h0: [ref, name]int;

var h1: [ref, name]int;

const X: name;

procedure P(a: ref, hh: [ref, name]int) returns (b: int, hout: [ref, name]any);
  modifies h1, g0;

implementation P(a: ref, hh: [ref, name]int) returns (b: int, hout: [ref, name]any) {
  start:
  g0 := 5;
  g1 := 6;
  a := null;
  b := 12;
  goto next;
  next:
  havoc g0;
  havoc g1;
  havoc a;
  havoc b;
  goto more;
  more:
  hh[a, X] := 101;
  h0[a, X] := 102;
  h1[a, X] := 103;
  hh := h0;
  h0 := h1;
  h1 := hh;
  havoc hh;
  havoc h0;
  havoc h1;
  return;
}

procedure PX();
  modifies h1, g0;

procedure PY()
  modifies h1, g0;
{
  start:
  call PX();
  call PY();
  return;
}

procedure PZ()
  modifies h1;
{
  start:
  call PX();
  return;
}

procedure Q() returns (x: int, y: int, h: [ref, name]int) {
  start:
  return;
}

procedure QCallerBad() {
  start:
  call g0, g1, h0 := Q();
  return;
}

procedure QCallerGood()
  modifies g0, h0;
{
  var t: int;

  start:
  call t, g0, h0 := Q();
  return;
}

procedure MismatchedTypes(x: int);

implementation MismatchedTypes(x: bool) {
  start:
  return;
}

implementation MismatchedTypes(y: bool) {
  start:
  return;
}

type ref,
  name,
  any;

const null: ref;

[Input - ../../vendor/boogie/Test/test1/Frame1.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
var g0: int;
var g1: int;

var h0: [ref, name]int;
var h1: [ref, name]int;

const X: name;

procedure P(a: ref, hh: [ref, name]int) returns (b: int, hout: [ref, name]any);
  modifies h1, g0;

implementation P(a: ref, hh: [ref, name]int)
               returns (b: int, hout: [ref, name]any) {
  start:
    g0 := 5;
    g1 := 6;  // error: g1 is not in modifies clause
    a := null;  // error: in-parameters are not mutable 
    b := 12;
    goto next;
  next:
    havoc g0;
    havoc g1;  // error: g1 is not in modifies clause
    havoc a;  // error: in-parameters are not mutable
    havoc b;
    goto more;
  more:
    hh[a,X] := 101;  // error: in-parameter (hh) is not mutable
    h0[a,X] := 102;  // error: h0 is not in modifies clause
    h1[a,X] := 103;
    hh := h0;  // error: in-parameter is not mutable
    h0 := h1;  // error: h0 is not in modifies clause
    h1 := hh;
    havoc hh;  // error: in-parameter is not mutable
    havoc h0;  // error: h0 is not in modifies clause
    havoc h1;
    return;
}

procedure PX();
  modifies h1, g0;

procedure PY()
  modifies h1, g0;
{
  start:
    call PX();
    call PY();
    return;
}

procedure PZ()
  modifies h1;
{
  start:
    call PX();  // error: PX has larger frame than PZ
    return;
}

procedure Q() returns (x: int, y: int, h: [ref, name]int)
{
  start:
    return;
}

procedure QCallerBad()
{
  start:
    call g0, g1, h0 := Q();
    return;
}

procedure QCallerGood()
  modifies g0, h0;
{
  var t: int;

  start:
    call t, g0, h0 := Q();
    return;
}

procedure MismatchedTypes(x: int);

implementation MismatchedTypes(x: bool)  // error
{
  start:
    return;
}
implementation MismatchedTypes(y: bool)  // error (this time with a different name for the formal)
{
  start:
    return;
}


type ref, name, any;
const null : ref;
