---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [],
            ident: "Map#Domain",
            type_params: [
                "QUN",
                "YAN",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Map",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "QUN",
                                        tail: Some(
                                            App(
                                                TypeApp {
                                                    head: "YAN",
                                                    tail: None,
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "QUN",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Map#Empty",
            type_params: [
                "QUN",
                "YAN",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Map",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "QUN",
                                    tail: Some(
                                        App(
                                            TypeApp {
                                                head: "YAN",
                                                tail: None,
                                            },
                                        ),
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Map",
                    type_params: [
                        "QUN",
                        "YAN",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "QUN",
                            "YAN",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "u",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "QUN",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Map#Domain",
                                                    args: [
                                                        Coercion(
                                                            CoercionExpr {
                                                                expr: FuncCall(
                                                                    FuncCall {
                                                                        target: "Map#Empty",
                                                                        args: [],
                                                                    },
                                                                ),
                                                                coercions: [
                                                                    Type(
                                                                        App(
                                                                            TypeApp {
                                                                                head: "Map",
                                                                                tail: Some(
                                                                                    App(
                                                                                        TypeApp {
                                                                                            head: "QUN",
                                                                                            tail: Some(
                                                                                                App(
                                                                                                    TypeApp {
                                                                                                        head: "YAN",
                                                                                                        tail: None,
                                                                                                    },
                                                                                                ),
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "u",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Map#Domain",
                                                args: [
                                                    Coercion(
                                                        CoercionExpr {
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "Map#Empty",
                                                                    args: [],
                                                                },
                                                            ),
                                                            coercions: [
                                                                Type(
                                                                    App(
                                                                        TypeApp {
                                                                            head: "Map",
                                                                            tail: Some(
                                                                                App(
                                                                                    TypeApp {
                                                                                        head: "QUN",
                                                                                        tail: Some(
                                                                                            App(
                                                                                                TypeApp {
                                                                                                    head: "YAN",
                                                                                                    tail: None,
                                                                                                },
                                                                                            ),
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "u",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [],
                },
            ),
        },
    ),
]

[Printed]
function Map#Domain<QUN, YAN>(Map QUN YAN): [QUN]bool;

function Map#Empty<QUN, YAN>(): Map QUN YAN;

type Map QUN YAN;

axiom (forall <QUN, YAN> u: QUN :: {Map#Domain(Map#Empty() : Map QUN YAN)[u]} !Map#Domain(Map#Empty() : Map QUN YAN)[u]);

procedure P() {
}

[Input - ../../vendor/boogie/Test/test2/BoundedTypeParameterQuantifier.bpl]
// RUN: %boogie /proverWarnings:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

function Map#Domain<QUN, YAN>(Map QUN YAN): [QUN] bool;
function Map#Empty<QUN, YAN>(): Map QUN YAN;
type Map QUN YAN;

axiom (forall<QUN, YAN> u: QUN ::
        { Map#Domain(Map#Empty(): Map QUN YAN)[u] }
        !Map#Domain(Map#Empty(): Map QUN YAN)[u]);

procedure P()
{
}
