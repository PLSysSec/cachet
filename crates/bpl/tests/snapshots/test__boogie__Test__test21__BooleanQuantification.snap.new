---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Func(
        FuncDecl {
            attrs: [],
            ident: "f",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Bool,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "f",
                            args: [
                                BoolLit(
                                    true,
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "17",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "f",
                            args: [
                                BoolLit(
                                    false,
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "19",
                    ),
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "f",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Ge,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Q",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "x",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Nat(
                                                                            "7",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: Or,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "x",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Nat(
                                                                            "9",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "x",
                                                                ),
                                                                op: Ge,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "R",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "f",
                                                    args: [
                                                        Quant(
                                                            QuantExpr {
                                                                kind: ForAll,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "x",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "f",
                                                                                    args: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Ge,
                                                                            rhs: Nat(
                                                                                "10",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "19",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: Exists,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "f",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Gt,
                                                        rhs: Nat(
                                                            "20",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "g",
            type_params: [
                "a",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "a",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g",
                            args: [
                                BoolLit(
                                    true,
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "17",
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "g",
                            args: [
                                BoolLit(
                                    false,
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: Nat(
                        "21",
                    ),
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "S",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "g",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Ge,
                                                        rhs: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "g",
                                                    args: [
                                                        Quant(
                                                            QuantExpr {
                                                                kind: ForAll,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "x",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Bool,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: Rel(
                                                                        RelExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "g",
                                                                                    args: [
                                                                                        Var(
                                                                                            "x",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Ge,
                                                                            rhs: Nat(
                                                                                "0",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Nat(
                                                "17",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "x",
                                                                ],
                                                                type_: Atom(
                                                                    Bool,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "f",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: Eq,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "g",
                                                                args: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
function f(bool): int;

axiom f(true) == 17;

axiom f(false) == 19;

procedure P() {
  assert (forall x: bool :: f(x) >= 0);
}

procedure Q() {
  assert (forall x: int :: x == 7 || x == 9 ==> x >= 0);
}

procedure R() {
  assert f((forall x: bool :: f(x) >= 10)) < 19;
  assert (exists x: bool :: f(x) > 20);
}

function g<a>(a): int;

axiom g(true) == 17;

axiom g(false) == 21;

procedure S() {
  assert (forall x: bool :: g(x) >= 0);
  assert g((forall x: bool :: g(x) >= 0)) >= 17;
  assert (forall x: bool :: f(x) == g(x));
}

[Input - ../../vendor/boogie/Test/test21/BooleanQuantification.bpl]
// RUN: %boogie -typeEncoding:p -logPrefix:0p "%s" > "%t"
// RUN: %diff "%s.p.expect" "%t"
// RUN: %boogie -typeEncoding:a -logPrefix:0a "%s" > "%t"
// RUN: %diff "%s.a.expect" "%t"



function f(bool) returns (int);

axiom f(true) == 17;
axiom f(false) == 19;

procedure P() returns () {
  assert (forall x:bool :: f(x) >= 0);
}

procedure Q() returns () {
  assert (forall x:int :: (x==7 || x==9) ==> x >= 0);
}

procedure R() returns () {
  assert f((forall x:bool :: f(x) >= 10)) < 19;
  assert (exists x:bool :: f(x) > 20);       // should not be provable
}


function g<a>(a) returns (int);

axiom g(true) == 17;
axiom g(false) == 21;

procedure S() returns () {
  assert (forall x:bool :: g(x) >= 0);
  assert g((forall x:bool :: g(x) >= 0)) >= 17;
  assert (forall x:bool :: f(x) == g(x));   // should not be provable
}
