---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "Node",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "X",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "null",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "lmap",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "Node",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "dom",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "lmap",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "map",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "lmap",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Int,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "EmptyLmap",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        App(
                            TypeApp {
                                head: "lmap",
                                tail: None,
                            },
                        ),
                    ),
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: FuncCall(
                        FuncCall {
                            target: "dom",
                            args: [
                                FuncCall(
                                    FuncCall {
                                        target: "EmptyLmap",
                                        args: [],
                                    },
                                ),
                            ],
                        },
                    ),
                    op: Eq,
                    rhs: FuncCall(
                        FuncCall {
                            target: "MapConst",
                            args: [
                                BoolLit(
                                    false,
                                ),
                            ],
                        },
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Add",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "lmap",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "v",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        App(
                            TypeApp {
                                head: "lmap",
                                tail: None,
                            },
                        ),
                    ),
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "lmap",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "dom",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Add",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                                Var(
                                                                    "v",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "dom",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                true,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "map",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Add",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                                Var(
                                                                    "v",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "map",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                        value: Some(
                                                            Var(
                                                                "v",
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Remove",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: App(
                        TypeApp {
                            head: "lmap",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        App(
                            TypeApp {
                                head: "lmap",
                                tail: None,
                            },
                        ),
                    ),
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "lmap",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "dom",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Remove",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "dom",
                                                        args: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                false,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "map",
                                                args: [
                                                    FuncCall(
                                                        FuncCall {
                                                            target: "Remove",
                                                            args: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "map",
                                                args: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "right",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicReadTopOfStack",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "v",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "null",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "dom",
                                                            args: [
                                                                Var(
                                                                    "Stack",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "v",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicReadTopOfStack",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "ReadTopOfStack",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "right",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicLoad",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "dom",
                                                    args: [
                                                        Var(
                                                            "Stack",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "v",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "map",
                                                        args: [
                                                            Var(
                                                                "Stack",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicLoad",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Load",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicStore",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l_in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l_out",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "dom",
                                                    args: [
                                                        Var(
                                                            "l_in",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "l_out",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Add",
                                                args: [
                                                    Var(
                                                        "l_in",
                                                    ),
                                                    Var(
                                                        "i",
                                                    ),
                                                    Var(
                                                        "v",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicStore",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Store",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l_in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "i",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "v",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l_out",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicTransferToStack",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "oldVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "newVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l_in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l_out",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "TopOfStack",
                            "Stack",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "dom",
                                                    args: [
                                                        Var(
                                                            "l_in",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "newVal",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "oldVal",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "TopOfStack",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "TopOfStack",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "newVal",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "l_out",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "EmptyLmap",
                                                                args: [],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "Stack",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Add",
                                                                args: [
                                                                    Var(
                                                                        "Stack",
                                                                    ),
                                                                    Var(
                                                                        "newVal",
                                                                    ),
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: FuncCall(
                                                                                FuncCall {
                                                                                    target: "map",
                                                                                    args: [
                                                                                        Var(
                                                                                            "l_in",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "newVal",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "r",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "l_out",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Var(
                                                                    "l_in",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "r",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicTransferToStack",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "TransferToStack",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "oldVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "newVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l_in",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l_out",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicTransferFromStack",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "oldVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "newVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "TopOfStack",
                            "Stack",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "oldVal",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "TopOfStack",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "TopOfStack",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "newVal",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "r",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "r",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicTransferFromStack",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "TransferFromStack",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "oldVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "newVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "TopOfStack",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "Node",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "Stack",
                        ],
                        type_: App(
                            TypeApp {
                                head: "lmap",
                                tail: None,
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldInv",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "BetweenSet",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "map",
                                                    args: [
                                                        Var(
                                                            "Stack",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "TopOfStack",
                                            ),
                                            Var(
                                                "null",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "TopOfStack",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Subset",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "BetweenSet",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "map",
                                                        args: [
                                                            Var(
                                                                "Stack",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "TopOfStack",
                                                ),
                                                Var(
                                                    "null",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Union",
                                            args: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "Singleton",
                                                        args: [
                                                            Var(
                                                                "null",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                FuncCall(
                                                    FuncCall {
                                                        target: "dom",
                                                        args: [
                                                            Var(
                                                                "Stack",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "Node",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "NodeCollector",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Array(
                    ArrayExpr {
                        expr: FuncCall(
                            FuncCall {
                                target: "MapConst",
                                args: [
                                    BoolLit(
                                        false,
                                    ),
                                ],
                            },
                        ),
                        subscripts: [
                            ArraySubscript {
                                keys: [
                                    Var(
                                        "x",
                                    ),
                                ],
                                value: Some(
                                    BoolLit(
                                        true,
                                    ),
                                ),
                            },
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "Node",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "NodeSetCollector",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Var(
                    "x",
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_push",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x_lmap",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "Stack",
                            "TopOfStack",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "dom",
                                                    args: [
                                                        Var(
                                                            "x_lmap",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "Stack",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Add",
                                                args: [
                                                    Var(
                                                        "Stack",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "TopOfStack",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "TopOfStack",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_push",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldInv",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "push",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "Node",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x_lmap",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lmap",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "1",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "dom",
                                        args: [
                                            Var(
                                                "x_lmap",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "x",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "g",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "Node",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t_lmap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "lmap",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "t_lmap",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x_lmap",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "yields",
                                                        params: [],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "yield_loop",
                                                        params: [
                                                            String(
                                                                StringLit {
                                                                    text: "YieldInv",
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "dom",
                                                            args: [
                                                                Var(
                                                                    "t_lmap",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "dom",
                                                            args: [
                                                                Var(
                                                                    "x_lmap",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "t",
                                                        ],
                                                        target: "ReadTopOfStack",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "t_lmap",
                                                        ],
                                                        target: "Store",
                                                        params: [
                                                            Var(
                                                                "t_lmap",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "g",
                                                            "t_lmap",
                                                        ],
                                                        target: "TransferToStack",
                                                        params: [
                                                            Var(
                                                                "t",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "t_lmap",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "g",
                                                        ),
                                                    ),
                                                    then: [
                                                        StructuredCmd(
                                                            Break(
                                                                BreakCmd {
                                                                    label: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_pop",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "t",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "TopOfStack",
                            "Stack",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "TopOfStack",
                                            ),
                                            op: Neq,
                                            rhs: Var(
                                                "null",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "t",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "TopOfStack",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "TopOfStack",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: FuncCall(
                                                    FuncCall {
                                                        target: "map",
                                                        args: [
                                                            Var(
                                                                "Stack",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_pop",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldInv",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "pop",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "t",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "g",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "yields",
                                                        params: [],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "1",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "yield_loop",
                                                        params: [
                                                            String(
                                                                StringLit {
                                                                    text: "YieldInv",
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "t",
                                                        ],
                                                        target: "ReadTopOfStack",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "t",
                                                                ),
                                                                op: Neq,
                                                                rhs: Var(
                                                                    "null",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [
                                                                            "x",
                                                                        ],
                                                                        target: "Load",
                                                                        params: [
                                                                            Var(
                                                                                "t",
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [
                                                                            "g",
                                                                        ],
                                                                        target: "TransferFromStack",
                                                                        params: [
                                                                            Var(
                                                                                "t",
                                                                            ),
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        StructuredCmd(
                                                            If(
                                                                IfCmd {
                                                                    guard: Expr(
                                                                        Var(
                                                                            "g",
                                                                        ),
                                                                    ),
                                                                    then: [
                                                                        StructuredCmd(
                                                                            Break(
                                                                                BreakCmd {
                                                                                    label: None,
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                    else_: None,
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Equal",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Subset",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Empty",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Singleton",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Union",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Empty",
                                                args: [],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Singleton",
                                                    args: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Singleton",
                                                args: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Singleton",
                                            args: [
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Array(
                            ArrayExpr {
                                expr: FuncCall(
                                    FuncCall {
                                        target: "Singleton",
                                        args: [
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "y",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Union",
                                                    args: [
                                                        Var(
                                                            "S",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Union",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Union",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Union",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Or,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "T",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Equal",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Equal",
                                        args: [
                                            Var(
                                                "S",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Subset",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Subset",
                                                args: [
                                                    Var(
                                                        "T",
                                                    ),
                                                    Var(
                                                        "S",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "S",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "T",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "S",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Subset",
                                                args: [
                                                    Var(
                                                        "S",
                                                    ),
                                                    Var(
                                                        "T",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "T",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "x",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "S",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "T",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Subset",
                                            args: [
                                                Var(
                                                    "S",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Subset",
                                        args: [
                                            Var(
                                                "S",
                                            ),
                                            Var(
                                                "T",
                                            ),
                                        ],
                                    },
                                ),
                                op: Or,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Exists,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "x",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "S",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "T",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "x",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Between",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "z",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Avoiding",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "y",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "z",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "BetweenSet",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "f",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "z",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            Atom(
                                Int,
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "BetweenSet",
                                                    args: [
                                                        Var(
                                                            "f",
                                                        ),
                                                        Var(
                                                            "x",
                                                        ),
                                                        Var(
                                                            "z",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "y",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "BetweenSet",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "BetweenSet",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "BetweenSet",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "BetweenSet",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "Between",
                                args: [
                                    Var(
                                        "f",
                                    ),
                                    Var(
                                        "x",
                                    ),
                                    Var(
                                        "x",
                                    ),
                                    Var(
                                        "x",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "BetweenSet",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "Between",
                                args: [
                                    Var(
                                        "f",
                                    ),
                                    Var(
                                        "z",
                                    ),
                                    Var(
                                        "z",
                                    ),
                                    Var(
                                        "z",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: FuncCall(
                            FuncCall {
                                target: "Between",
                                args: [
                                    Var(
                                        "f",
                                    ),
                                    Var(
                                        "x",
                                    ),
                                    Var(
                                        "x",
                                    ),
                                    Var(
                                        "x",
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "f",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: FuncCall(
                            FuncCall {
                                target: "Between",
                                args: [
                                    Var(
                                        "f",
                                    ),
                                    Var(
                                        "x",
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "f",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "f",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "f",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "x",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "y",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "f",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "x",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "f",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "x",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "x",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "y",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Or,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "u",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "u",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "u",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "u",
                                            ),
                                            Var(
                                                "u",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Avoiding",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Avoiding",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Between",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Or,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Between",
                                                        args: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                            Var(
                                                                "y",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: Neg(
                                                    NegExpr {
                                                        op: Logical,
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "Between",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "x",
                                                                    ),
                                                                    Var(
                                                                        "z",
                                                                    ),
                                                                    Var(
                                                                        "z",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "z",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Between",
                                            args: [
                                                Var(
                                                    "f",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                                Var(
                                                    "y",
                                                ),
                                                Var(
                                                    "z",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Between",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                            Var(
                                                "y",
                                            ),
                                            Var(
                                                "z",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Avoiding",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Avoiding",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "x",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                    Var(
                                                        "z",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "u",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "v",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "q",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Avoiding",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "q",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "u",
                                                ),
                                                Var(
                                                    "v",
                                                ),
                                                Var(
                                                    "x",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Avoiding",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "f",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "p",
                                                                ),
                                                            ],
                                                            value: Some(
                                                                Var(
                                                                    "q",
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                            Var(
                                                "u",
                                            ),
                                            Var(
                                                "v",
                                            ),
                                            Var(
                                                "x",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "Avoiding",
                                                        args: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "u",
                                                            ),
                                                            Var(
                                                                "v",
                                                            ),
                                                            Var(
                                                                "p",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Avoiding",
                                                        args: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "u",
                                                            ),
                                                            Var(
                                                                "v",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "Avoiding",
                                                                        args: [
                                                                            Var(
                                                                                "f",
                                                                            ),
                                                                            Var(
                                                                                "u",
                                                                            ),
                                                                            Var(
                                                                                "p",
                                                                            ),
                                                                            Var(
                                                                                "x",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "p",
                                                                        ),
                                                                        op: Neq,
                                                                        rhs: Var(
                                                                            "x",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "Avoiding",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "q",
                                                                    ),
                                                                    Var(
                                                                        "v",
                                                                    ),
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Avoiding",
                                                        args: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "q",
                                                            ),
                                                            Var(
                                                                "v",
                                                            ),
                                                            Var(
                                                                "x",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "q",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "u",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "BetweenSet",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "q",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "u",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "Avoiding",
                                        args: [
                                            Var(
                                                "f",
                                            ),
                                            Var(
                                                "u",
                                            ),
                                            Var(
                                                "w",
                                            ),
                                            Var(
                                                "p",
                                            ),
                                        ],
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "BetweenSet",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "f",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "p",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "q",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "u",
                                                        ),
                                                        Var(
                                                            "w",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "BetweenSet",
                                                    args: [
                                                        Var(
                                                            "f",
                                                        ),
                                                        Var(
                                                            "u",
                                                        ),
                                                        Var(
                                                            "w",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "q",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "u",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "BetweenSet",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "q",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "u",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "p",
                                                        ),
                                                        op: Neq,
                                                        rhs: Var(
                                                            "w",
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Avoiding",
                                                        args: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "u",
                                                            ),
                                                            Var(
                                                                "p",
                                                            ),
                                                            Var(
                                                                "w",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Avoiding",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "q",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                    Var(
                                                        "p",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "BetweenSet",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "f",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "p",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "q",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "u",
                                                        ),
                                                        Var(
                                                            "w",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "Union",
                                                    args: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "BetweenSet",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "u",
                                                                    ),
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "BetweenSet",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "q",
                                                                    ),
                                                                    Var(
                                                                        "w",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Int,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "p",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "q",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "u",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "w",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "BetweenSet",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "f",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                ],
                                                                value: Some(
                                                                    Var(
                                                                        "q",
                                                                    ),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "u",
                                                ),
                                                Var(
                                                    "w",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Avoiding",
                                                args: [
                                                    Var(
                                                        "f",
                                                    ),
                                                    Var(
                                                        "u",
                                                    ),
                                                    Var(
                                                        "w",
                                                    ),
                                                    Var(
                                                        "p",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Or,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "p",
                                                                ),
                                                                op: Neq,
                                                                rhs: Var(
                                                                    "w",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "Avoiding",
                                                                args: [
                                                                    Var(
                                                                        "f",
                                                                    ),
                                                                    Var(
                                                                        "u",
                                                                    ),
                                                                    Var(
                                                                        "p",
                                                                    ),
                                                                    Var(
                                                                        "w",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "Avoiding",
                                                        args: [
                                                            Var(
                                                                "f",
                                                            ),
                                                            Var(
                                                                "q",
                                                            ),
                                                            Var(
                                                                "w",
                                                            ),
                                                            Var(
                                                                "p",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Equal",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "BetweenSet",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "f",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "p",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            Var(
                                                                                "q",
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "u",
                                                        ),
                                                        Var(
                                                            "w",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "Empty",
                                                    args: [],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
]

[Printed]
type {:linear "Node"} X = int;

const null: int;

type lmap;

function {:linear "Node"} dom(lmap): [int]bool;

function map(lmap): [int]int;

function EmptyLmap(): (lmap);

axiom dom(EmptyLmap()) == MapConst(false);

function Add(x: lmap, i: int, v: int): (lmap);

axiom (forall x: lmap, i: int, v: int :: dom(Add(x, i, v)) == dom(x)[i := true] && map(Add(x, i, v)) == map(x)[i := v]);

function Remove(x: lmap, i: int): (lmap);

axiom (forall x: lmap, i: int :: dom(Remove(x, i)) == dom(x)[i := false] && map(Remove(x, i)) == map(x));

procedure {:right} {:layer 1} AtomicReadTopOfStack() returns (v: int) {
  assume v == null || dom(Stack)[v];
}

procedure {:yields} {:layer 0} {:refines "AtomicReadTopOfStack"} ReadTopOfStack() returns (v: int);

procedure {:right} {:layer 1} AtomicLoad(i: int) returns (v: int) {
  assert dom(Stack)[i];
  v := map(Stack)[i];
}

procedure {:yields} {:layer 0} {:refines "AtomicLoad"} Load(i: int) returns (v: int);

procedure {:both} {:layer 1} AtomicStore({:linear_in "Node"} l_in: lmap, i: int, v: int) returns ({:linear "Node"} l_out: lmap) {
  assert dom(l_in)[i];
  l_out := Add(l_in, i, v);
}

procedure {:yields} {:layer 0} {:refines "AtomicStore"} Store({:linear_in "Node"} l_in: lmap, i: int, v: int) returns ({:linear "Node"} l_out: lmap);

procedure {:atomic} {:layer 1} AtomicTransferToStack(oldVal: int, newVal: int, {:linear_in "Node"} l_in: lmap) returns (r: bool, {:linear "Node"} l_out: lmap)
  modifies TopOfStack, Stack;
{
  assert dom(l_in)[newVal];
  if (oldVal == TopOfStack) {
    TopOfStack := newVal;
    l_out := EmptyLmap();
    Stack := Add(Stack, newVal, map(l_in)[newVal]);
    r := true;
  } else {
    l_out := l_in;
    r := false;
  }
}

procedure {:yields} {:layer 0} {:refines "AtomicTransferToStack"} TransferToStack(oldVal: int, newVal: int, {:linear_in "Node"} l_in: lmap) returns (r: bool, {:linear "Node"} l_out: lmap);

procedure {:atomic} {:layer 1} AtomicTransferFromStack(oldVal: int, newVal: int) returns (r: bool)
  modifies TopOfStack, Stack;
{
  if (oldVal == TopOfStack) {
    TopOfStack := newVal;
    r := true;
  } else {
    r := false;
  }
}

procedure {:yields} {:layer 0} {:refines "AtomicTransferFromStack"} TransferFromStack(oldVal: int, newVal: int) returns (r: bool);

var {:layer 0, 2} TopOfStack: int;

var {:linear "Node"} {:layer 0, 2} Stack: lmap;

procedure {:yield_invariant} {:layer 1} YieldInv();
  requires BetweenSet(map(Stack), TopOfStack, null)[TopOfStack];
  requires Subset(BetweenSet(map(Stack), TopOfStack, null), Union(Singleton(null), dom(Stack)));

function {:inline} {:linear "Node"} NodeCollector(x: int): [int]bool {
  MapConst(false)[x := true]
}

function {:inline} {:linear "Node"} NodeSetCollector(x: [int]bool): [int]bool {
  x
}

procedure {:atomic} {:layer 2} atomic_push(x: int, {:linear_in "Node"} x_lmap: lmap)
  modifies Stack, TopOfStack;
{
  assert dom(x_lmap)[x];
  Stack := Add(Stack, x, TopOfStack);
  TopOfStack := x;
}

procedure {:yields} {:layer 1} {:refines "atomic_push"} {:yield_preserves "YieldInv"} push(x: int, {:linear_in "Node"} x_lmap: lmap)
  requires {:layer 1} dom(x_lmap)[x];
{
  var t: int;
  var g: bool;
  var {:linear "Node"} t_lmap: lmap;

  t_lmap := x_lmap;
  while (true)
    invariant {:yields} {:layer 1} {:yield_loop "YieldInv"} true;
    invariant {:layer 1} dom(t_lmap) == dom(x_lmap);
  {
    call t := ReadTopOfStack();
    call t_lmap := Store(t_lmap, x, t);
    call g, t_lmap := TransferToStack(t, x, t_lmap);
    if (g) {
      break;
    }
  }
}

procedure {:atomic} {:layer 2} atomic_pop() returns (t: int)
  modifies TopOfStack, Stack;
{
  assume TopOfStack != null;
  t := TopOfStack;
  TopOfStack := map(Stack)[t];
}

procedure {:yields} {:layer 1} {:refines "atomic_pop"} {:yield_preserves "YieldInv"} pop() returns (t: int) {
  var g: bool;
  var x: int;

  while (true)
    invariant {:yields} {:layer 1} {:yield_loop "YieldInv"} true;
  {
    call t := ReadTopOfStack();
    if (t != null) {
      call x := Load(t);
      call g := TransferFromStack(t, x);
      if (g) {
        break;
      }
    }
  }
}

function Equal([int]bool, [int]bool): bool;

function Subset([int]bool, [int]bool): bool;

function Empty(): [int]bool;

function Singleton(int): [int]bool;

function Union([int]bool, [int]bool): [int]bool;

axiom (forall x: int :: !Empty()[x]);

axiom (forall x: int, y: int :: {Singleton(y)[x]} Singleton(y)[x] <==> x == y);

axiom (forall y: int :: {Singleton(y)} Singleton(y)[y]);

axiom (forall x: int, S: [int]bool, T: [int]bool :: {Union(S, T)[x]} {Union(S, T), S[x]} {Union(S, T), T[x]} Union(S, T)[x] <==> S[x] || T[x]);

axiom (forall S: [int]bool, T: [int]bool :: {Equal(S, T)} Equal(S, T) <==> Subset(S, T) && Subset(T, S));

axiom (forall x: int, S: [int]bool, T: [int]bool :: {S[x], Subset(S, T)} {T[x], Subset(S, T)} S[x] && Subset(S, T) ==> T[x]);

axiom (forall S: [int]bool, T: [int]bool :: {Subset(S, T)} Subset(S, T) || (exists x: int :: S[x] && !T[x]));

function Between(f: [int]int, x: int, y: int, z: int): bool;

function Avoiding(f: [int]int, x: int, y: int, z: int): bool;

function BetweenSet(f: [int]int, x: int, z: int): [int]bool;

axiom (forall f: [int]int, x: int, y: int, z: int :: {BetweenSet(f, x, z)[y]} BetweenSet(f, x, z)[y] <==> Between(f, x, y, z));

axiom (forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, z), BetweenSet(f, x, z)} Between(f, x, y, z) ==> BetweenSet(f, x, z)[y]);

axiom (forall f: [int]int, x: int, z: int :: {BetweenSet(f, x, z)} Between(f, x, x, x));

axiom (forall f: [int]int, x: int, z: int :: {BetweenSet(f, x, z)} Between(f, z, z, z));

axiom (forall f: [int]int, x: int :: Between(f, x, x, x));

axiom (forall f: [int]int, x: int, y: int, z: int, w: int :: {Between(f, y, z, w), f[x]} Between(f, x, f[x], f[x]));

axiom (forall f: [int]int, x: int, y: int :: {f[x], Between(f, x, y, y)} Between(f, x, y, y) ==> x == y || Between(f, x, f[x], y));

axiom (forall f: [int]int, x: int, y: int :: {f[x], Between(f, x, y, y)} f[x] == x && Between(f, x, y, y) ==> x == y);

axiom (forall f: [int]int, x: int, y: int :: {Between(f, x, y, x)} Between(f, x, y, x) ==> x == y);

axiom (forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, y), Between(f, x, z, z)} Between(f, x, y, y) && Between(f, x, z, z) ==> Between(f, x, y, z) || Between(f, x, z, y));

axiom (forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, z)} Between(f, x, y, z) ==> Between(f, x, y, y) && Between(f, y, z, z));

axiom (forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, y), Between(f, y, z, z)} Between(f, x, y, y) && Between(f, y, z, z) ==> Between(f, x, z, z));

axiom (forall f: [int]int, x: int, y: int, z: int, w: int :: {Between(f, x, y, z), Between(f, y, w, z)} Between(f, x, y, z) && Between(f, y, w, z) ==> Between(f, x, y, w) && Between(f, x, w, z));

axiom (forall f: [int]int, x: int, y: int, z: int, w: int :: {Between(f, x, y, z), Between(f, x, w, y)} Between(f, x, y, z) && Between(f, x, w, y) ==> Between(f, x, w, z) && Between(f, w, y, z));

axiom (forall f: [int]int, u: int, x: int :: {Between(f, u, x, x)} Between(f, u, x, x) ==> Between(f, u, u, x));

axiom (forall f: [int]int, x: int, y: int, z: int :: {Avoiding(f, x, y, z)} Avoiding(f, x, y, z) <==> Between(f, x, y, z) || (Between(f, x, y, y) && !Between(f, x, z, z)));

axiom (forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, z)} Between(f, x, y, z) <==> Avoiding(f, x, y, z) && Avoiding(f, x, z, z));

axiom (forall f: [int]int, u: int, v: int, x: int, p: int, q: int :: {Avoiding(f[p := q], u, v, x)} Avoiding(f[p := q], u, v, x) <==> (Avoiding(f, u, v, p) && Avoiding(f, u, v, x)) || (Avoiding(f, u, p, x) && p != x && Avoiding(f, q, v, p) && Avoiding(f, q, v, x)));

axiom (forall f: [int]int, p: int, q: int, u: int, w: int :: {BetweenSet(f[p := q], u, w)} Avoiding(f, u, w, p) ==> Equal(BetweenSet(f[p := q], u, w), BetweenSet(f, u, w)));

axiom (forall f: [int]int, p: int, q: int, u: int, w: int :: {BetweenSet(f[p := q], u, w)} p != w && Avoiding(f, u, p, w) && Avoiding(f, q, w, p) ==> Equal(BetweenSet(f[p := q], u, w), Union(BetweenSet(f, u, p), BetweenSet(f, q, w))));

axiom (forall f: [int]int, p: int, q: int, u: int, w: int :: {BetweenSet(f[p := q], u, w)} Avoiding(f, u, w, p) || (p != w && Avoiding(f, u, p, w) && Avoiding(f, q, w, p)) || Equal(BetweenSet(f[p := q], u, w), Empty()));

[Input - ../../vendor/boogie/Test/civl/treiber-stack.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type {:linear "Node"} X = int;
const null: int;
type lmap;
function {:linear "Node"} dom(lmap): [int]bool;
function map(lmap): [int]int;

function EmptyLmap(): (lmap);
axiom (dom(EmptyLmap()) == MapConst(false));

function Add(x: lmap, i: int, v: int): (lmap);
axiom (forall x: lmap, i: int, v: int :: dom(Add(x, i, v)) == dom(x)[i:=true] && map(Add(x, i, v)) == map(x)[i := v]);

function Remove(x: lmap, i: int): (lmap);
axiom (forall x: lmap, i: int :: dom(Remove(x, i)) == dom(x)[i:=false] && map(Remove(x, i)) == map(x));

procedure {:right} {:layer 1} AtomicReadTopOfStack() returns (v:int)
{ assume v == null || dom(Stack)[v]; }
procedure {:yields} {:layer 0} {:refines "AtomicReadTopOfStack"} ReadTopOfStack() returns (v:int);

procedure {:right} {:layer 1} AtomicLoad(i:int) returns (v:int)
{
  assert dom(Stack)[i];
  v := map(Stack)[i];
}
procedure {:yields} {:layer 0} {:refines "AtomicLoad"} Load(i:int) returns (v:int);

procedure {:both} {:layer 1} AtomicStore({:linear_in "Node"} l_in:lmap, i:int, v:int) returns ({:linear "Node"} l_out:lmap)
{
  assert dom(l_in)[i];
  l_out := Add(l_in, i, v);
}
procedure {:yields} {:layer 0} {:refines "AtomicStore"} Store({:linear_in "Node"} l_in:lmap, i:int, v:int) returns ({:linear "Node"} l_out:lmap);

procedure {:atomic} {:layer 1} AtomicTransferToStack(oldVal: int, newVal: int, {:linear_in "Node"} l_in:lmap) returns (r: bool, {:linear "Node"} l_out:lmap)
modifies TopOfStack, Stack;
{
  assert dom(l_in)[newVal];
  if (oldVal == TopOfStack) {
    TopOfStack := newVal;
    l_out := EmptyLmap();
    Stack := Add(Stack, newVal, map(l_in)[newVal]);
    r := true;
  } else {
    l_out := l_in;
    r := false;
  }
}
procedure {:yields} {:layer 0} {:refines "AtomicTransferToStack"} TransferToStack(oldVal: int, newVal: int, {:linear_in "Node"} l_in:lmap) returns (r: bool, {:linear "Node"} l_out:lmap);

procedure {:atomic} {:layer 1} AtomicTransferFromStack(oldVal: int, newVal: int) returns (r: bool)
modifies TopOfStack, Stack;
{
  if (oldVal == TopOfStack) {
    TopOfStack := newVal;
    r := true;
  }
  else {
    r := false;
  }
}
procedure {:yields} {:layer 0} {:refines "AtomicTransferFromStack"} TransferFromStack(oldVal: int, newVal: int) returns (r: bool);

var {:layer 0,2} TopOfStack: int;
var {:linear "Node"} {:layer 0,2} Stack: lmap;

procedure {:yield_invariant} {:layer 1} YieldInv();
requires BetweenSet(map(Stack), TopOfStack, null)[TopOfStack];
requires Subset(BetweenSet(map(Stack), TopOfStack, null), Union(Singleton(null), dom(Stack)));

function {:inline} {:linear "Node"} NodeCollector(x: int) : [int]bool
{
  MapConst(false)[x := true]
}
function {:inline} {:linear "Node"} NodeSetCollector(x: [int]bool) : [int]bool
{
  x
}

procedure {:atomic} {:layer 2} atomic_push(x: int, {:linear_in "Node"} x_lmap: lmap)
modifies Stack, TopOfStack;
{ assert dom(x_lmap)[x]; Stack := Add(Stack, x, TopOfStack); TopOfStack := x; }

procedure {:yields} {:layer 1} {:refines "atomic_push"}
{:yield_preserves "YieldInv"}
push(x: int, {:linear_in "Node"} x_lmap: lmap)
requires {:layer 1} dom(x_lmap)[x];
{
  var t: int;
  var g: bool;
  var {:linear "Node"} t_lmap: lmap;

  t_lmap := x_lmap;
  while (true)
  invariant {:yields} {:layer 1} {:yield_loop "YieldInv"} true;
  invariant {:layer 1} dom(t_lmap) == dom(x_lmap);
  {
    call t := ReadTopOfStack();
    call t_lmap := Store(t_lmap, x, t);
    call g, t_lmap := TransferToStack(t, x, t_lmap);
    if (g) {
      break;
    }
  }
}

procedure {:atomic} {:layer 2} atomic_pop() returns (t: int)
modifies TopOfStack, Stack;
{ assume TopOfStack != null; t := TopOfStack; TopOfStack := map(Stack)[t]; }

procedure {:yields} {:layer 1} {:refines "atomic_pop"}
{:yield_preserves "YieldInv"}
pop() returns (t: int)
{
  var g: bool;
  var x: int;

  while (true)
  invariant {:yields} {:layer 1} {:yield_loop "YieldInv"} true;
  {
    call t := ReadTopOfStack();
    if (t != null) {
      call x := Load(t);
      call g := TransferFromStack(t, x);
      if (g) {
        break;
      }
    }
  }
}

function Equal([int]bool, [int]bool) returns (bool);
function Subset([int]bool, [int]bool) returns (bool);

function Empty() returns ([int]bool);
function Singleton(int) returns ([int]bool);
function Union([int]bool, [int]bool) returns ([int]bool);

axiom(forall x:int :: !Empty()[x]);

axiom(forall x:int, y:int :: {Singleton(y)[x]} Singleton(y)[x] <==> x == y);
axiom(forall y:int :: {Singleton(y)} Singleton(y)[y]);

axiom(forall x:int, S:[int]bool, T:[int]bool :: {Union(S,T)[x]}{Union(S,T),S[x]}{Union(S,T),T[x]} Union(S,T)[x] <==> S[x] || T[x]);

axiom(forall S:[int]bool, T:[int]bool :: {Equal(S,T)} Equal(S,T) <==> Subset(S,T) && Subset(T,S));
axiom(forall x:int, S:[int]bool, T:[int]bool :: {S[x],Subset(S,T)}{T[x],Subset(S,T)} S[x] && Subset(S,T) ==> T[x]);
axiom(forall S:[int]bool, T:[int]bool :: {Subset(S,T)} Subset(S,T) || (exists x:int :: S[x] && !T[x]));

////////////////////
// Between predicate
////////////////////
function Between(f: [int]int, x: int, y: int, z: int) returns (bool);
function Avoiding(f: [int]int, x: int, y: int, z: int) returns (bool);


//////////////////////////
// Between set constructor
//////////////////////////
function BetweenSet(f: [int]int, x: int, z: int) returns ([int]bool);

////////////////////////////////////////////////////
// axioms relating Between and BetweenSet
////////////////////////////////////////////////////
axiom(forall f: [int]int, x: int, y: int, z: int :: {BetweenSet(f, x, z)[y]} BetweenSet(f, x, z)[y] <==> Between(f, x, y, z));
axiom(forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, z), BetweenSet(f, x, z)} Between(f, x, y, z) ==> BetweenSet(f, x, z)[y]);
axiom(forall f: [int]int, x: int, z: int :: {BetweenSet(f, x, z)} Between(f, x, x, x));
axiom(forall f: [int]int, x: int, z: int :: {BetweenSet(f, x, z)} Between(f, z, z, z));


//////////////////////////
// Axioms for Between
//////////////////////////

// reflexive
axiom(forall f: [int]int, x: int :: Between(f, x, x, x));

// step
axiom(forall f: [int]int, x: int, y: int, z: int, w:int :: {Between(f, y, z, w), f[x]} Between(f, x, f[x], f[x]));

// reach
axiom(forall f: [int]int, x: int, y: int :: {f[x], Between(f, x, y, y)} Between(f, x, y, y) ==> x == y || Between(f, x, f[x], y));

// cycle
axiom(forall f: [int]int, x: int, y:int :: {f[x], Between(f, x, y, y)} f[x] == x && Between(f, x, y, y) ==> x == y);

// sandwich
axiom(forall f: [int]int, x: int, y: int :: {Between(f, x, y, x)} Between(f, x, y, x) ==> x == y);

// order1
axiom(forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, y), Between(f, x, z, z)} Between(f, x, y, y) && Between(f, x, z, z) ==> Between(f, x, y, z) || Between(f, x, z, y));

// order2
axiom(forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, z)} Between(f, x, y, z) ==> Between(f, x, y, y) && Between(f, y, z, z));

// transitive1
axiom(forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, y), Between(f, y, z, z)} Between(f, x, y, y) && Between(f, y, z, z) ==> Between(f, x, z, z));

// transitive2
axiom(forall f: [int]int, x: int, y: int, z: int, w: int :: {Between(f, x, y, z), Between(f, y, w, z)} Between(f, x, y, z) && Between(f, y, w, z) ==> Between(f, x, y, w) && Between(f, x, w, z));

// transitive3
axiom(forall f: [int]int, x: int, y: int, z: int, w: int :: {Between(f, x, y, z), Between(f, x, w, y)} Between(f, x, y, z) && Between(f, x, w, y) ==> Between(f, x, w, z) && Between(f, w, y, z));

// This axiom is required to deal with the incompleteness of the trigger for the reflexive axiom.
// It cannot be proved using the rest of the axioms.
axiom(forall f: [int]int, u:int, x: int :: {Between(f, u, x, x)} Between(f, u, x, x) ==> Between(f, u, u, x));

// relation between Avoiding and Between
axiom(forall f: [int]int, x: int, y: int, z: int :: {Avoiding(f, x, y, z)} Avoiding(f, x, y, z) <==> (Between(f, x, y, z) || (Between(f, x, y, y) && !Between(f, x, z, z))));
axiom(forall f: [int]int, x: int, y: int, z: int :: {Between(f, x, y, z)} Between(f, x, y, z) <==> (Avoiding(f, x, y, z) && Avoiding(f, x, z, z)));

// update
axiom(forall f: [int]int, u: int, v: int, x: int, p: int, q: int :: {Avoiding(f[p := q], u, v, x)} Avoiding(f[p := q], u, v, x) <==> ((Avoiding(f, u, v, p) && Avoiding(f, u, v, x)) || (Avoiding(f, u, p, x) && p != x && Avoiding(f, q, v, p) && Avoiding(f, q, v, x))));

axiom (forall f: [int]int, p: int, q: int, u: int, w: int :: {BetweenSet(f[p := q], u, w)} Avoiding(f, u, w, p) ==> Equal(BetweenSet(f[p := q], u, w), BetweenSet(f, u, w)));
axiom (forall f: [int]int, p: int, q: int, u: int, w: int :: {BetweenSet(f[p := q], u, w)} p != w && Avoiding(f, u, p, w) && Avoiding(f, q, w, p) ==> Equal(BetweenSet(f[p := q], u, w), Union(BetweenSet(f, u, p), BetweenSet(f, q, w))));
axiom (forall f: [int]int, p: int, q: int, u: int, w: int :: {BetweenSet(f[p := q], u, w)} Avoiding(f, u, w, p) || (p != w && Avoiding(f, u, p, w) && Avoiding(f, q, w, p)) || Equal(BetweenSet(f[p := q], u, w), Empty()));
