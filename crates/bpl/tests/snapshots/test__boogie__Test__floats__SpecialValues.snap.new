---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "foo",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "float24e8",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "d",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "float53e11",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NotANumber,
                                                sig_size: "24",
                                                exp_size: "8",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NotANumber,
                                                sig_size: "24",
                                                exp_size: "8",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "FEQ",
                                                    args: [
                                                        Var(
                                                            "r",
                                                        ),
                                                        Float(
                                                            Float {
                                                                value: NotANumber,
                                                                sig_size: "24",
                                                                exp_size: "8",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: PosInfinity,
                                                sig_size: "24",
                                                exp_size: "8",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NegInfinity,
                                                sig_size: "24",
                                                exp_size: "8",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: false,
                                                        whole: "1",
                                                        fract: "0",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "32",
                                                        },
                                                    },
                                                ),
                                                sig_size: "24",
                                                exp_size: "8",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: true,
                                                        whole: "1",
                                                        fract: "0",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "32",
                                                        },
                                                    },
                                                ),
                                                sig_size: "24",
                                                exp_size: "8",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: true,
                                                        whole: "5",
                                                        fract: "0",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "32",
                                                        },
                                                    },
                                                ),
                                                sig_size: "24",
                                                exp_size: "8",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NotANumber,
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NotANumber,
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "DEQ",
                                                    args: [
                                                        Var(
                                                            "d",
                                                        ),
                                                        Float(
                                                            Float {
                                                                value: NotANumber,
                                                                sig_size: "53",
                                                                exp_size: "11",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: PosInfinity,
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: NegInfinity,
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: false,
                                                        whole: "1",
                                                        fract: "0",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "256",
                                                        },
                                                    },
                                                ),
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: true,
                                                        whole: "1",
                                                        fract: "0",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "256",
                                                        },
                                                    },
                                                ),
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: true,
                                                        whole: "5",
                                                        fract: "0",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "256",
                                                        },
                                                    },
                                                ),
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Add,
                                                rhs: Var(
                                                    "zero53e11",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Nat(
                                                    "0",
                                                ),
                                                op: Sub,
                                                rhs: Var(
                                                    "zero53e11",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: false,
                                                        whole: "0",
                                                        fract: "0",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "0",
                                                        },
                                                    },
                                                ),
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "d",
                                            ),
                                            op: Eq,
                                            rhs: Float(
                                                Float {
                                                    value: Plain(
                                                        PlainFloatValue {
                                                            is_neg: false,
                                                            whole: "0",
                                                            fract: "0",
                                                            exp: Exp {
                                                                is_neg: false,
                                                                digits: "0",
                                                            },
                                                        },
                                                    ),
                                                    sig_size: "53",
                                                    exp_size: "11",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "d",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Float(
                                            Float {
                                                value: Plain(
                                                    PlainFloatValue {
                                                        is_neg: true,
                                                        whole: "0",
                                                        fract: "0",
                                                        exp: Exp {
                                                            is_neg: false,
                                                            digits: "0",
                                                        },
                                                    },
                                                ),
                                                sig_size: "53",
                                                exp_size: "11",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "d",
                                            ),
                                            op: Eq,
                                            rhs: Float(
                                                Float {
                                                    value: Plain(
                                                        PlainFloatValue {
                                                            is_neg: true,
                                                            whole: "0",
                                                            fract: "0",
                                                            exp: Exp {
                                                                is_neg: false,
                                                                digits: "0",
                                                            },
                                                        },
                                                    ),
                                                    sig_size: "53",
                                                    exp_size: "11",
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "DEQ",
                                            args: [
                                                Float(
                                                    Float {
                                                        value: Plain(
                                                            PlainFloatValue {
                                                                is_neg: false,
                                                                whole: "0",
                                                                fract: "0",
                                                                exp: Exp {
                                                                    is_neg: false,
                                                                    digits: "0",
                                                                },
                                                            },
                                                        ),
                                                        sig_size: "53",
                                                        exp_size: "11",
                                                    },
                                                ),
                                                Float(
                                                    Float {
                                                        value: Plain(
                                                            PlainFloatValue {
                                                                is_neg: true,
                                                                whole: "0",
                                                                fract: "0",
                                                                exp: Exp {
                                                                    is_neg: false,
                                                                    digits: "0",
                                                                },
                                                            },
                                                        ),
                                                        sig_size: "53",
                                                        exp_size: "11",
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Return(
                                ReturnCmd,
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "fp.eq",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "FEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float24e8",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "builtin",
                        params: [
                            String(
                                StringLit {
                                    text: "fp.eq",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "DEQ",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float53e11",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "float53e11",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
]

[Printed]
procedure foo() returns (r: float24e8) {
  var d: float53e11;

  r := 0NaN24e8;
  r := 0NaN24e8;
  assert !FEQ(r, 0NaN24e8);
  r := 0+oo24e8;
  r := 0-oo24e8;
  r := 0x1.0e32f24e8;
  r := -0x1.0e32f24e8;
  r := -0x5.0e32f24e8;
  d := 0NaN53e11;
  d := 0NaN53e11;
  assert !DEQ(d, 0NaN53e11);
  d := 0+oo53e11;
  d := 0-oo53e11;
  d := 0;
  d := 0x1.0e256f53e11;
  d := -0x1.0e256f53e11;
  d := -0x5.0e256f53e11;
  d := 0 + zero53e11;
  d := 0 - zero53e11;
  d := 0x0.0e0f53e11;
  assert d == 0x0.0e0f53e11;
  d := -0x0.0e0f53e11;
  assert d == -0x0.0e0f53e11;
  assert DEQ(0x0.0e0f53e11, -0x0.0e0f53e11);
  return;
}

function {:builtin "fp.eq"} FEQ(float24e8, float24e8): bool;

function {:builtin "fp.eq"} DEQ(float53e11, float53e11): bool;

[Input - ../../vendor/boogie/Test/floats/SpecialValues.bpl]
// RUN: %boogie -proverWarnings:1 "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
procedure foo() returns (r : float24e8) {
  var d : float53e11;

  r := 0NaN24e8;
  r := 0nan24e8;
  assert !FEQ(r,0NaN24e8);  //NaN != NaN
  r := 0+oo24e8;
  r := 0-oo24e8;
  r := 0x1.0e32f24e8; //Error: this is a synonym for +oo, which is disallowed
  r := -0x1.0e32f24e8; //Error: this is a synonym for -oo, which is disallowed
  r := -0x5.0e32f24e8; //Error: NaN values are disallowed

  d := 0NaN53e11;
  d := 0nan53e11;
  assert !DEQ(d,0NaN53e11);
  d := 0+oo53e11;
  d := 0-oo53e11;
  d := 0;
  d := 0x1.0e256f53e11;
  d := -0x1.0e256f53e11;
  d := -0x5.0e256f53e11;

  d := 0+zero53e11; //Error: there are no longer special values for +zero and -zero
  d := 0-zero53e11;

  d := 0x0.0e0f53e11;
  assert d == 0x0.0e0f53e11;
  d := -0x0.0e0f53e11;
  assert d == -0x0.0e0f53e11;
  assert(DEQ(0x0.0e0f53e11, -0x0.0e0f53e11));

  return;
}

function {:builtin "fp.eq"} FEQ(float24e8,float24e8) returns (bool);
function {:builtin "fp.eq"} DEQ(float53e11,float53e11) returns (bool);
