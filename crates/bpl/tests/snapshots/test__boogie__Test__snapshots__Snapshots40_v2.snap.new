---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "checksum",
                            params: [
                                String(
                                    StringLit {
                                        text: "-1",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Foo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "id",
                            params: [
                                String(
                                    StringLit {
                                        text: "Foo",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "checksum",
                            params: [
                                String(
                                    StringLit {
                                        text: "2",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Foo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "r",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Var(
                                    "b",
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "r",
                                    ],
                                    target: "Sum",
                                    params: [
                                        Nat(
                                            "42",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "r",
                                        ),
                                        op: Neq,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "r",
                                        ),
                                        op: Eq,
                                        rhs: Factor(
                                            Factor {
                                                lhs: Factor(
                                                    Factor {
                                                        lhs: Nat(
                                                            "42",
                                                        ),
                                                        op: Mul,
                                                        rhs: Nat(
                                                            "43",
                                                        ),
                                                    },
                                                ),
                                                op: Div,
                                                rhs: Nat(
                                                    "2",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "checksum",
                            params: [
                                String(
                                    StringLit {
                                        text: "3",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Sum",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "r",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "0",
                                ),
                                op: Le,
                                rhs: Var(
                                    "n",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "r",
                                ),
                                op: Eq,
                                rhs: Factor(
                                    Factor {
                                        lhs: Factor(
                                            Factor {
                                                lhs: Var(
                                                    "n",
                                                ),
                                                op: Mul,
                                                rhs: Term(
                                                    Term {
                                                        lhs: Var(
                                                            "n",
                                                        ),
                                                        op: Add,
                                                        rhs: Nat(
                                                            "1",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Div,
                                        rhs: Nat(
                                            "2",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
]

[Printed]
procedure {:checksum "-1"} Foo(b: bool);

implementation {:id "Foo"} {:checksum "2"} Foo(b: bool) {
  var r: int;

  assert b;
  call r := Sum(42);
  assert r != 0;
  assert r == 42 * 43 div 2;
}

procedure {:checksum "3"} Sum(n: int) returns (r: int);
  requires 0 <= n;
  ensures r == n * (n + 1) div 2;

[Input - ../../vendor/boogie/Test/snapshots/Snapshots40.v2.bpl]
procedure {:checksum "-1"} Foo(b: bool);

implementation {:id "Foo"} {:checksum "2"} Foo(b: bool)
{
    var r: int;

    assert b;
    call r := Sum(42);
    assert r != 0;
    assert r == (42 * 43) div 2;
}

procedure {:checksum "3"} Sum(n: int) returns (r: int);
  requires 0 <= n;
  ensures r == (n * (n + 1)) div 2;
