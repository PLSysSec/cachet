---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Abs",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "y",
                                ),
                                op: Ge,
                                rhs: Nat(
                                    "0",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(3,0): initial state",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "LabelA",
                                        "LabelB",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "LabelA",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(5,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "Done",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "LabelB",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(5,2): else branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "LabelC",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "LabelC",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(6,2): y is x",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "2",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "3",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(8,2): y is 5 more than x",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(9,2): no change to y",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "y",
                                                ),
                                                op: Sub,
                                                rhs: Nat(
                                                    "5",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "Done",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Done",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfy(10,0): done",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "BadCall",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(100,0): initial state",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "r",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "0",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "LabelA",
                                        "LabelB",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "LabelA",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(101,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "50",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "Done",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "LabelB",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(102,2): else branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "r",
                                        ],
                                        target: "Callee",
                                        params: [
                                            Var(
                                                "y",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "200",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(103,2): shortly after call",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "Done",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "Done",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfy(110,0): done",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Callee",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ret",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Lt,
                                rhs: Nat(
                                    "20",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "BadAssert",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "x",
                                ),
                                op: Le,
                                rhs: Nat(
                                    "10",
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(200,0): initial state",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        TransferCmd(
                            Goto(
                                GotoCmd {
                                    labels: [
                                        "LabelA",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Label(
                                Label {
                                    ident: "LabelA",
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(201,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "1000",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(202,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "100",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(203,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "20",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(204,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "8",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(205,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "12",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(206,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "9",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "captureState",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "structure.dfyl(207,2): then branch",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: BoolLit(
                                        true,
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "y",
                                            ),
                                            op: Lt,
                                            rhs: Nat(
                                                "4",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure Abs(x: int) returns (y: int)
  ensures y >= 0;
{
  assume {:captureState "structure.dfyl(3,0): initial state"} true;
  goto LabelA, LabelB;
  LabelA:
  assume {:captureState "structure.dfyl(5,2): then branch"} true;
  assume 0 <= x;
  y := x;
  goto Done;
  LabelB:
  assume {:captureState "structure.dfyl(5,2): else branch"} true;
  assume x < 0;
  y := x;
  goto LabelC;
  LabelC:
  assume {:captureState "structure.dfyl(6,2): y is x"} true;
  y := y + 2;
  y := y + 3;
  assume {:captureState "structure.dfyl(8,2): y is 5 more than x"} true;
  assume {:captureState "structure.dfyl(9,2): no change to y"} true;
  y := y - 5;
  goto Done;
  Done:
  assume {:captureState "structure.dfy(10,0): done"} true;
}

procedure BadCall(x: int) returns (y: int) {
  var r: int;

  assume {:captureState "structure.dfyl(100,0): initial state"} true;
  r := 0;
  goto LabelA, LabelB;
  LabelA:
  assume {:captureState "structure.dfyl(101,2): then branch"} true;
  assume x < 50;
  goto Done;
  LabelB:
  assume {:captureState "structure.dfyl(102,2): else branch"} true;
  assume 0 <= x;
  y := x;
  call r := Callee(y);
  y := 200;
  assume {:captureState "structure.dfyl(103,2): shortly after call"} true;
  goto Done;
  Done:
  assume {:captureState "structure.dfy(110,0): done"} true;
}

procedure Callee(x: int) returns (ret: int);
  requires x < 20;

procedure BadAssert(x: int) returns (y: int)
  requires x <= 10;
{
  assume {:captureState "structure.dfyl(200,0): initial state"} true;
  y := x;
  goto LabelA;
  LabelA:
  assume {:captureState "structure.dfyl(201,2): then branch"} true;
  assert y < 1000;
  assume {:captureState "structure.dfyl(202,2): then branch"} true;
  assert y < 100;
  assume {:captureState "structure.dfyl(203,2): then branch"} true;
  assert y < 20;
  assume {:captureState "structure.dfyl(204,2): then branch"} true;
  assert y < 8;
  assume {:captureState "structure.dfyl(205,2): then branch"} true;
  assert y < 12;
  assume {:captureState "structure.dfyl(206,2): then branch"} true;
  assert y < 9;
  assume {:captureState "structure.dfyl(207,2): then branch"} true;
  assert y < 4;
}

[Input - ../../vendor/boogie/Test/test15/MoreCapturedStates.bpl]
// RUN: %boogie "%s" -mv:"%t".model > "%t"
// RUN: grep STATE "%t".model >> "%t"
// RUN: %diff "%s.expect" "%t"

procedure Abs(x: int) returns (y: int)
  ensures y >= 0;
{
  assume {:captureState "structure.dfyl(3,0): initial state"} true;  // SHOWS IN MODEL
  goto LabelA, LabelB;

  LabelA:
  assume {:captureState "structure.dfyl(5,2): then branch"} true;
  assume 0 <= x;
  y := x;
  goto Done;

  LabelB:
  assume {:captureState "structure.dfyl(5,2): else branch"} true;  // SHOWS IN MODEL
  assume x < 0;
  y := x;  // error: should be -x
  goto LabelC;

  LabelC:
  assume {:captureState "structure.dfyl(6,2): y is x"} true;  // SHOWS IN MODEL
  y := y + 2;
  y := y + 3;
  assume {:captureState "structure.dfyl(8,2): y is 5 more than x"} true;  // SHOWS IN MODEL
  assume {:captureState "structure.dfyl(9,2): no change to y"} true;  // SHOWS IN MODEL
  y := y - 5;
  goto Done;

  Done:
  assume {:captureState "structure.dfy(10,0): done"} true;  // SHOWS IN MODEL
}

procedure BadCall(x: int) returns (y: int)
{
  var r: int;

  assume {:captureState "structure.dfyl(100,0): initial state"} true;  // SHOWS IN MODEL
  r := 0;
  goto LabelA, LabelB;

  LabelA:
  assume {:captureState "structure.dfyl(101,2): then branch"} true;
  assume x < 50;
  goto Done;

  LabelB:
  assume {:captureState "structure.dfyl(102,2): else branch"} true;  // SHOWS IN MODEL
  assume 0 <= x;
  y := x;
  call r := Callee(y);  // error
  y := 200;
  assume {:captureState "structure.dfyl(103,2): shortly after call"} true;
  goto Done;

  Done:
  assume {:captureState "structure.dfy(110,0): done"} true;
}
procedure Callee(x: int) returns (ret: int);
  requires x < 20;

procedure BadAssert(x: int) returns (y: int)
  requires x <= 10;
{
  assume {:captureState "structure.dfyl(200,0): initial state"} true;  // SHOWS IN MODEL for both errors
  y := x;
  goto LabelA;

  LabelA:
  assume {:captureState "structure.dfyl(201,2): then branch"} true;  // SHOWS IN MODEL for both errors
  assert y < 1000;
  assume {:captureState "structure.dfyl(202,2): then branch"} true;  // SHOWS IN MODEL for both errors
  assert y < 100;
  assume {:captureState "structure.dfyl(203,2): then branch"} true;  // SHOWS IN MODEL for both errors
  assert y < 20;
  assume {:captureState "structure.dfyl(204,2): then branch"} true;  // SHOWS IN MODEL for both errors
  assert y < 8;
  assume {:captureState "structure.dfyl(205,2): then branch"} true;  // SHOWS IN MODEL for second error
  assert y < 12;
  assume {:captureState "structure.dfyl(206,2): then branch"} true;  // SHOWS IN MODEL for second error
  assert y < 9;
  assume {:captureState "structure.dfyl(207,2): then branch"} true;  // SHOWS IN MODEL for second error
  assert y < 4;
}
