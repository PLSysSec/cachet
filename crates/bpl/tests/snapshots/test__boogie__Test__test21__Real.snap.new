---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: Atom(
                                            Real,
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [],
                        expr: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "r",
                                        ),
                                        op: Eq,
                                        rhs: Dec(
                                            Dec {
                                                whole: "0",
                                                fract: Some(
                                                    "0",
                                                ),
                                                exp: None,
                                            },
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Factor(
                                            Factor {
                                                lhs: Var(
                                                    "r",
                                                ),
                                                op: RealDiv,
                                                rhs: Var(
                                                    "r",
                                                ),
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Dec(
                                            Dec {
                                                whole: "1",
                                                fract: Some(
                                                    "0",
                                                ),
                                                exp: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "P",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "a",
                                ],
                                type_: Atom(
                                    Real,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Real,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "a",
                                                            ),
                                                            op: Ge,
                                                            rhs: Var(
                                                                "b",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "a",
                                                            ),
                                                            op: Neq,
                                                            rhs: Dec(
                                                                Dec {
                                                                    whole: "0",
                                                                    fract: Some(
                                                                        "0",
                                                                    ),
                                                                    exp: None,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "a",
                                                    ),
                                                    op: Ge,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "1",
                                                            fract: Some(
                                                                "3579",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Term(
                                                Term {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Dec(
                                                                Dec {
                                                                    whole: "2",
                                                                    fract: None,
                                                                    exp: Some(
                                                                        Exp {
                                                                            is_neg: false,
                                                                            digits: "0",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Mul,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "a",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Dec(
                                                                        Dec {
                                                                            whole: "3",
                                                                            fract: Some(
                                                                                "0",
                                                                            ),
                                                                            exp: None,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Sub,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "0",
                                                            fract: Some(
                                                                "5",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Term(
                                                Term {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Dec(
                                                                Dec {
                                                                    whole: "2",
                                                                    fract: None,
                                                                    exp: Some(
                                                                        Exp {
                                                                            is_neg: false,
                                                                            digits: "0",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Mul,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "a",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Dec(
                                                                        Dec {
                                                                            whole: "3",
                                                                            fract: Some(
                                                                                "0",
                                                                            ),
                                                                            exp: None,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Sub,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "0",
                                                            fract: Some(
                                                                "5",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Gt,
                                            rhs: Var(
                                                "b",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "b",
                                            ),
                                            op: Le,
                                            rhs: Term(
                                                Term {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Dec(
                                                                Dec {
                                                                    whole: "2",
                                                                    fract: None,
                                                                    exp: Some(
                                                                        Exp {
                                                                            is_neg: false,
                                                                            digits: "0",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Mul,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "a",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Dec(
                                                                        Dec {
                                                                            whole: "3",
                                                                            fract: Some(
                                                                                "0",
                                                                            ),
                                                                            exp: None,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Sub,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "0",
                                                            fract: Some(
                                                                "5",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "b",
                                            ),
                                            op: Lt,
                                            rhs: Term(
                                                Term {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Dec(
                                                                Dec {
                                                                    whole: "2",
                                                                    fract: None,
                                                                    exp: Some(
                                                                        Exp {
                                                                            is_neg: false,
                                                                            digits: "0",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Mul,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "a",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Dec(
                                                                        Dec {
                                                                            whole: "3",
                                                                            fract: Some(
                                                                                "0",
                                                                            ),
                                                                            exp: None,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Sub,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "0",
                                                            fract: Some(
                                                                "5",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Factor(
                                                Factor {
                                                    lhs: Nat(
                                                        "1",
                                                    ),
                                                    op: RealDiv,
                                                    rhs: Nat(
                                                        "2",
                                                    ),
                                                },
                                            ),
                                            op: Le,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: Some(
                                                        "65",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "a",
                                                    ),
                                                    op: Gt,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "100",
                                                            fract: None,
                                                            exp: Some(
                                                                Exp {
                                                                    is_neg: true,
                                                                    digits: "2",
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Nat(
                                                                "1",
                                                            ),
                                                            op: RealDiv,
                                                            rhs: Var(
                                                                "a",
                                                            ),
                                                        },
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "a",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Var(
                                                                "a",
                                                            ),
                                                            op: RealDiv,
                                                            rhs: Nat(
                                                                "2",
                                                            ),
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: Var(
                                                        "a",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "a",
                                                    ),
                                                    op: Eq,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "0",
                                                            fract: Some(
                                                                "00",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "a",
                                                    ),
                                                    op: Neq,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "0",
                                                            fract: Some(
                                                                "0",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: Var(
                                                                "a",
                                                            ),
                                                            op: RealDiv,
                                                            rhs: Var(
                                                                "a",
                                                            ),
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Dec(
                                                        Dec {
                                                            whole: "1",
                                                            fract: Some(
                                                                "0",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Implies(
                                        ImpliesExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: ArithCoercion(
                                                        ArithCoercionExpr {
                                                            kind: Int,
                                                            expr: Var(
                                                                "a",
                                                            ),
                                                        },
                                                    ),
                                                    op: Ge,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Factor(
                                                        Factor {
                                                            lhs: ArithCoercion(
                                                                ArithCoercionExpr {
                                                                    kind: Real,
                                                                    expr: Nat(
                                                                        "3",
                                                                    ),
                                                                },
                                                            ),
                                                            op: Mul,
                                                            rhs: Var(
                                                                "a",
                                                            ),
                                                        },
                                                    ),
                                                    op: Gt,
                                                    rhs: Var(
                                                        "a",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "ManyDigitReals",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "x",
                                        ],
                                        type_: Atom(
                                            Real,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "y",
                                        ],
                                        type_: Atom(
                                            Real,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "x",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Dec(
                                            Dec {
                                                whole: "15",
                                                fract: None,
                                                exp: Some(
                                                    Exp {
                                                        is_neg: true,
                                                        digits: "1",
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        ArithCoercion(
                                            ArithCoercionExpr {
                                                kind: Real,
                                                expr: Nat(
                                                    "3",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "x",
                                                            ),
                                                            op: Eq,
                                                            rhs: Factor(
                                                                Factor {
                                                                    lhs: Var(
                                                                        "y",
                                                                    ),
                                                                    op: RealDiv,
                                                                    rhs: Dec(
                                                                        Dec {
                                                                            whole: "2000000000000000000000000001",
                                                                            fract: None,
                                                                            exp: Some(
                                                                                Exp {
                                                                                    is_neg: true,
                                                                                    digits: "27",
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assert,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "x",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Factor(
                                                                        Factor {
                                                                            lhs: Var(
                                                                                "y",
                                                                            ),
                                                                            op: RealDiv,
                                                                            rhs: Dec(
                                                                                Dec {
                                                                                    whole: "2000000000000000000000000000",
                                                                                    fract: None,
                                                                                    exp: Some(
                                                                                        Exp {
                                                                                            is_neg: true,
                                                                                            digits: "27",
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Rounding",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: ArithCoercion(
                                                ArithCoercionExpr {
                                                    kind: Real,
                                                    expr: Nat(
                                                        "3",
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "3",
                                                    fract: Some(
                                                        "0",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: ArithCoercion(
                                                ArithCoercionExpr {
                                                    kind: Int,
                                                    expr: Dec(
                                                        Dec {
                                                            whole: "2",
                                                            fract: Some(
                                                                "2",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: ArithCoercion(
                                                ArithCoercionExpr {
                                                    kind: Int,
                                                    expr: Dec(
                                                        Dec {
                                                            whole: "2",
                                                            fract: Some(
                                                                "8",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: ArithCoercion(
                                                ArithCoercionExpr {
                                                    kind: Int,
                                                    expr: Dec(
                                                        Dec {
                                                            whole: "2",
                                                            fract: Some(
                                                                "2",
                                                            ),
                                                            exp: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "2",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: ArithCoercion(
                                                ArithCoercionExpr {
                                                    kind: Int,
                                                    expr: Neg(
                                                        NegExpr {
                                                            op: Arith,
                                                            expr: Dec(
                                                                Dec {
                                                                    whole: "2",
                                                                    fract: Some(
                                                                        "2",
                                                                    ),
                                                                    exp: None,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: ArithCoercion(
                                                ArithCoercionExpr {
                                                    kind: Int,
                                                    expr: Neg(
                                                        NegExpr {
                                                            op: Arith,
                                                            expr: Dec(
                                                                Dec {
                                                                    whole: "2",
                                                                    fract: Some(
                                                                        "8",
                                                                    ),
                                                                    exp: None,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: ArithCoercion(
                                                                ArithCoercionExpr {
                                                                    kind: Int,
                                                                    expr: Neg(
                                                                        NegExpr {
                                                                            op: Arith,
                                                                            expr: Dec(
                                                                                Dec {
                                                                                    whole: "2",
                                                                                    fract: Some(
                                                                                        "2",
                                                                                    ),
                                                                                    exp: None,
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Arith,
                                                                    expr: Nat(
                                                                        "3",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Claim(
                                                        ClaimCmd {
                                                            kind: Assert,
                                                            attrs: [],
                                                            proposition: Rel(
                                                                RelExpr {
                                                                    lhs: ArithCoercion(
                                                                        ArithCoercionExpr {
                                                                            kind: Int,
                                                                            expr: Neg(
                                                                                NegExpr {
                                                                                    op: Arith,
                                                                                    expr: Dec(
                                                                                        Dec {
                                                                                            whole: "2",
                                                                                            fract: Some(
                                                                                                "2",
                                                                                            ),
                                                                                            exp: None,
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Neg(
                                                                        NegExpr {
                                                                            op: Arith,
                                                                            expr: Nat(
                                                                                "2",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "VariousCornerCaseBigDecPrintingTests",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "200",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "2",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "2",
                                                    fract: Some(
                                                        "0",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "000",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "2",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: Some(
                                                        "0",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "000",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "1",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: Some(
                                                        "0",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "000",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "4",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: Some(
                                                        "0",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "000",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: false,
                                                            digits: "0",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: Some(
                                                        "0",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "300",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: Some(
                                                        "0",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "12300",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "4",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "1",
                                                    fract: Some(
                                                        "230",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "12300",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "5",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: Some(
                                                        "123",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "12300",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "8",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "000",
                                                    fract: Some(
                                                        "000123",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "1",
                                                    fract: Some(
                                                        "9850404",
                                                    ),
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: false,
                                                            digits: "5",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "198504",
                                                    fract: Some(
                                                        "04",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "19850404",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "4",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "1985",
                                                    fract: Some(
                                                        "0404",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "19850404",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: true,
                                                            digits: "12",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "0",
                                                    fract: Some(
                                                        "00001985040400000",
                                                    ),
                                                    exp: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Dec(
                                                Dec {
                                                    whole: "19850404",
                                                    fract: None,
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: false,
                                                            digits: "0000000000000000",
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Dec(
                                                Dec {
                                                    whole: "1985",
                                                    fract: Some(
                                                        "0404",
                                                    ),
                                                    exp: Some(
                                                        Exp {
                                                            is_neg: false,
                                                            digits: "4",
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
axiom (forall r: real :: r == 0.0 || r / r == 1.0);

procedure P(a: real, b: real) {
  assume a >= b && a != 0.0 && a >= 1.3579;
  assert 2e0 * (a + 3.0) - 0.5 >= b;
  assert 2e0 * (a + 3.0) - 0.5 > b;
  assert b <= 2e0 * (a + 3.0) - 0.5;
  assert b < 2e0 * (a + 3.0) - 0.5;
  assert 1 / 2 <= 0.65;
  assert a > 100e-2 ==> 1 / a <= a;
  assert a / 2 != a || a == 0.00;
  assert a != 0.0 ==> a / a == 1.0;
  assert int(a) >= 0 ==> real(3) * a > a;
}

procedure ManyDigitReals() {
  var x: real;
  var y: real;

  x := 15e-1;
  y := real(3);
  if (*) {
    assert x == y / 2000000000000000000000000001e-27;
  } else {
    assert x == y / 2000000000000000000000000000e-27;
  }
}

procedure Rounding() {
  assert real(3) == 3.0;
  assert int(2.2) == int(2.8);
  assert int(2.2) == 2;
  assert int(-2.2) == int(-2.8);
  if (*) {
    assert int(-2.2) == -3;
  } else {
    assert int(-2.2) == -2;
  }
}

procedure VariousCornerCaseBigDecPrintingTests() {
  assert 200e-2 == 2.0;
  assert 000e-2 == 0.0;
  assert 000e-1 == 0.0;
  assert 000e-4 == 0.0;
  assert 000e0 == 0.0;
  assert 0e-300 == 0.0;
  assert 12300e-4 == 1.230;
  assert 12300e-5 == 0.123;
  assert 12300e-8 == 000.000123;
  assert 1.9850404e5 == 198504.04;
  assert 19850404e-4 == 1985.0404;
  assert 19850404e-12 == 0.00001985040400000;
  assert 19850404e0000000000000000 == 1985.0404e4;
}

[Input - ../../vendor/boogie/Test/test21/Real.bpl]
// RUN: %boogie -typeEncoding:p -logPrefix:0p "%s" > "%t"
// RUN: %diff "%s.p.expect" "%t"
// RUN: %boogie -typeEncoding:a -logPrefix:0a "%s" > "%t"
// RUN: %diff "%s.a.expect" "%t"
axiom (forall r: real :: r == 0.0 || r / r == 1.0);

procedure P(a: real, b: real) returns () {
  assume a >= b && a != 0.0 && a >= 1.3579;

  assert 2e0 * (a + 3.0) - 0.5 >= b;
  assert 2e0 * (a + 3.0) - 0.5 > b;
  assert b <= 2e0 * (a + 3.0) - 0.5;
  assert b < 2e0 * (a + 3.0) - 0.5;

  assert 1/2 <= 0.65;
  assert a > 100e-2 ==> 1 / a <= a;
  assert a / 2 != a || a == 0.00;
  assert a != 0.0 ==> a / a == 1.0;

  assert int(a) >= 0 ==> real(3) * a > a;
}

procedure ManyDigitReals()
{
  var x: real;
  var y: real;
  x := 15e-1;
  y := real(3);
  if (*) {
    assert x == y / 2000000000000000000000000001e-27;  // error
  } else {
    assert x == y / 2000000000000000000000000000e-27;
  }
}

procedure Rounding()
{
  assert real(3) == 3.0;
  assert int(2.2) == int(2.8);
  assert int(2.2) == 2;
  assert int(-2.2) == int(-2.8);
  if (*) {
    assert int(-2.2) == -3;
  } else {
    assert int(-2.2) == -2;  // error: int truncates downward
  }
}

procedure VariousCornerCaseBigDecPrintingTests()
{
  assert 200e-2 == 2.0;
  assert 000e-2 == 0.0;
  assert 000e-1 == 0.0;
  assert 000e-4 == 0.0;
  assert 000e0 == 0.0;
  assert 0e-300 == 0.0;
  assert 12300e-4 == 1.230;
  assert 12300e-5 == 0.123;
  assert 12300e-8 == 000.000123;
  assert 1.9850404e5 == 198504.04;
  assert 19850404e-4 == 1985.0404;
  assert 19850404e-12 == 0.00001985040400000;
  assert 19850404e0000000000000000 == 1985.0404e4;
}
