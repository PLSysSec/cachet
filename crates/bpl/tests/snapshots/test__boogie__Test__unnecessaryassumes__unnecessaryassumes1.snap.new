---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test0",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "id",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "s0",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test1",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "id",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "s1",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "n",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "3",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "test2",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "0",
                                            ),
                                            op: Lt,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "id",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "s2",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "n",
                                            ),
                                            op: Le,
                                            rhs: Nat(
                                                "42",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "id",
                                                params: [
                                                    String(
                                                        StringLit {
                                                            text: "s3",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Nat(
                                                "42",
                                            ),
                                            op: Le,
                                            rhs: Var(
                                                "n",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "n",
                                            ),
                                            op: Eq,
                                            rhs: Nat(
                                                "42",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
]

[Printed]
procedure test0(n: int) {
  assume {:id "s0"} 0 < n;
  assert 0 <= n;
}

procedure test1(n: int) {
  assume 0 < n;
  assume {:id "s1"} n == 3;
  assert 0 <= n;
}

procedure test2(n: int) {
  assume 0 < n;
  assume {:id "s2"} n <= 42;
  assume {:id "s3"} 42 <= n;
  assert n == 42;
}

[Input - ../../vendor/boogie/Test/unnecessaryassumes/unnecessaryassumes1.bpl]
// RUN: %boogie /printNecessaryAssumes "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

procedure test0(n: int)
{
    assume {:id "s0"} 0 < n;
    assert 0 <= n;  // verified under s0
}

procedure test1(n: int)
{
    assume 0 < n;
    assume {:id "s1"} n == 3;
    assert 0 <= n;  // verified under true
}

procedure test2(n: int)
{
    assume 0 < n;
    assume {:id "s2"} n <= 42;
    assume {:id "s3"} 42 <= n;
    assert n == 42;  // verified under s2 and s3
}
