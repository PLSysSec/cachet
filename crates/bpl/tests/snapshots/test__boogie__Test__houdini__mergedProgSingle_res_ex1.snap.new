---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "_v2.control_flag",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "_v2.control_UIF",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_0",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "arg_1",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "_v2.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "_v2.control_flag",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "_v2.Eval_loop_anon3_LoopHead",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "in_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "in_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "out_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "out_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "_v2.control_flag",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "out_result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "out_x",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "out_result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "out_x",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "_v2.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "x.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopHead",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopHead",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "result",
                                        "x",
                                    ],
                                    target: "_v2.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "result",
                                        ),
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopHead_last",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopHead_last",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopDone",
                                    "anon3_LoopBody",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopBody",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v2.control_flag",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "result",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "result",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopBody_dummy",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopBody_dummy",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    false,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopDone",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v2.control_flag",
                                                ),
                                                Nat(
                                                    "2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "_v2.Eval_loop_anon3_LoopHead",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "in_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "in_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "out_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "out_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "out_result",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "in_result",
                                    ),
                                    Var(
                                        "in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopHead",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopHead",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopDone",
                                    "anon3_LoopBody",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopBody",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "out_x",
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v2.control_flag",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "out_result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "out_result",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "out_x",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "out_result",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "out_x",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopBody_dummy",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopBody_dummy",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "out_result",
                                        "out_x",
                                    ],
                                    target: "_v2.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "out_result",
                                        ),
                                        Var(
                                            "out_x",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopDone",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "out_x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "out_result",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "in_result",
                                    ),
                                    Var(
                                        "in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Old(
                                        OldExpr {
                                            expr: Var(
                                                "_v2.control_flag",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "_v1.control_flag",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "_v1.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "_v1.control_flag",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "_v1.Eval_loop_anon3_LoopHead",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "in_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "in_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "out_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "out_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "_v1.control_flag",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "out_result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "out_x",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "control_flag",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "out_result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_result",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "io_dependency",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "out_x",
                                            },
                                        ),
                                        String(
                                            StringLit {
                                                text: "in_x",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: BoolLit(
                            true,
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "_v1.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x.1",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon0",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "x.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopHead",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopHead",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "result",
                                        "x",
                                    ],
                                    target: "_v1.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "result",
                                        ),
                                        Var(
                                            "x",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopHead_last",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopHead_last",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopDone",
                                    "anon3_LoopBody",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopBody",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "x",
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v1.control_flag",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "result",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "x",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "x",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopBody_dummy",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopBody_dummy",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    false,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopDone",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v1.control_flag",
                                                ),
                                                Nat(
                                                    "2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "_v1.Eval_loop_anon3_LoopHead",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "in_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "in_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "out_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "out_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "out_result",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "in_result",
                                    ),
                                    Var(
                                        "in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopHead",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopHead",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopDone",
                                    "anon3_LoopBody",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopBody",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "out_x",
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v1.control_flag",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "out_result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "out_result",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "out_x",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "out_x",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "anon3_LoopBody_dummy",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopBody_dummy",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "out_result",
                                        "out_x",
                                    ],
                                    target: "_v1.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "out_result",
                                        ),
                                        Var(
                                            "out_x",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "anon3_LoopDone",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "out_x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "out_result",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "in_result",
                                    ),
                                    Var(
                                        "in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Old(
                                        OldExpr {
                                            expr: Var(
                                                "_v1.control_flag",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "MS$_v1.Eval$_v2.Eval",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.control_flag_old",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.control_flag_",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.result",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.control_flag_old",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.control_flag_",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.result",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                BoolLit(
                    true,
                ),
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "_houdini_Eval_control_flag_0",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "_houdini_Eval_result_1",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "MS_Check__v1.Eval___v2.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "_v1.control_flag",
                            "_v2.control_flag",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "MS$_v1.Eval$_v2.Eval",
                                args: [
                                    Var(
                                        "_v1.x",
                                    ),
                                    Old(
                                        OldExpr {
                                            expr: Var(
                                                "_v1.control_flag",
                                            ),
                                        },
                                    ),
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                    Var(
                                        "_v1.result",
                                    ),
                                    Var(
                                        "_v2.x",
                                    ),
                                    Old(
                                        OldExpr {
                                            expr: Var(
                                                "_v2.control_flag",
                                            ),
                                        },
                                    ),
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                    Var(
                                        "_v2.result",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "_houdini_Eval_control_flag_0",
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Old(
                                            OldExpr {
                                                expr: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.control_flag",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "_v2.control_flag",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.x",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "_v2.x",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "_v1.control_flag",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "_v2.control_flag",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "_houdini_Eval_result_1",
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Old(
                                            OldExpr {
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "_v1.x",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "_v2.x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "_v1.result",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "_v2.result",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "MS_Check__v1.Eval___v2.Eval",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval$0$x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval$0$x.1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval$0$result",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval$0$_v1.control_flag",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval$0$x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval$0$x.1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval$0$result",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval$0$_v2.control_flag",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_1_done",
                                    ],
                                    type_: Atom(
                                        Bool,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_in_1_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_in_1_1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_in_1_2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_out_1_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_out_1_1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_out_1_2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_2_done",
                                    ],
                                    type_: Atom(
                                        Bool,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_in_2_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_in_2_1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_in_2_2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_out_2_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_out_2_1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_out_2_2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "store__0__v1.control_flag",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "store__0__v2.control_flag",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "out__v1.Eval_loop_anon3_LoopHead_out_1_0_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "out__v1.Eval_loop_anon3_LoopHead_out_1_1_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "out__v2.Eval_loop_anon3_LoopHead_out_2_0_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "out__v2.Eval_loop_anon3_LoopHead_out_2_1_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "START",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_1_done",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_2_done",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        false,
                                    ),
                                    BoolLit(
                                        false,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$Entry",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$Entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval$0$x.1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "inline$_v1.Eval$0$x",
                                    "inline$_v1.Eval$0$result",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval$0$_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$anon0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$anon0",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval$0$x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval$0$x.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval$0$result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$anon3_LoopHead",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$anon3_LoopHead",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_in_1_0",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_in_1_1",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_in_1_2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval$0$result",
                                    ),
                                    Var(
                                        "inline$_v1.Eval$0$x",
                                    ),
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "inline$_v1.Eval$0$result",
                                        "inline$_v1.Eval$0$x",
                                    ],
                                    target: "_v1.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "inline$_v1.Eval$0$result",
                                        ),
                                        Var(
                                            "inline$_v1.Eval$0$x",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_1_done",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_out_1_0",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_out_1_1",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_out_1_2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval$0$result",
                                    ),
                                    Var(
                                        "inline$_v1.Eval$0$x",
                                    ),
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$anon3_LoopHead_last",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$anon3_LoopHead_last",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$anon3_LoopDone",
                                    "inline$_v1.Eval$0$anon3_LoopBody",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$anon3_LoopBody",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "inline$_v1.Eval$0$x",
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v1.control_flag",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval$0$result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "inline$_v1.Eval$0$result",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "inline$_v1.Eval$0$x",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval$0$x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "inline$_v1.Eval$0$x",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$anon3_LoopBody_dummy",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$anon3_LoopBody_dummy",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    false,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$anon3_LoopDone",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "inline$_v1.Eval$0$x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$anon2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$anon2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v1.control_flag",
                                                ),
                                                Nat(
                                                    "2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval$0$Return",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval$0$result",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "START$1",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "START$1",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$Entry",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$Entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval$0$x.1",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "inline$_v2.Eval$0$x",
                                    "inline$_v2.Eval$0$result",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval$0$_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$anon0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$anon0",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval$0$x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval$0$x.1",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval$0$result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Nat(
                                        "0",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$anon3_LoopHead",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$anon3_LoopHead",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_in_2_0",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_in_2_1",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_in_2_2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval$0$result",
                                    ),
                                    Var(
                                        "inline$_v2.Eval$0$x",
                                    ),
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "inline$_v2.Eval$0$result",
                                        "inline$_v2.Eval$0$x",
                                    ],
                                    target: "_v2.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "inline$_v2.Eval$0$result",
                                        ),
                                        Var(
                                            "inline$_v2.Eval$0$x",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_2_done",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_out_2_0",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_out_2_1",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_out_2_2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval$0$result",
                                    ),
                                    Var(
                                        "inline$_v2.Eval$0$x",
                                    ),
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$anon3_LoopHead_last",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$anon3_LoopHead_last",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$anon3_LoopDone",
                                    "inline$_v2.Eval$0$anon3_LoopBody",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$anon3_LoopBody",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "inline$_v2.Eval$0$x",
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v2.control_flag",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval$0$result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "inline$_v2.Eval$0$result",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "inline$_v2.Eval$0$x",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "inline$_v2.Eval$0$result",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval$0$x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "inline$_v2.Eval$0$x",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$anon3_LoopBody_dummy",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$anon3_LoopBody_dummy",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    false,
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$anon3_LoopDone",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "inline$_v2.Eval$0$x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$anon2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$anon2",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v2.control_flag",
                                                ),
                                                Nat(
                                                    "2",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval$0$Return",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval$0$result",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "START$2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "START$2",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "MS_L_0_0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "MS_L_0_0",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "MS_L_taken_0",
                                    "MS_L_not_taken_0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "MS_L_taken_0",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Var(
                                            "_v1.Eval_loop_anon3_LoopHead_1_done",
                                        ),
                                        op: And,
                                        rhs: Var(
                                            "_v2.Eval_loop_anon3_LoopHead_2_done",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "store__0__v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "store__0__v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.Eval_loop_anon3_LoopHead_in_1_2",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.Eval_loop_anon3_LoopHead_in_2_2",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "out__v1.Eval_loop_anon3_LoopHead_out_1_0_0",
                                        "out__v1.Eval_loop_anon3_LoopHead_out_1_1_0",
                                        "out__v2.Eval_loop_anon3_LoopHead_out_2_0_0",
                                        "out__v2.Eval_loop_anon3_LoopHead_out_2_1_0",
                                    ],
                                    target: "MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "_v1.Eval_loop_anon3_LoopHead_in_1_0",
                                        ),
                                        Var(
                                            "_v1.Eval_loop_anon3_LoopHead_in_1_1",
                                        ),
                                        Var(
                                            "_v2.Eval_loop_anon3_LoopHead_in_2_0",
                                        ),
                                        Var(
                                            "_v2.Eval_loop_anon3_LoopHead_in_2_1",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "_v1.control_flag",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "_v1.Eval_loop_anon3_LoopHead_out_1_2",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "_v2.control_flag",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "_v2.Eval_loop_anon3_LoopHead_out_2_2",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.Eval_loop_anon3_LoopHead_out_1_0",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "out__v1.Eval_loop_anon3_LoopHead_out_1_0_0",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.Eval_loop_anon3_LoopHead_out_1_1",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "out__v1.Eval_loop_anon3_LoopHead_out_1_1_0",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "_v2.Eval_loop_anon3_LoopHead_out_2_0",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "out__v2.Eval_loop_anon3_LoopHead_out_2_0_0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "_v2.Eval_loop_anon3_LoopHead_out_2_1",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "out__v2.Eval_loop_anon3_LoopHead_out_2_1_0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "store__0__v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "store__0__v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "MS_L_meet_0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "MS_L_not_taken_0",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Logical(
                                            LogicalExpr {
                                                lhs: Var(
                                                    "_v1.Eval_loop_anon3_LoopHead_1_done",
                                                ),
                                                op: And,
                                                rhs: Var(
                                                    "_v2.Eval_loop_anon3_LoopHead_2_done",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "MS_L_meet_0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "MS_L_meet_0",
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            ident: "MS$_v1.Eval_loop_anon3_LoopHead$_v2.Eval_loop_anon3_LoopHead",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.in_result",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.in_x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.control_flag_old",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.control_flag_",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.out_result",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v1.out_x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.in_result",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.in_x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.control_flag_old",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.control_flag_",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.out_result",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_v2.out_x",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                BoolLit(
                    true,
                ),
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "_houdini_Eval_loop_anon3_LoopHead_control_flag_2",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "_houdini_Eval_loop_anon3_LoopHead_out_result_3",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "existential",
                        params: [
                            Expr(
                                BoolLit(
                                    true,
                                ),
                            ),
                        ],
                    },
                ),
            ],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "_houdini_Eval_loop_anon3_LoopHead_out_x_4",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.in_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.in_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.in_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.in_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.out_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.out_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.out_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.out_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "_v1.control_flag",
                            "_v2.control_flag",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "MS$_v1.Eval_loop_anon3_LoopHead$_v2.Eval_loop_anon3_LoopHead",
                                args: [
                                    Var(
                                        "_v1.in_result",
                                    ),
                                    Var(
                                        "_v1.in_x",
                                    ),
                                    Old(
                                        OldExpr {
                                            expr: Var(
                                                "_v1.control_flag",
                                            ),
                                        },
                                    ),
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                    Var(
                                        "_v1.out_result",
                                    ),
                                    Var(
                                        "_v1.out_x",
                                    ),
                                    Var(
                                        "_v2.in_result",
                                    ),
                                    Var(
                                        "_v2.in_x",
                                    ),
                                    Old(
                                        OldExpr {
                                            expr: Var(
                                                "_v2.control_flag",
                                            ),
                                        },
                                    ),
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                    Var(
                                        "_v2.out_result",
                                    ),
                                    Var(
                                        "_v2.out_x",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "_houdini_Eval_loop_anon3_LoopHead_control_flag_2",
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Old(
                                            OldExpr {
                                                expr: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.control_flag",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "_v2.control_flag",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.in_x",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "_v2.in_x",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "_v1.control_flag",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "_v2.control_flag",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "_houdini_Eval_loop_anon3_LoopHead_out_result_3",
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Old(
                                            OldExpr {
                                                expr: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.in_result",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "_v2.in_result",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.in_x",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "_v2.in_x",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "_v1.out_result",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "_v2.out_result",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Var(
                                    "_houdini_Eval_loop_anon3_LoopHead_out_x_4",
                                ),
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Old(
                                            OldExpr {
                                                expr: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "_v1.in_x",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "_v2.in_x",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "_v1.out_x",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "_v2.out_x",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.in_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.in_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.in_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.in_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.out_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v1.out_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.out_result",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "_v2.out_x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$in_result",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$in_x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$in_result",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$in_x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_1_done",
                                    ],
                                    type_: Atom(
                                        Bool,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_in_1_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_in_1_1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_in_1_2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_out_1_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_out_1_1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v1.Eval_loop_anon3_LoopHead_out_1_2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_2_done",
                                    ],
                                    type_: Atom(
                                        Bool,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_in_2_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_in_2_1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_in_2_2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_out_2_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_out_2_1",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "_v2.Eval_loop_anon3_LoopHead_out_2_2",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "store__0__v1.control_flag",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "store__0__v2.control_flag",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "out__v1.Eval_loop_anon3_LoopHead_out_1_0_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "out__v1.Eval_loop_anon3_LoopHead_out_1_1_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "out__v2.Eval_loop_anon3_LoopHead_out_2_0_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "out__v2.Eval_loop_anon3_LoopHead_out_2_1_0",
                                    ],
                                    type_: Atom(
                                        Int,
                                    ),
                                },
                                where_: None,
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "START",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_1_done",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_2_done",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        false,
                                    ),
                                    BoolLit(
                                        false,
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$Entry",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$Entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$in_result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.in_result",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$in_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$entry",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$in_result",
                                    ),
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopHead",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopHead",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopDone",
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v1.control_flag",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_in_1_0",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_in_1_1",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_in_1_2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                    ),
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                    ),
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                    ],
                                    target: "_v1.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                        ),
                                        Var(
                                            "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_1_done",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_out_1_0",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_out_1_1",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v1.Eval_loop_anon3_LoopHead_out_1_2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                    ),
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                    ),
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopDone",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$in_result",
                                    ),
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v1.Eval_loop_anon3_LoopHead$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v1.Eval_loop_anon3_LoopHead$0$Return",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.out_result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_result",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v1.Eval_loop_anon3_LoopHead$0$out_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "START$1",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "START$1",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$Entry",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$Entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$in_result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.in_result",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$in_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$entry",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$entry",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$in_result",
                                    ),
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopHead",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopHead",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopDone",
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                        ),
                                        op: Gt,
                                        rhs: Nat(
                                            "0",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "_v2.control_UIF",
                                            args: [
                                                Var(
                                                    "_v2.control_flag",
                                                ),
                                                Nat(
                                                    "1",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                            ),
                                            op: Add,
                                            rhs: Var(
                                                "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Havoc(
                            HavocCmd {
                                vars: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Term(
                                        Term {
                                            lhs: Var(
                                                "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                            ),
                                            op: Sub,
                                            rhs: Nat(
                                                "1",
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_in_2_0",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_in_2_1",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_in_2_2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                    ),
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                    ),
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                    ],
                                    target: "_v2.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                        ),
                                        Var(
                                            "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_2_done",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    BoolLit(
                                        true,
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_out_2_0",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_out_2_1",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "_v2.Eval_loop_anon3_LoopHead_out_2_2",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                    ),
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                    ),
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopDone",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [
                                    Attr(
                                        AttrContent {
                                            ident: "partition",
                                            params: [],
                                        },
                                    ),
                                ],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Nat(
                                            "0",
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                        subscripts: [],
                                    },
                                    AssignLhs {
                                        ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$in_result",
                                    ),
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$in_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "inline$_v2.Eval_loop_anon3_LoopHead$0$Return",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "inline$_v2.Eval_loop_anon3_LoopHead$0$Return",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: BoolLit(
                                    true,
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.out_result",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_result",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.out_x",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "inline$_v2.Eval_loop_anon3_LoopHead$0$out_x",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "START$2",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "START$2",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "MS_L_0_0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "MS_L_0_0",
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "MS_L_taken_0",
                                    "MS_L_not_taken_0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "MS_L_taken_0",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Var(
                                            "_v1.Eval_loop_anon3_LoopHead_1_done",
                                        ),
                                        op: And,
                                        rhs: Var(
                                            "_v2.Eval_loop_anon3_LoopHead_2_done",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "store__0__v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "store__0__v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v1.Eval_loop_anon3_LoopHead_in_1_2",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "_v2.Eval_loop_anon3_LoopHead_in_2_2",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Call(
                            CallCmd {
                                attrs: [],
                                call_params: CallParams {
                                    returns: [
                                        "out__v1.Eval_loop_anon3_LoopHead_out_1_0_0",
                                        "out__v1.Eval_loop_anon3_LoopHead_out_1_1_0",
                                        "out__v2.Eval_loop_anon3_LoopHead_out_2_0_0",
                                        "out__v2.Eval_loop_anon3_LoopHead_out_2_1_0",
                                    ],
                                    target: "MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead",
                                    params: [
                                        Var(
                                            "_v1.Eval_loop_anon3_LoopHead_in_1_0",
                                        ),
                                        Var(
                                            "_v1.Eval_loop_anon3_LoopHead_in_1_1",
                                        ),
                                        Var(
                                            "_v2.Eval_loop_anon3_LoopHead_in_2_0",
                                        ),
                                        Var(
                                            "_v2.Eval_loop_anon3_LoopHead_in_2_1",
                                        ),
                                    ],
                                },
                                is_async: false,
                                is_free: false,
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "_v1.control_flag",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "_v1.Eval_loop_anon3_LoopHead_out_1_2",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "_v2.control_flag",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "_v2.Eval_loop_anon3_LoopHead_out_2_2",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.Eval_loop_anon3_LoopHead_out_1_0",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "out__v1.Eval_loop_anon3_LoopHead_out_1_0_0",
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "_v1.Eval_loop_anon3_LoopHead_out_1_1",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "out__v1.Eval_loop_anon3_LoopHead_out_1_1_0",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "_v2.Eval_loop_anon3_LoopHead_out_2_0",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "out__v2.Eval_loop_anon3_LoopHead_out_2_0_0",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "_v2.Eval_loop_anon3_LoopHead_out_2_1",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "out__v2.Eval_loop_anon3_LoopHead_out_2_1_0",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v1.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "store__0__v1.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "_v2.control_flag",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "store__0__v2.control_flag",
                                    ),
                                ],
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "MS_L_meet_0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "MS_L_not_taken_0",
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Logical(
                                            LogicalExpr {
                                                lhs: Var(
                                                    "_v1.Eval_loop_anon3_LoopHead_1_done",
                                                ),
                                                op: And,
                                                rhs: Var(
                                                    "_v2.Eval_loop_anon3_LoopHead_2_done",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                    TransferCmd(
                        Goto(
                            GotoCmd {
                                labels: [
                                    "MS_L_meet_0",
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Label(
                            Label {
                                ident: "MS_L_meet_0",
                            },
                        ),
                    ),
                    TransferCmd(
                        Return(
                            ReturnCmd,
                        ),
                    ),
                ],
            },
        },
    ),
]

[Printed]
var _v2.control_flag: int;

function _v2.control_UIF(arg_0: int, arg_1: int): int;

procedure _v2.Eval(x: int) returns (result: int);
  modifies _v2.control_flag;
  free ensures {:io_dependency "control_flag", "control_flag", "x"} true;
  free ensures {:io_dependency "result", "x"} true;
  free ensures {:io_dependency "control_flag", "control_flag", "x"} true;
  free ensures {:io_dependency "result", "x"} true;

procedure _v2.Eval_loop_anon3_LoopHead(in_result: int, in_x: int) returns (out_result: int, out_x: int);
  modifies _v2.control_flag;
  free ensures {:io_dependency "control_flag", "control_flag", "in_x"} true;
  free ensures {:io_dependency "out_result", "in_result", "in_x"} true;
  free ensures {:io_dependency "out_x", "in_x"} true;
  free ensures {:io_dependency "control_flag", "control_flag", "in_x"} true;
  free ensures {:io_dependency "out_result", "in_result", "in_x"} true;
  free ensures {:io_dependency "out_x", "in_x"} true;

implementation _v2.Eval(x.1: int) returns (result: int) {
  var x: int;

  anon0:
  x := x.1;
  result := 0;
  _v2.control_flag := 0;
  goto anon3_LoopHead;
  anon3_LoopHead:
  call result, x := _v2.Eval_loop_anon3_LoopHead(result, x);
  goto anon3_LoopHead_last;
  anon3_LoopHead_last:
  goto anon3_LoopDone, anon3_LoopBody;
  anon3_LoopBody:
  assume {:partition} x > 0;
  _v2.control_flag := _v2.control_UIF(_v2.control_flag, 1);
  result := result + x;
  havoc result;
  x := x - 1;
  goto anon3_LoopBody_dummy;
  anon3_LoopBody_dummy:
  assume false;
  return;
  anon3_LoopDone:
  assume {:partition} 0 >= x;
  goto anon2;
  anon2:
  _v2.control_flag := _v2.control_UIF(_v2.control_flag, 2);
  return;
}

implementation _v2.Eval_loop_anon3_LoopHead(in_result: int, in_x: int) returns (out_result: int, out_x: int) {
  entry:
  out_result, out_x := in_result, in_x;
  goto anon3_LoopHead;
  anon3_LoopHead:
  goto anon3_LoopDone, anon3_LoopBody;
  anon3_LoopBody:
  assume {:partition} out_x > 0;
  _v2.control_flag := _v2.control_UIF(_v2.control_flag, 1);
  out_result := out_result + out_x;
  havoc out_result;
  out_x := out_x - 1;
  goto anon3_LoopBody_dummy;
  anon3_LoopBody_dummy:
  call out_result, out_x := _v2.Eval_loop_anon3_LoopHead(out_result, out_x);
  return;
  anon3_LoopDone:
  assume {:partition} 0 >= out_x;
  out_result, out_x := in_result, in_x;
  _v2.control_flag := old (_v2.control_flag);
  return;
}

var _v1.control_flag: int;

procedure _v1.Eval(x: int) returns (result: int);
  modifies _v1.control_flag;
  free ensures {:io_dependency "control_flag", "control_flag", "x"} true;
  free ensures {:io_dependency "result", "x"} true;
  free ensures {:io_dependency "control_flag", "control_flag", "x"} true;
  free ensures {:io_dependency "result", "x"} true;

procedure _v1.Eval_loop_anon3_LoopHead(in_result: int, in_x: int) returns (out_result: int, out_x: int);
  modifies _v1.control_flag;
  free ensures {:io_dependency "control_flag", "control_flag", "in_x"} true;
  free ensures {:io_dependency "out_result", "in_result", "in_x"} true;
  free ensures {:io_dependency "out_x", "in_x"} true;
  free ensures {:io_dependency "control_flag", "control_flag", "in_x"} true;
  free ensures {:io_dependency "out_result", "in_result", "in_x"} true;
  free ensures {:io_dependency "out_x", "in_x"} true;

implementation _v1.Eval(x.1: int) returns (result: int) {
  var x: int;

  anon0:
  x := x.1;
  result := 0;
  _v1.control_flag := 0;
  goto anon3_LoopHead;
  anon3_LoopHead:
  call result, x := _v1.Eval_loop_anon3_LoopHead(result, x);
  goto anon3_LoopHead_last;
  anon3_LoopHead_last:
  goto anon3_LoopDone, anon3_LoopBody;
  anon3_LoopBody:
  assume {:partition} x > 0;
  _v1.control_flag := _v2.control_UIF(_v1.control_flag, 1);
  result := result + x;
  x := x - 1;
  goto anon3_LoopBody_dummy;
  anon3_LoopBody_dummy:
  assume false;
  return;
  anon3_LoopDone:
  assume {:partition} 0 >= x;
  goto anon2;
  anon2:
  _v1.control_flag := _v2.control_UIF(_v1.control_flag, 2);
  return;
}

implementation _v1.Eval_loop_anon3_LoopHead(in_result: int, in_x: int) returns (out_result: int, out_x: int) {
  entry:
  out_result, out_x := in_result, in_x;
  goto anon3_LoopHead;
  anon3_LoopHead:
  goto anon3_LoopDone, anon3_LoopBody;
  anon3_LoopBody:
  assume {:partition} out_x > 0;
  _v1.control_flag := _v2.control_UIF(_v1.control_flag, 1);
  out_result := out_result + out_x;
  out_x := out_x - 1;
  goto anon3_LoopBody_dummy;
  anon3_LoopBody_dummy:
  call out_result, out_x := _v1.Eval_loop_anon3_LoopHead(out_result, out_x);
  return;
  anon3_LoopDone:
  assume {:partition} 0 >= out_x;
  out_result, out_x := in_result, in_x;
  _v1.control_flag := old (_v1.control_flag);
  return;
}

function {:inline true} MS$_v1.Eval$_v2.Eval(_v1.x: int, _v1.control_flag_old: int, _v1.control_flag_: int, _v1.result: int, _v2.x: int, _v2.control_flag_old: int, _v2.control_flag_: int, _v2.result: int): bool {
  true
}

const {:existential true} _houdini_Eval_control_flag_0: bool;

const {:existential true} _houdini_Eval_result_1: bool;

procedure MS_Check__v1.Eval___v2.Eval(_v1.x: int, _v2.x: int) returns (_v1.result: int, _v2.result: int);
  modifies _v1.control_flag, _v2.control_flag;
  ensures MS$_v1.Eval$_v2.Eval(_v1.x, old (_v1.control_flag), _v1.control_flag, _v1.result, _v2.x, old (_v2.control_flag), _v2.control_flag, _v2.result);
  ensures _houdini_Eval_control_flag_0 ==> old (_v1.control_flag == _v2.control_flag && _v1.x == _v2.x) ==> _v1.control_flag == _v2.control_flag;
  ensures _houdini_Eval_result_1 ==> old (_v1.x == _v2.x) ==> _v1.result == _v2.result;

implementation MS_Check__v1.Eval___v2.Eval(_v1.x: int, _v2.x: int) returns (_v1.result: int, _v2.result: int) {
  var inline$_v1.Eval$0$x: int;
  var inline$_v1.Eval$0$x.1: int;
  var inline$_v1.Eval$0$result: int;
  var inline$_v1.Eval$0$_v1.control_flag: int;
  var inline$_v2.Eval$0$x: int;
  var inline$_v2.Eval$0$x.1: int;
  var inline$_v2.Eval$0$result: int;
  var inline$_v2.Eval$0$_v2.control_flag: int;
  var _v1.Eval_loop_anon3_LoopHead_1_done: bool;
  var _v1.Eval_loop_anon3_LoopHead_in_1_0: int;
  var _v1.Eval_loop_anon3_LoopHead_in_1_1: int;
  var _v1.Eval_loop_anon3_LoopHead_in_1_2: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_0: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_1: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_2: int;
  var _v2.Eval_loop_anon3_LoopHead_2_done: bool;
  var _v2.Eval_loop_anon3_LoopHead_in_2_0: int;
  var _v2.Eval_loop_anon3_LoopHead_in_2_1: int;
  var _v2.Eval_loop_anon3_LoopHead_in_2_2: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_0: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_1: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_2: int;
  var store__0__v1.control_flag: int;
  var store__0__v2.control_flag: int;
  var out__v1.Eval_loop_anon3_LoopHead_out_1_0_0: int;
  var out__v1.Eval_loop_anon3_LoopHead_out_1_1_0: int;
  var out__v2.Eval_loop_anon3_LoopHead_out_2_0_0: int;
  var out__v2.Eval_loop_anon3_LoopHead_out_2_1_0: int;

  START:
  _v1.Eval_loop_anon3_LoopHead_1_done, _v2.Eval_loop_anon3_LoopHead_2_done := false, false;
  goto inline$_v1.Eval$0$Entry;
  inline$_v1.Eval$0$Entry:
  inline$_v1.Eval$0$x.1 := _v1.x;
  havoc inline$_v1.Eval$0$x, inline$_v1.Eval$0$result;
  inline$_v1.Eval$0$_v1.control_flag := _v1.control_flag;
  goto inline$_v1.Eval$0$anon0;
  inline$_v1.Eval$0$anon0:
  inline$_v1.Eval$0$x := inline$_v1.Eval$0$x.1;
  inline$_v1.Eval$0$result := 0;
  _v1.control_flag := 0;
  goto inline$_v1.Eval$0$anon3_LoopHead;
  inline$_v1.Eval$0$anon3_LoopHead:
  _v1.Eval_loop_anon3_LoopHead_in_1_0, _v1.Eval_loop_anon3_LoopHead_in_1_1, _v1.Eval_loop_anon3_LoopHead_in_1_2 := inline$_v1.Eval$0$result, inline$_v1.Eval$0$x, _v1.control_flag;
  call inline$_v1.Eval$0$result, inline$_v1.Eval$0$x := _v1.Eval_loop_anon3_LoopHead(inline$_v1.Eval$0$result, inline$_v1.Eval$0$x);
  _v1.Eval_loop_anon3_LoopHead_1_done := true;
  _v1.Eval_loop_anon3_LoopHead_out_1_0, _v1.Eval_loop_anon3_LoopHead_out_1_1, _v1.Eval_loop_anon3_LoopHead_out_1_2 := inline$_v1.Eval$0$result, inline$_v1.Eval$0$x, _v1.control_flag;
  goto inline$_v1.Eval$0$anon3_LoopHead_last;
  inline$_v1.Eval$0$anon3_LoopHead_last:
  goto inline$_v1.Eval$0$anon3_LoopDone, inline$_v1.Eval$0$anon3_LoopBody;
  inline$_v1.Eval$0$anon3_LoopBody:
  assume {:partition} inline$_v1.Eval$0$x > 0;
  _v1.control_flag := _v2.control_UIF(_v1.control_flag, 1);
  inline$_v1.Eval$0$result := inline$_v1.Eval$0$result + inline$_v1.Eval$0$x;
  inline$_v1.Eval$0$x := inline$_v1.Eval$0$x - 1;
  goto inline$_v1.Eval$0$anon3_LoopBody_dummy;
  inline$_v1.Eval$0$anon3_LoopBody_dummy:
  assume false;
  goto inline$_v1.Eval$0$Return;
  inline$_v1.Eval$0$anon3_LoopDone:
  assume {:partition} 0 >= inline$_v1.Eval$0$x;
  goto inline$_v1.Eval$0$anon2;
  inline$_v1.Eval$0$anon2:
  _v1.control_flag := _v2.control_UIF(_v1.control_flag, 2);
  goto inline$_v1.Eval$0$Return;
  inline$_v1.Eval$0$Return:
  assume true;
  assume true;
  assume true;
  assume true;
  _v1.result := inline$_v1.Eval$0$result;
  goto START$1;
  START$1:
  goto inline$_v2.Eval$0$Entry;
  inline$_v2.Eval$0$Entry:
  inline$_v2.Eval$0$x.1 := _v2.x;
  havoc inline$_v2.Eval$0$x, inline$_v2.Eval$0$result;
  inline$_v2.Eval$0$_v2.control_flag := _v2.control_flag;
  goto inline$_v2.Eval$0$anon0;
  inline$_v2.Eval$0$anon0:
  inline$_v2.Eval$0$x := inline$_v2.Eval$0$x.1;
  inline$_v2.Eval$0$result := 0;
  _v2.control_flag := 0;
  goto inline$_v2.Eval$0$anon3_LoopHead;
  inline$_v2.Eval$0$anon3_LoopHead:
  _v2.Eval_loop_anon3_LoopHead_in_2_0, _v2.Eval_loop_anon3_LoopHead_in_2_1, _v2.Eval_loop_anon3_LoopHead_in_2_2 := inline$_v2.Eval$0$result, inline$_v2.Eval$0$x, _v2.control_flag;
  call inline$_v2.Eval$0$result, inline$_v2.Eval$0$x := _v2.Eval_loop_anon3_LoopHead(inline$_v2.Eval$0$result, inline$_v2.Eval$0$x);
  _v2.Eval_loop_anon3_LoopHead_2_done := true;
  _v2.Eval_loop_anon3_LoopHead_out_2_0, _v2.Eval_loop_anon3_LoopHead_out_2_1, _v2.Eval_loop_anon3_LoopHead_out_2_2 := inline$_v2.Eval$0$result, inline$_v2.Eval$0$x, _v2.control_flag;
  goto inline$_v2.Eval$0$anon3_LoopHead_last;
  inline$_v2.Eval$0$anon3_LoopHead_last:
  goto inline$_v2.Eval$0$anon3_LoopDone, inline$_v2.Eval$0$anon3_LoopBody;
  inline$_v2.Eval$0$anon3_LoopBody:
  assume {:partition} inline$_v2.Eval$0$x > 0;
  _v2.control_flag := _v2.control_UIF(_v2.control_flag, 1);
  inline$_v2.Eval$0$result := inline$_v2.Eval$0$result + inline$_v2.Eval$0$x;
  havoc inline$_v2.Eval$0$result;
  inline$_v2.Eval$0$x := inline$_v2.Eval$0$x - 1;
  goto inline$_v2.Eval$0$anon3_LoopBody_dummy;
  inline$_v2.Eval$0$anon3_LoopBody_dummy:
  assume false;
  goto inline$_v2.Eval$0$Return;
  inline$_v2.Eval$0$anon3_LoopDone:
  assume {:partition} 0 >= inline$_v2.Eval$0$x;
  goto inline$_v2.Eval$0$anon2;
  inline$_v2.Eval$0$anon2:
  _v2.control_flag := _v2.control_UIF(_v2.control_flag, 2);
  goto inline$_v2.Eval$0$Return;
  inline$_v2.Eval$0$Return:
  assume true;
  assume true;
  assume true;
  assume true;
  _v2.result := inline$_v2.Eval$0$result;
  goto START$2;
  START$2:
  goto MS_L_0_0;
  MS_L_0_0:
  goto MS_L_taken_0, MS_L_not_taken_0;
  MS_L_taken_0:
  assume _v1.Eval_loop_anon3_LoopHead_1_done && _v2.Eval_loop_anon3_LoopHead_2_done;
  store__0__v1.control_flag := _v1.control_flag;
  store__0__v2.control_flag := _v2.control_flag;
  _v1.control_flag := _v1.Eval_loop_anon3_LoopHead_in_1_2;
  _v2.control_flag := _v2.Eval_loop_anon3_LoopHead_in_2_2;
  call out__v1.Eval_loop_anon3_LoopHead_out_1_0_0, out__v1.Eval_loop_anon3_LoopHead_out_1_1_0, out__v2.Eval_loop_anon3_LoopHead_out_2_0_0, out__v2.Eval_loop_anon3_LoopHead_out_2_1_0 := MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead(_v1.Eval_loop_anon3_LoopHead_in_1_0, _v1.Eval_loop_anon3_LoopHead_in_1_1, _v2.Eval_loop_anon3_LoopHead_in_2_0, _v2.Eval_loop_anon3_LoopHead_in_2_1);
  assume _v1.control_flag == _v1.Eval_loop_anon3_LoopHead_out_1_2;
  assume _v2.control_flag == _v2.Eval_loop_anon3_LoopHead_out_2_2;
  assume _v1.Eval_loop_anon3_LoopHead_out_1_0 == out__v1.Eval_loop_anon3_LoopHead_out_1_0_0 && _v1.Eval_loop_anon3_LoopHead_out_1_1 == out__v1.Eval_loop_anon3_LoopHead_out_1_1_0 && _v2.Eval_loop_anon3_LoopHead_out_2_0 == out__v2.Eval_loop_anon3_LoopHead_out_2_0_0 && _v2.Eval_loop_anon3_LoopHead_out_2_1 == out__v2.Eval_loop_anon3_LoopHead_out_2_1_0;
  _v1.control_flag := store__0__v1.control_flag;
  _v2.control_flag := store__0__v2.control_flag;
  goto MS_L_meet_0;
  MS_L_not_taken_0:
  assume !(_v1.Eval_loop_anon3_LoopHead_1_done && _v2.Eval_loop_anon3_LoopHead_2_done);
  goto MS_L_meet_0;
  MS_L_meet_0:
  return;
}

function {:inline true} MS$_v1.Eval_loop_anon3_LoopHead$_v2.Eval_loop_anon3_LoopHead(_v1.in_result: int, _v1.in_x: int, _v1.control_flag_old: int, _v1.control_flag_: int, _v1.out_result: int, _v1.out_x: int, _v2.in_result: int, _v2.in_x: int, _v2.control_flag_old: int, _v2.control_flag_: int, _v2.out_result: int, _v2.out_x: int): bool {
  true
}

const {:existential true} _houdini_Eval_loop_anon3_LoopHead_control_flag_2: bool;

const {:existential true} _houdini_Eval_loop_anon3_LoopHead_out_result_3: bool;

const {:existential true} _houdini_Eval_loop_anon3_LoopHead_out_x_4: bool;

procedure MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead(_v1.in_result: int, _v1.in_x: int, _v2.in_result: int, _v2.in_x: int) returns (_v1.out_result: int, _v1.out_x: int, _v2.out_result: int, _v2.out_x: int);
  modifies _v1.control_flag, _v2.control_flag;
  ensures MS$_v1.Eval_loop_anon3_LoopHead$_v2.Eval_loop_anon3_LoopHead(_v1.in_result, _v1.in_x, old (_v1.control_flag), _v1.control_flag, _v1.out_result, _v1.out_x, _v2.in_result, _v2.in_x, old (_v2.control_flag), _v2.control_flag, _v2.out_result, _v2.out_x);
  ensures _houdini_Eval_loop_anon3_LoopHead_control_flag_2 ==> old (_v1.control_flag == _v2.control_flag && _v1.in_x == _v2.in_x) ==> _v1.control_flag == _v2.control_flag;
  ensures _houdini_Eval_loop_anon3_LoopHead_out_result_3 ==> old (_v1.in_result == _v2.in_result && _v1.in_x == _v2.in_x) ==> _v1.out_result == _v2.out_result;
  ensures _houdini_Eval_loop_anon3_LoopHead_out_x_4 ==> old (_v1.in_x == _v2.in_x) ==> _v1.out_x == _v2.out_x;

implementation MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead(_v1.in_result: int, _v1.in_x: int, _v2.in_result: int, _v2.in_x: int) returns (_v1.out_result: int, _v1.out_x: int, _v2.out_result: int, _v2.out_x: int) {
  var inline$_v1.Eval_loop_anon3_LoopHead$0$in_result: int;
  var inline$_v1.Eval_loop_anon3_LoopHead$0$in_x: int;
  var inline$_v1.Eval_loop_anon3_LoopHead$0$out_result: int;
  var inline$_v1.Eval_loop_anon3_LoopHead$0$out_x: int;
  var inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$in_result: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$in_x: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$out_result: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$out_x: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag: int;
  var _v1.Eval_loop_anon3_LoopHead_1_done: bool;
  var _v1.Eval_loop_anon3_LoopHead_in_1_0: int;
  var _v1.Eval_loop_anon3_LoopHead_in_1_1: int;
  var _v1.Eval_loop_anon3_LoopHead_in_1_2: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_0: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_1: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_2: int;
  var _v2.Eval_loop_anon3_LoopHead_2_done: bool;
  var _v2.Eval_loop_anon3_LoopHead_in_2_0: int;
  var _v2.Eval_loop_anon3_LoopHead_in_2_1: int;
  var _v2.Eval_loop_anon3_LoopHead_in_2_2: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_0: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_1: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_2: int;
  var store__0__v1.control_flag: int;
  var store__0__v2.control_flag: int;
  var out__v1.Eval_loop_anon3_LoopHead_out_1_0_0: int;
  var out__v1.Eval_loop_anon3_LoopHead_out_1_1_0: int;
  var out__v2.Eval_loop_anon3_LoopHead_out_2_0_0: int;
  var out__v2.Eval_loop_anon3_LoopHead_out_2_1_0: int;

  START:
  _v1.Eval_loop_anon3_LoopHead_1_done, _v2.Eval_loop_anon3_LoopHead_2_done := false, false;
  goto inline$_v1.Eval_loop_anon3_LoopHead$0$Entry;
  inline$_v1.Eval_loop_anon3_LoopHead$0$Entry:
  inline$_v1.Eval_loop_anon3_LoopHead$0$in_result := _v1.in_result;
  inline$_v1.Eval_loop_anon3_LoopHead$0$in_x := _v1.in_x;
  havoc inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x;
  inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag := _v1.control_flag;
  goto inline$_v1.Eval_loop_anon3_LoopHead$0$entry;
  inline$_v1.Eval_loop_anon3_LoopHead$0$entry:
  inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x := inline$_v1.Eval_loop_anon3_LoopHead$0$in_result, inline$_v1.Eval_loop_anon3_LoopHead$0$in_x;
  goto inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopHead;
  inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopHead:
  goto inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopDone, inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody;
  inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody:
  assume {:partition} inline$_v1.Eval_loop_anon3_LoopHead$0$out_x > 0;
  _v1.control_flag := _v2.control_UIF(_v1.control_flag, 1);
  inline$_v1.Eval_loop_anon3_LoopHead$0$out_result := inline$_v1.Eval_loop_anon3_LoopHead$0$out_result + inline$_v1.Eval_loop_anon3_LoopHead$0$out_x;
  inline$_v1.Eval_loop_anon3_LoopHead$0$out_x := inline$_v1.Eval_loop_anon3_LoopHead$0$out_x - 1;
  goto inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy;
  inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy:
  _v1.Eval_loop_anon3_LoopHead_in_1_0, _v1.Eval_loop_anon3_LoopHead_in_1_1, _v1.Eval_loop_anon3_LoopHead_in_1_2 := inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x, _v1.control_flag;
  call inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x := _v1.Eval_loop_anon3_LoopHead(inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x);
  _v1.Eval_loop_anon3_LoopHead_1_done := true;
  _v1.Eval_loop_anon3_LoopHead_out_1_0, _v1.Eval_loop_anon3_LoopHead_out_1_1, _v1.Eval_loop_anon3_LoopHead_out_1_2 := inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x, _v1.control_flag;
  goto inline$_v1.Eval_loop_anon3_LoopHead$0$Return;
  inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopDone:
  assume {:partition} 0 >= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x;
  inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x := inline$_v1.Eval_loop_anon3_LoopHead$0$in_result, inline$_v1.Eval_loop_anon3_LoopHead$0$in_x;
  _v1.control_flag := inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag;
  goto inline$_v1.Eval_loop_anon3_LoopHead$0$Return;
  inline$_v1.Eval_loop_anon3_LoopHead$0$Return:
  assume true;
  assume true;
  assume true;
  assume true;
  assume true;
  assume true;
  _v1.out_result := inline$_v1.Eval_loop_anon3_LoopHead$0$out_result;
  _v1.out_x := inline$_v1.Eval_loop_anon3_LoopHead$0$out_x;
  goto START$1;
  START$1:
  goto inline$_v2.Eval_loop_anon3_LoopHead$0$Entry;
  inline$_v2.Eval_loop_anon3_LoopHead$0$Entry:
  inline$_v2.Eval_loop_anon3_LoopHead$0$in_result := _v2.in_result;
  inline$_v2.Eval_loop_anon3_LoopHead$0$in_x := _v2.in_x;
  havoc inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x;
  inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag := _v2.control_flag;
  goto inline$_v2.Eval_loop_anon3_LoopHead$0$entry;
  inline$_v2.Eval_loop_anon3_LoopHead$0$entry:
  inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x := inline$_v2.Eval_loop_anon3_LoopHead$0$in_result, inline$_v2.Eval_loop_anon3_LoopHead$0$in_x;
  goto inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopHead;
  inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopHead:
  goto inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopDone, inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody;
  inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody:
  assume {:partition} inline$_v2.Eval_loop_anon3_LoopHead$0$out_x > 0;
  _v2.control_flag := _v2.control_UIF(_v2.control_flag, 1);
  inline$_v2.Eval_loop_anon3_LoopHead$0$out_result := inline$_v2.Eval_loop_anon3_LoopHead$0$out_result + inline$_v2.Eval_loop_anon3_LoopHead$0$out_x;
  havoc inline$_v2.Eval_loop_anon3_LoopHead$0$out_result;
  inline$_v2.Eval_loop_anon3_LoopHead$0$out_x := inline$_v2.Eval_loop_anon3_LoopHead$0$out_x - 1;
  goto inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy;
  inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy:
  _v2.Eval_loop_anon3_LoopHead_in_2_0, _v2.Eval_loop_anon3_LoopHead_in_2_1, _v2.Eval_loop_anon3_LoopHead_in_2_2 := inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x, _v2.control_flag;
  call inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x := _v2.Eval_loop_anon3_LoopHead(inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x);
  _v2.Eval_loop_anon3_LoopHead_2_done := true;
  _v2.Eval_loop_anon3_LoopHead_out_2_0, _v2.Eval_loop_anon3_LoopHead_out_2_1, _v2.Eval_loop_anon3_LoopHead_out_2_2 := inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x, _v2.control_flag;
  goto inline$_v2.Eval_loop_anon3_LoopHead$0$Return;
  inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopDone:
  assume {:partition} 0 >= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x;
  inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x := inline$_v2.Eval_loop_anon3_LoopHead$0$in_result, inline$_v2.Eval_loop_anon3_LoopHead$0$in_x;
  _v2.control_flag := inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag;
  goto inline$_v2.Eval_loop_anon3_LoopHead$0$Return;
  inline$_v2.Eval_loop_anon3_LoopHead$0$Return:
  assume true;
  assume true;
  assume true;
  assume true;
  assume true;
  assume true;
  _v2.out_result := inline$_v2.Eval_loop_anon3_LoopHead$0$out_result;
  _v2.out_x := inline$_v2.Eval_loop_anon3_LoopHead$0$out_x;
  goto START$2;
  START$2:
  goto MS_L_0_0;
  MS_L_0_0:
  goto MS_L_taken_0, MS_L_not_taken_0;
  MS_L_taken_0:
  assume _v1.Eval_loop_anon3_LoopHead_1_done && _v2.Eval_loop_anon3_LoopHead_2_done;
  store__0__v1.control_flag := _v1.control_flag;
  store__0__v2.control_flag := _v2.control_flag;
  _v1.control_flag := _v1.Eval_loop_anon3_LoopHead_in_1_2;
  _v2.control_flag := _v2.Eval_loop_anon3_LoopHead_in_2_2;
  call out__v1.Eval_loop_anon3_LoopHead_out_1_0_0, out__v1.Eval_loop_anon3_LoopHead_out_1_1_0, out__v2.Eval_loop_anon3_LoopHead_out_2_0_0, out__v2.Eval_loop_anon3_LoopHead_out_2_1_0 := MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead(_v1.Eval_loop_anon3_LoopHead_in_1_0, _v1.Eval_loop_anon3_LoopHead_in_1_1, _v2.Eval_loop_anon3_LoopHead_in_2_0, _v2.Eval_loop_anon3_LoopHead_in_2_1);
  assume _v1.control_flag == _v1.Eval_loop_anon3_LoopHead_out_1_2;
  assume _v2.control_flag == _v2.Eval_loop_anon3_LoopHead_out_2_2;
  assume _v1.Eval_loop_anon3_LoopHead_out_1_0 == out__v1.Eval_loop_anon3_LoopHead_out_1_0_0 && _v1.Eval_loop_anon3_LoopHead_out_1_1 == out__v1.Eval_loop_anon3_LoopHead_out_1_1_0 && _v2.Eval_loop_anon3_LoopHead_out_2_0 == out__v2.Eval_loop_anon3_LoopHead_out_2_0_0 && _v2.Eval_loop_anon3_LoopHead_out_2_1 == out__v2.Eval_loop_anon3_LoopHead_out_2_1_0;
  _v1.control_flag := store__0__v1.control_flag;
  _v2.control_flag := store__0__v2.control_flag;
  goto MS_L_meet_0;
  MS_L_not_taken_0:
  assume !(_v1.Eval_loop_anon3_LoopHead_1_done && _v2.Eval_loop_anon3_LoopHead_2_done);
  goto MS_L_meet_0;
  MS_L_meet_0:
  return;
}

[Input - ../../vendor/boogie/Test/houdini/mergedProgSingle_res_ex1.bpl]
// RUN: %boogie /contractInfer /inlineDepth:1 /printAssignment "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

var _v2.control_flag: int;

function _v2.control_UIF(arg_0: int, arg_1: int) : int;

procedure _v2.Eval(x: int) returns (result: int);
  modifies _v2.control_flag;
  free ensures {:io_dependency "control_flag", "control_flag", "x"} true;
  free ensures {:io_dependency "result", "x"} true;
  free ensures {:io_dependency "control_flag", "control_flag", "x"} true;
  free ensures {:io_dependency "result", "x"} true;



procedure _v2.Eval_loop_anon3_LoopHead(in_result: int, in_x: int) returns (out_result: int, out_x: int);
  modifies _v2.control_flag;
  free ensures {:io_dependency "control_flag", "control_flag", "in_x"} true;
  free ensures {:io_dependency "out_result", "in_result", "in_x"} true;
  free ensures {:io_dependency "out_x", "in_x"} true;
  free ensures {:io_dependency "control_flag", "control_flag", "in_x"} true;
  free ensures {:io_dependency "out_result", "in_result", "in_x"} true;
  free ensures {:io_dependency "out_x", "in_x"} true;



implementation _v2.Eval(x.1: int) returns (result: int)
{
  var x: int;

  anon0:
    x := x.1;
    result := 0;
    _v2.control_flag := 0;
    goto anon3_LoopHead;

  anon3_LoopHead:
    call result, x := _v2.Eval_loop_anon3_LoopHead(result, x);
    goto anon3_LoopHead_last;

  anon3_LoopHead_last:
    goto anon3_LoopDone, anon3_LoopBody;

  anon3_LoopBody:
    assume {:partition} x > 0;
    _v2.control_flag := _v2.control_UIF(_v2.control_flag, 1);
    result := result + x;
    havoc result;
    x := x - 1;
    goto anon3_LoopBody_dummy;

  anon3_LoopBody_dummy:
    assume false;
    return;

  anon3_LoopDone:
    assume {:partition} 0 >= x;
    goto anon2;

  anon2:
    _v2.control_flag := _v2.control_UIF(_v2.control_flag, 2);
    return;
}



implementation _v2.Eval_loop_anon3_LoopHead(in_result: int, in_x: int) returns (out_result: int, out_x: int)
{

  entry:
    out_result, out_x := in_result, in_x;
    goto anon3_LoopHead;

  anon3_LoopHead:
    goto anon3_LoopDone, anon3_LoopBody;

  anon3_LoopBody:
    assume {:partition} out_x > 0;
    _v2.control_flag := _v2.control_UIF(_v2.control_flag, 1);
    out_result := out_result + out_x;
    havoc out_result;
    out_x := out_x - 1;
    goto anon3_LoopBody_dummy;

  anon3_LoopBody_dummy:
    call out_result, out_x := _v2.Eval_loop_anon3_LoopHead(out_result, out_x);
    return;

  anon3_LoopDone:
    assume {:partition} 0 >= out_x;
    out_result, out_x := in_result, in_x;
    _v2.control_flag := old(_v2.control_flag);
    return;
}



var _v1.control_flag: int;

procedure _v1.Eval(x: int) returns (result: int);
  modifies _v1.control_flag;
  free ensures {:io_dependency "control_flag", "control_flag", "x"} true;
  free ensures {:io_dependency "result", "x"} true;
  free ensures {:io_dependency "control_flag", "control_flag", "x"} true;
  free ensures {:io_dependency "result", "x"} true;



procedure _v1.Eval_loop_anon3_LoopHead(in_result: int, in_x: int) returns (out_result: int, out_x: int);
  modifies _v1.control_flag;
  free ensures {:io_dependency "control_flag", "control_flag", "in_x"} true;
  free ensures {:io_dependency "out_result", "in_result", "in_x"} true;
  free ensures {:io_dependency "out_x", "in_x"} true;
  free ensures {:io_dependency "control_flag", "control_flag", "in_x"} true;
  free ensures {:io_dependency "out_result", "in_result", "in_x"} true;
  free ensures {:io_dependency "out_x", "in_x"} true;



implementation _v1.Eval(x.1: int) returns (result: int)
{
  var x: int;

  anon0:
    x := x.1;
    result := 0;
    _v1.control_flag := 0;
    goto anon3_LoopHead;

  anon3_LoopHead:
    call result, x := _v1.Eval_loop_anon3_LoopHead(result, x);
    goto anon3_LoopHead_last;

  anon3_LoopHead_last:
    goto anon3_LoopDone, anon3_LoopBody;

  anon3_LoopBody:
    assume {:partition} x > 0;
    _v1.control_flag := _v2.control_UIF(_v1.control_flag, 1);
    result := result + x;
    x := x - 1;
    goto anon3_LoopBody_dummy;

  anon3_LoopBody_dummy:
    assume false;
    return;

  anon3_LoopDone:
    assume {:partition} 0 >= x;
    goto anon2;

  anon2:
    _v1.control_flag := _v2.control_UIF(_v1.control_flag, 2);
    return;
}



implementation _v1.Eval_loop_anon3_LoopHead(in_result: int, in_x: int) returns (out_result: int, out_x: int)
{

  entry:
    out_result, out_x := in_result, in_x;
    goto anon3_LoopHead;

  anon3_LoopHead:
    goto anon3_LoopDone, anon3_LoopBody;

  anon3_LoopBody:
    assume {:partition} out_x > 0;
    _v1.control_flag := _v2.control_UIF(_v1.control_flag, 1);
    out_result := out_result + out_x;
    out_x := out_x - 1;
    goto anon3_LoopBody_dummy;

  anon3_LoopBody_dummy:
    call out_result, out_x := _v1.Eval_loop_anon3_LoopHead(out_result, out_x);
    return;

  anon3_LoopDone:
    assume {:partition} 0 >= out_x;
    out_result, out_x := in_result, in_x;
    _v1.control_flag := old(_v1.control_flag);
    return;
}



function {:inline true} MS$_v1.Eval$_v2.Eval(_v1.x: int, 
    _v1.control_flag_old: int, 
    _v1.control_flag_: int, 
    _v1.result: int, 
    _v2.x: int, 
    _v2.control_flag_old: int, 
    _v2.control_flag_: int, 
    _v2.result: int)
   : bool
{
  true
}

const {:existential true} _houdini_Eval_control_flag_0: bool;

const {:existential true} _houdini_Eval_result_1: bool;

procedure MS_Check__v1.Eval___v2.Eval(_v1.x: int, _v2.x: int) returns (_v1.result: int, _v2.result: int);
  modifies _v1.control_flag, _v2.control_flag;
  ensures MS$_v1.Eval$_v2.Eval(_v1.x, 
  old(_v1.control_flag), 
  _v1.control_flag, 
  _v1.result, 
  _v2.x, 
  old(_v2.control_flag), 
  _v2.control_flag, 
  _v2.result);
  ensures _houdini_Eval_control_flag_0
   ==> 
  old(_v1.control_flag == _v2.control_flag && _v1.x == _v2.x)
   ==> _v1.control_flag == _v2.control_flag;
  ensures _houdini_Eval_result_1 ==> old(_v1.x == _v2.x) ==> _v1.result == _v2.result;



implementation MS_Check__v1.Eval___v2.Eval(_v1.x: int, _v2.x: int) returns (_v1.result: int, _v2.result: int)
{
  var inline$_v1.Eval$0$x: int;
  var inline$_v1.Eval$0$x.1: int;
  var inline$_v1.Eval$0$result: int;
  var inline$_v1.Eval$0$_v1.control_flag: int;
  var inline$_v2.Eval$0$x: int;
  var inline$_v2.Eval$0$x.1: int;
  var inline$_v2.Eval$0$result: int;
  var inline$_v2.Eval$0$_v2.control_flag: int;
  var _v1.Eval_loop_anon3_LoopHead_1_done: bool;
  var _v1.Eval_loop_anon3_LoopHead_in_1_0: int;
  var _v1.Eval_loop_anon3_LoopHead_in_1_1: int;
  var _v1.Eval_loop_anon3_LoopHead_in_1_2: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_0: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_1: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_2: int;
  var _v2.Eval_loop_anon3_LoopHead_2_done: bool;
  var _v2.Eval_loop_anon3_LoopHead_in_2_0: int;
  var _v2.Eval_loop_anon3_LoopHead_in_2_1: int;
  var _v2.Eval_loop_anon3_LoopHead_in_2_2: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_0: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_1: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_2: int;
  var store__0__v1.control_flag: int;
  var store__0__v2.control_flag: int;
  var out__v1.Eval_loop_anon3_LoopHead_out_1_0_0: int;
  var out__v1.Eval_loop_anon3_LoopHead_out_1_1_0: int;
  var out__v2.Eval_loop_anon3_LoopHead_out_2_0_0: int;
  var out__v2.Eval_loop_anon3_LoopHead_out_2_1_0: int;

  START:
    _v1.Eval_loop_anon3_LoopHead_1_done, _v2.Eval_loop_anon3_LoopHead_2_done := false, false;
    goto inline$_v1.Eval$0$Entry;

  inline$_v1.Eval$0$Entry:
    inline$_v1.Eval$0$x.1 := _v1.x;
    havoc inline$_v1.Eval$0$x, inline$_v1.Eval$0$result;
    inline$_v1.Eval$0$_v1.control_flag := _v1.control_flag;
    goto inline$_v1.Eval$0$anon0;

  inline$_v1.Eval$0$anon0:
    inline$_v1.Eval$0$x := inline$_v1.Eval$0$x.1;
    inline$_v1.Eval$0$result := 0;
    _v1.control_flag := 0;
    goto inline$_v1.Eval$0$anon3_LoopHead;

  inline$_v1.Eval$0$anon3_LoopHead:
    _v1.Eval_loop_anon3_LoopHead_in_1_0, _v1.Eval_loop_anon3_LoopHead_in_1_1, _v1.Eval_loop_anon3_LoopHead_in_1_2 := inline$_v1.Eval$0$result, inline$_v1.Eval$0$x, _v1.control_flag;
    call inline$_v1.Eval$0$result, inline$_v1.Eval$0$x := _v1.Eval_loop_anon3_LoopHead(inline$_v1.Eval$0$result, inline$_v1.Eval$0$x);
    _v1.Eval_loop_anon3_LoopHead_1_done := true;
    _v1.Eval_loop_anon3_LoopHead_out_1_0, _v1.Eval_loop_anon3_LoopHead_out_1_1, _v1.Eval_loop_anon3_LoopHead_out_1_2 := inline$_v1.Eval$0$result, inline$_v1.Eval$0$x, _v1.control_flag;
    goto inline$_v1.Eval$0$anon3_LoopHead_last;

  inline$_v1.Eval$0$anon3_LoopHead_last:
    goto inline$_v1.Eval$0$anon3_LoopDone, inline$_v1.Eval$0$anon3_LoopBody;

  inline$_v1.Eval$0$anon3_LoopBody:
    assume {:partition} inline$_v1.Eval$0$x > 0;
    _v1.control_flag := _v2.control_UIF(_v1.control_flag, 1);
    inline$_v1.Eval$0$result := inline$_v1.Eval$0$result + inline$_v1.Eval$0$x;
    inline$_v1.Eval$0$x := inline$_v1.Eval$0$x - 1;
    goto inline$_v1.Eval$0$anon3_LoopBody_dummy;

  inline$_v1.Eval$0$anon3_LoopBody_dummy:
    assume false;
    goto inline$_v1.Eval$0$Return;

  inline$_v1.Eval$0$anon3_LoopDone:
    assume {:partition} 0 >= inline$_v1.Eval$0$x;
    goto inline$_v1.Eval$0$anon2;

  inline$_v1.Eval$0$anon2:
    _v1.control_flag := _v2.control_UIF(_v1.control_flag, 2);
    goto inline$_v1.Eval$0$Return;

  inline$_v1.Eval$0$Return:
    assume true;
    assume true;
    assume true;
    assume true;
    _v1.result := inline$_v1.Eval$0$result;
    goto START$1;

  START$1:
    goto inline$_v2.Eval$0$Entry;

  inline$_v2.Eval$0$Entry:
    inline$_v2.Eval$0$x.1 := _v2.x;
    havoc inline$_v2.Eval$0$x, inline$_v2.Eval$0$result;
    inline$_v2.Eval$0$_v2.control_flag := _v2.control_flag;
    goto inline$_v2.Eval$0$anon0;

  inline$_v2.Eval$0$anon0:
    inline$_v2.Eval$0$x := inline$_v2.Eval$0$x.1;
    inline$_v2.Eval$0$result := 0;
    _v2.control_flag := 0;
    goto inline$_v2.Eval$0$anon3_LoopHead;

  inline$_v2.Eval$0$anon3_LoopHead:
    _v2.Eval_loop_anon3_LoopHead_in_2_0, _v2.Eval_loop_anon3_LoopHead_in_2_1, _v2.Eval_loop_anon3_LoopHead_in_2_2 := inline$_v2.Eval$0$result, inline$_v2.Eval$0$x, _v2.control_flag;
    call inline$_v2.Eval$0$result, inline$_v2.Eval$0$x := _v2.Eval_loop_anon3_LoopHead(inline$_v2.Eval$0$result, inline$_v2.Eval$0$x);
    _v2.Eval_loop_anon3_LoopHead_2_done := true;
    _v2.Eval_loop_anon3_LoopHead_out_2_0, _v2.Eval_loop_anon3_LoopHead_out_2_1, _v2.Eval_loop_anon3_LoopHead_out_2_2 := inline$_v2.Eval$0$result, inline$_v2.Eval$0$x, _v2.control_flag;
    goto inline$_v2.Eval$0$anon3_LoopHead_last;

  inline$_v2.Eval$0$anon3_LoopHead_last:
    goto inline$_v2.Eval$0$anon3_LoopDone, inline$_v2.Eval$0$anon3_LoopBody;

  inline$_v2.Eval$0$anon3_LoopBody:
    assume {:partition} inline$_v2.Eval$0$x > 0;
    _v2.control_flag := _v2.control_UIF(_v2.control_flag, 1);
    inline$_v2.Eval$0$result := inline$_v2.Eval$0$result + inline$_v2.Eval$0$x;
    havoc inline$_v2.Eval$0$result;
    inline$_v2.Eval$0$x := inline$_v2.Eval$0$x - 1;
    goto inline$_v2.Eval$0$anon3_LoopBody_dummy;

  inline$_v2.Eval$0$anon3_LoopBody_dummy:
    assume false;
    goto inline$_v2.Eval$0$Return;

  inline$_v2.Eval$0$anon3_LoopDone:
    assume {:partition} 0 >= inline$_v2.Eval$0$x;
    goto inline$_v2.Eval$0$anon2;

  inline$_v2.Eval$0$anon2:
    _v2.control_flag := _v2.control_UIF(_v2.control_flag, 2);
    goto inline$_v2.Eval$0$Return;

  inline$_v2.Eval$0$Return:
    assume true;
    assume true;
    assume true;
    assume true;
    _v2.result := inline$_v2.Eval$0$result;
    goto START$2;

  START$2:
    goto MS_L_0_0;

  MS_L_0_0:
    goto MS_L_taken_0, MS_L_not_taken_0;

  MS_L_taken_0:
    assume _v1.Eval_loop_anon3_LoopHead_1_done && _v2.Eval_loop_anon3_LoopHead_2_done;
    store__0__v1.control_flag := _v1.control_flag;
    store__0__v2.control_flag := _v2.control_flag;
    _v1.control_flag := _v1.Eval_loop_anon3_LoopHead_in_1_2;
    _v2.control_flag := _v2.Eval_loop_anon3_LoopHead_in_2_2;
    call out__v1.Eval_loop_anon3_LoopHead_out_1_0_0, out__v1.Eval_loop_anon3_LoopHead_out_1_1_0, out__v2.Eval_loop_anon3_LoopHead_out_2_0_0, out__v2.Eval_loop_anon3_LoopHead_out_2_1_0 := MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead(_v1.Eval_loop_anon3_LoopHead_in_1_0, _v1.Eval_loop_anon3_LoopHead_in_1_1, _v2.Eval_loop_anon3_LoopHead_in_2_0, _v2.Eval_loop_anon3_LoopHead_in_2_1);
    assume _v1.control_flag == _v1.Eval_loop_anon3_LoopHead_out_1_2;
    assume _v2.control_flag == _v2.Eval_loop_anon3_LoopHead_out_2_2;
    assume _v1.Eval_loop_anon3_LoopHead_out_1_0
     == out__v1.Eval_loop_anon3_LoopHead_out_1_0_0
   && _v1.Eval_loop_anon3_LoopHead_out_1_1
     == out__v1.Eval_loop_anon3_LoopHead_out_1_1_0
   && _v2.Eval_loop_anon3_LoopHead_out_2_0
     == out__v2.Eval_loop_anon3_LoopHead_out_2_0_0
   && _v2.Eval_loop_anon3_LoopHead_out_2_1
     == out__v2.Eval_loop_anon3_LoopHead_out_2_1_0;
    _v1.control_flag := store__0__v1.control_flag;
    _v2.control_flag := store__0__v2.control_flag;
    goto MS_L_meet_0;

  MS_L_not_taken_0:
    assume !(_v1.Eval_loop_anon3_LoopHead_1_done && _v2.Eval_loop_anon3_LoopHead_2_done);
    goto MS_L_meet_0;

  MS_L_meet_0:
    return;
}



function {:inline true} MS$_v1.Eval_loop_anon3_LoopHead$_v2.Eval_loop_anon3_LoopHead(_v1.in_result: int, 
    _v1.in_x: int, 
    _v1.control_flag_old: int, 
    _v1.control_flag_: int, 
    _v1.out_result: int, 
    _v1.out_x: int, 
    _v2.in_result: int, 
    _v2.in_x: int, 
    _v2.control_flag_old: int, 
    _v2.control_flag_: int, 
    _v2.out_result: int, 
    _v2.out_x: int)
   : bool
{
  true
}

const {:existential true} _houdini_Eval_loop_anon3_LoopHead_control_flag_2: bool;

const {:existential true} _houdini_Eval_loop_anon3_LoopHead_out_result_3: bool;

const {:existential true} _houdini_Eval_loop_anon3_LoopHead_out_x_4: bool;

procedure MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead(_v1.in_result: int, _v1.in_x: int, _v2.in_result: int, _v2.in_x: int)
   returns (_v1.out_result: int, _v1.out_x: int, _v2.out_result: int, _v2.out_x: int);
  modifies _v1.control_flag, _v2.control_flag;
  ensures MS$_v1.Eval_loop_anon3_LoopHead$_v2.Eval_loop_anon3_LoopHead(_v1.in_result, 
  _v1.in_x, 
  old(_v1.control_flag), 
  _v1.control_flag, 
  _v1.out_result, 
  _v1.out_x, 
  _v2.in_result, 
  _v2.in_x, 
  old(_v2.control_flag), 
  _v2.control_flag, 
  _v2.out_result, 
  _v2.out_x);
  ensures _houdini_Eval_loop_anon3_LoopHead_control_flag_2
   ==> 
  old(_v1.control_flag == _v2.control_flag && _v1.in_x == _v2.in_x)
   ==> _v1.control_flag == _v2.control_flag;
  ensures _houdini_Eval_loop_anon3_LoopHead_out_result_3
   ==> 
  old(_v1.in_result == _v2.in_result && _v1.in_x == _v2.in_x)
   ==> _v1.out_result == _v2.out_result;
  ensures _houdini_Eval_loop_anon3_LoopHead_out_x_4
   ==> 
  old(_v1.in_x == _v2.in_x)
   ==> _v1.out_x == _v2.out_x;



implementation MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead(_v1.in_result: int, _v1.in_x: int, _v2.in_result: int, _v2.in_x: int)
   returns (_v1.out_result: int, _v1.out_x: int, _v2.out_result: int, _v2.out_x: int)
{
  var inline$_v1.Eval_loop_anon3_LoopHead$0$in_result: int;
  var inline$_v1.Eval_loop_anon3_LoopHead$0$in_x: int;
  var inline$_v1.Eval_loop_anon3_LoopHead$0$out_result: int;
  var inline$_v1.Eval_loop_anon3_LoopHead$0$out_x: int;
  var inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$in_result: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$in_x: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$out_result: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$out_x: int;
  var inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag: int;
  var _v1.Eval_loop_anon3_LoopHead_1_done: bool;
  var _v1.Eval_loop_anon3_LoopHead_in_1_0: int;
  var _v1.Eval_loop_anon3_LoopHead_in_1_1: int;
  var _v1.Eval_loop_anon3_LoopHead_in_1_2: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_0: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_1: int;
  var _v1.Eval_loop_anon3_LoopHead_out_1_2: int;
  var _v2.Eval_loop_anon3_LoopHead_2_done: bool;
  var _v2.Eval_loop_anon3_LoopHead_in_2_0: int;
  var _v2.Eval_loop_anon3_LoopHead_in_2_1: int;
  var _v2.Eval_loop_anon3_LoopHead_in_2_2: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_0: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_1: int;
  var _v2.Eval_loop_anon3_LoopHead_out_2_2: int;
  var store__0__v1.control_flag: int;
  var store__0__v2.control_flag: int;
  var out__v1.Eval_loop_anon3_LoopHead_out_1_0_0: int;
  var out__v1.Eval_loop_anon3_LoopHead_out_1_1_0: int;
  var out__v2.Eval_loop_anon3_LoopHead_out_2_0_0: int;
  var out__v2.Eval_loop_anon3_LoopHead_out_2_1_0: int;

  START:
    _v1.Eval_loop_anon3_LoopHead_1_done, _v2.Eval_loop_anon3_LoopHead_2_done := false, false;
    goto inline$_v1.Eval_loop_anon3_LoopHead$0$Entry;

  inline$_v1.Eval_loop_anon3_LoopHead$0$Entry:
    inline$_v1.Eval_loop_anon3_LoopHead$0$in_result := _v1.in_result;
    inline$_v1.Eval_loop_anon3_LoopHead$0$in_x := _v1.in_x;
    havoc inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x;
    inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag := _v1.control_flag;
    goto inline$_v1.Eval_loop_anon3_LoopHead$0$entry;

  inline$_v1.Eval_loop_anon3_LoopHead$0$entry:
    inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x := inline$_v1.Eval_loop_anon3_LoopHead$0$in_result, inline$_v1.Eval_loop_anon3_LoopHead$0$in_x;
    goto inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopHead;

  inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopHead:
    goto inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopDone, inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody;

  inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody:
    assume {:partition} inline$_v1.Eval_loop_anon3_LoopHead$0$out_x > 0;
    _v1.control_flag := _v2.control_UIF(_v1.control_flag, 1);
    inline$_v1.Eval_loop_anon3_LoopHead$0$out_result := inline$_v1.Eval_loop_anon3_LoopHead$0$out_result
   + inline$_v1.Eval_loop_anon3_LoopHead$0$out_x;
    inline$_v1.Eval_loop_anon3_LoopHead$0$out_x := inline$_v1.Eval_loop_anon3_LoopHead$0$out_x - 1;
    goto inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy;

  inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy:
    _v1.Eval_loop_anon3_LoopHead_in_1_0, _v1.Eval_loop_anon3_LoopHead_in_1_1, _v1.Eval_loop_anon3_LoopHead_in_1_2 := inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x, _v1.control_flag;
    call inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x := _v1.Eval_loop_anon3_LoopHead(inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x);
    _v1.Eval_loop_anon3_LoopHead_1_done := true;
    _v1.Eval_loop_anon3_LoopHead_out_1_0, _v1.Eval_loop_anon3_LoopHead_out_1_1, _v1.Eval_loop_anon3_LoopHead_out_1_2 := inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x, _v1.control_flag;
    goto inline$_v1.Eval_loop_anon3_LoopHead$0$Return;

  inline$_v1.Eval_loop_anon3_LoopHead$0$anon3_LoopDone:
    assume {:partition} 0 >= inline$_v1.Eval_loop_anon3_LoopHead$0$out_x;
    inline$_v1.Eval_loop_anon3_LoopHead$0$out_result, inline$_v1.Eval_loop_anon3_LoopHead$0$out_x := inline$_v1.Eval_loop_anon3_LoopHead$0$in_result, inline$_v1.Eval_loop_anon3_LoopHead$0$in_x;
    _v1.control_flag := inline$_v1.Eval_loop_anon3_LoopHead$0$_v1.control_flag;
    goto inline$_v1.Eval_loop_anon3_LoopHead$0$Return;

  inline$_v1.Eval_loop_anon3_LoopHead$0$Return:
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    _v1.out_result := inline$_v1.Eval_loop_anon3_LoopHead$0$out_result;
    _v1.out_x := inline$_v1.Eval_loop_anon3_LoopHead$0$out_x;
    goto START$1;

  START$1:
    goto inline$_v2.Eval_loop_anon3_LoopHead$0$Entry;

  inline$_v2.Eval_loop_anon3_LoopHead$0$Entry:
    inline$_v2.Eval_loop_anon3_LoopHead$0$in_result := _v2.in_result;
    inline$_v2.Eval_loop_anon3_LoopHead$0$in_x := _v2.in_x;
    havoc inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x;
    inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag := _v2.control_flag;
    goto inline$_v2.Eval_loop_anon3_LoopHead$0$entry;

  inline$_v2.Eval_loop_anon3_LoopHead$0$entry:
    inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x := inline$_v2.Eval_loop_anon3_LoopHead$0$in_result, inline$_v2.Eval_loop_anon3_LoopHead$0$in_x;
    goto inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopHead;

  inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopHead:
    goto inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopDone, inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody;

  inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody:
    assume {:partition} inline$_v2.Eval_loop_anon3_LoopHead$0$out_x > 0;
    _v2.control_flag := _v2.control_UIF(_v2.control_flag, 1);
    inline$_v2.Eval_loop_anon3_LoopHead$0$out_result := inline$_v2.Eval_loop_anon3_LoopHead$0$out_result
   + inline$_v2.Eval_loop_anon3_LoopHead$0$out_x;
    havoc inline$_v2.Eval_loop_anon3_LoopHead$0$out_result;
    inline$_v2.Eval_loop_anon3_LoopHead$0$out_x := inline$_v2.Eval_loop_anon3_LoopHead$0$out_x - 1;
    goto inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy;

  inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopBody_dummy:
    _v2.Eval_loop_anon3_LoopHead_in_2_0, _v2.Eval_loop_anon3_LoopHead_in_2_1, _v2.Eval_loop_anon3_LoopHead_in_2_2 := inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x, _v2.control_flag;
    call inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x := _v2.Eval_loop_anon3_LoopHead(inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x);
    _v2.Eval_loop_anon3_LoopHead_2_done := true;
    _v2.Eval_loop_anon3_LoopHead_out_2_0, _v2.Eval_loop_anon3_LoopHead_out_2_1, _v2.Eval_loop_anon3_LoopHead_out_2_2 := inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x, _v2.control_flag;
    goto inline$_v2.Eval_loop_anon3_LoopHead$0$Return;

  inline$_v2.Eval_loop_anon3_LoopHead$0$anon3_LoopDone:
    assume {:partition} 0 >= inline$_v2.Eval_loop_anon3_LoopHead$0$out_x;
    inline$_v2.Eval_loop_anon3_LoopHead$0$out_result, inline$_v2.Eval_loop_anon3_LoopHead$0$out_x := inline$_v2.Eval_loop_anon3_LoopHead$0$in_result, inline$_v2.Eval_loop_anon3_LoopHead$0$in_x;
    _v2.control_flag := inline$_v2.Eval_loop_anon3_LoopHead$0$_v2.control_flag;
    goto inline$_v2.Eval_loop_anon3_LoopHead$0$Return;

  inline$_v2.Eval_loop_anon3_LoopHead$0$Return:
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    _v2.out_result := inline$_v2.Eval_loop_anon3_LoopHead$0$out_result;
    _v2.out_x := inline$_v2.Eval_loop_anon3_LoopHead$0$out_x;
    goto START$2;

  START$2:
    goto MS_L_0_0;

  MS_L_0_0:
    goto MS_L_taken_0, MS_L_not_taken_0;

  MS_L_taken_0:
    assume _v1.Eval_loop_anon3_LoopHead_1_done && _v2.Eval_loop_anon3_LoopHead_2_done;
    store__0__v1.control_flag := _v1.control_flag;
    store__0__v2.control_flag := _v2.control_flag;
    _v1.control_flag := _v1.Eval_loop_anon3_LoopHead_in_1_2;
    _v2.control_flag := _v2.Eval_loop_anon3_LoopHead_in_2_2;
    call out__v1.Eval_loop_anon3_LoopHead_out_1_0_0, out__v1.Eval_loop_anon3_LoopHead_out_1_1_0, out__v2.Eval_loop_anon3_LoopHead_out_2_0_0, out__v2.Eval_loop_anon3_LoopHead_out_2_1_0 := MS_Check__v1.Eval_loop_anon3_LoopHead___v2.Eval_loop_anon3_LoopHead(_v1.Eval_loop_anon3_LoopHead_in_1_0, _v1.Eval_loop_anon3_LoopHead_in_1_1, _v2.Eval_loop_anon3_LoopHead_in_2_0, _v2.Eval_loop_anon3_LoopHead_in_2_1);
    assume _v1.control_flag == _v1.Eval_loop_anon3_LoopHead_out_1_2;
    assume _v2.control_flag == _v2.Eval_loop_anon3_LoopHead_out_2_2;
    assume _v1.Eval_loop_anon3_LoopHead_out_1_0
     == out__v1.Eval_loop_anon3_LoopHead_out_1_0_0
   && _v1.Eval_loop_anon3_LoopHead_out_1_1
     == out__v1.Eval_loop_anon3_LoopHead_out_1_1_0
   && _v2.Eval_loop_anon3_LoopHead_out_2_0
     == out__v2.Eval_loop_anon3_LoopHead_out_2_0_0
   && _v2.Eval_loop_anon3_LoopHead_out_2_1
     == out__v2.Eval_loop_anon3_LoopHead_out_2_1_0;
    _v1.control_flag := store__0__v1.control_flag;
    _v2.control_flag := store__0__v2.control_flag;
    goto MS_L_meet_0;

  MS_L_not_taken_0:
    assume !(_v1.Eval_loop_anon3_LoopHead_1_done && _v2.Eval_loop_anon3_LoopHead_2_done);
    goto MS_L_meet_0;

  MS_L_meet_0:
    return;
}
