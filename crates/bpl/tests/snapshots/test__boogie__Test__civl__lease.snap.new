---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "me",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "X",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "lockMsg",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "transfer",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "epoch",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "lockMsg",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "locked",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "epoch",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "lockMsg",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "msg",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "msg",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "src",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "dst",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "payload",
                    ),
                    type_: App(
                        TypeApp {
                            head: "lockMsg",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "msg",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "node",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "node",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "held",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "epoch",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "node",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "network",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "msg",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "external",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "msg",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "2",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "nodes",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "node",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "history",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "history",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "len",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "locks",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "history",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "1",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "history",
                        ],
                        type_: App(
                            TypeApp {
                                head: "history",
                                tail: None,
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "addHistory",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "h",
                    ),
                    type_: App(
                        TypeApp {
                            head: "history",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "l",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "history",
                        tail: None,
                    },
                ),
            },
            body: Some(
                FuncCall(
                    FuncCall {
                        target: "history",
                        args: [
                            Term(
                                Term {
                                    lhs: FuncCall(
                                        FuncCall {
                                            target: "len#history",
                                            args: [
                                                Var(
                                                    "h",
                                                ),
                                            ],
                                        },
                                    ),
                                    op: Add,
                                    rhs: Nat(
                                        "1",
                                    ),
                                },
                            ),
                            Array(
                                ArrayExpr {
                                    expr: FuncCall(
                                        FuncCall {
                                            target: "locks#history",
                                            args: [
                                                Var(
                                                    "h",
                                                ),
                                            ],
                                        },
                                    ),
                                    subscripts: [
                                        ArraySubscript {
                                            keys: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "len#history",
                                                        args: [
                                                            Var(
                                                                "h",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            value: Some(
                                                Var(
                                                    "l",
                                                ),
                                            ),
                                        },
                                    ],
                                },
                            ),
                        ],
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "nextNode",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "me",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicGetNode",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "node",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "n",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "nodes",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "me",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicGetNode",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "GetNode",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "node",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicSetNode",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "node",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "nodes",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "nodes",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "nodes",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "me",
                                                            ),
                                                        ],
                                                        value: Some(
                                                            Var(
                                                                "n",
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicSetNode",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SetNode",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "n",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "node",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "right",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicRecv",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "msg",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "network",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "m",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "dst#msg",
                                                            args: [
                                                                Var(
                                                                    "m",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "me",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicRecv",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Recv",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "m",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "msg",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicSendInternal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "dst",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "payload",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lockMsg",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "network",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "network",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "network",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "msg",
                                                                    args: [
                                                                        Var(
                                                                            "me",
                                                                        ),
                                                                        Var(
                                                                            "dst",
                                                                        ),
                                                                        Var(
                                                                            "payload",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                true,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicSendInternal",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SendInternal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "dst",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "payload",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lockMsg",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicSendExternal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "dst",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "payload",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lockMsg",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "network",
                            "external",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "network",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "network",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "msg",
                                                                    args: [
                                                                        Var(
                                                                            "me",
                                                                        ),
                                                                        Var(
                                                                            "dst",
                                                                        ),
                                                                        Var(
                                                                            "payload",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                true,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "external",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "external",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "msg",
                                                                    args: [
                                                                        Var(
                                                                            "me",
                                                                        ),
                                                                        Var(
                                                                            "dst",
                                                                        ),
                                                                        Var(
                                                                            "payload",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                true,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicSendExternal",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SendExternal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "dst",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "payload",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "lockMsg",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicAddHistory",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "history",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "history",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "addHistory",
                                                args: [
                                                    Var(
                                                        "history",
                                                    ),
                                                    Var(
                                                        "l",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicAddHistory",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AddHistory",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "l",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "EpochInHistory",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "epoch",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "history",
                    ),
                    type_: App(
                        TypeApp {
                            head: "history",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "0",
                                ),
                                op: Le,
                                rhs: Var(
                                    "epoch",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "epoch",
                                ),
                                op: Lt,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "len#history",
                                        args: [
                                            Var(
                                                "history",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "IsFreshTransfer",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "network",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "msg",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "nodes",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "node",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "m",
                    ),
                    type_: App(
                        TypeApp {
                            head: "msg",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "network",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "m",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                op: And,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "is#transfer",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "payload#msg",
                                                    args: [
                                                        Var(
                                                            "m",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "epoch#transfer",
                                        args: [
                                            FuncCall(
                                                FuncCall {
                                                    target: "payload#msg",
                                                    args: [
                                                        Var(
                                                            "m",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                op: Gt,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "epoch#node",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "nodes",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "dst#msg",
                                                                        args: [
                                                                            Var(
                                                                                "m",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "InvMsg",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "network",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "msg",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "nodes",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "node",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "history",
                    ),
                    type_: App(
                        TypeApp {
                            head: "history",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "m",
                    ),
                    type_: App(
                        TypeApp {
                            head: "msg",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Implies(
                    ImpliesExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "is#transfer",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "payload#msg",
                                            args: [
                                                Var(
                                                    "m",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        rhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "EpochInHistory",
                                                args: [
                                                    Term(
                                                        Term {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "epoch#transfer",
                                                                    args: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "payload#msg",
                                                                                args: [
                                                                                    Var(
                                                                                        "m",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Sub,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                    Var(
                                                        "history",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "dst#msg",
                                                        args: [
                                                            Var(
                                                                "m",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Array(
                                                    ArrayExpr {
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "locks#history",
                                                                args: [
                                                                    Var(
                                                                        "history",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Term(
                                                                        Term {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "epoch#transfer",
                                                                                    args: [
                                                                                        FuncCall(
                                                                                            FuncCall {
                                                                                                target: "payload#msg",
                                                                                                args: [
                                                                                                    Var(
                                                                                                        "m",
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Sub,
                                                                            rhs: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "IsFreshTransfer",
                                                args: [
                                                    Var(
                                                        "network",
                                                    ),
                                                    Var(
                                                        "nodes",
                                                    ),
                                                    Var(
                                                        "m",
                                                    ),
                                                ],
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "len#history",
                                                        args: [
                                                            Var(
                                                                "history",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "epoch#transfer",
                                                        args: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "payload#msg",
                                                                    args: [
                                                                        Var(
                                                                            "m",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "InvNode",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "history",
                    ),
                    type_: App(
                        TypeApp {
                            head: "history",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "n",
                    ),
                    type_: App(
                        TypeApp {
                            head: "node",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Implies(
                    ImpliesExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "held#node",
                                args: [
                                    Var(
                                        "n",
                                    ),
                                ],
                            },
                        ),
                        rhs: Rel(
                            RelExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "len#history",
                                        args: [
                                            Var(
                                                "history",
                                            ),
                                        ],
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "epoch#node",
                                        args: [
                                            Var(
                                                "n",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Inv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "network",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "msg",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "nodes",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: App(
                                TypeApp {
                                    head: "node",
                                    tail: None,
                                },
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "history",
                    ),
                    type_: App(
                        TypeApp {
                            head: "history",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Nat(
                                                                    "0",
                                                                ),
                                                                op: Le,
                                                                rhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "len#history",
                                                                        args: [
                                                                            Var(
                                                                                "history",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Quant(
                                                            QuantExpr {
                                                                kind: ForAll,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "i",
                                                                                    ],
                                                                                    type_: Atom(
                                                                                        Int,
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: FuncCall(
                                                                        FuncCall {
                                                                            target: "InvNode",
                                                                            args: [
                                                                                Var(
                                                                                    "history",
                                                                                ),
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "nodes",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "i",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: ForAll,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "i1",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "i2",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Implies(
                                                                ImpliesExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "held#node",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "nodes",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "i1",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "held#node",
                                                                                    args: [
                                                                                        Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "nodes",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "i2",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "i1",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "i2",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: ForAll,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "i1",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "m2",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "msg",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Implies(
                                                        ImpliesExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "held#node",
                                                                            args: [
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "nodes",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "i1",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "IsFreshTransfer",
                                                                            args: [
                                                                                Var(
                                                                                    "network",
                                                                                ),
                                                                                Var(
                                                                                    "nodes",
                                                                                ),
                                                                                Var(
                                                                                    "m2",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: BoolLit(
                                                                false,
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "m1",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "msg",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "m2",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "msg",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "IsFreshTransfer",
                                                                    args: [
                                                                        Var(
                                                                            "network",
                                                                        ),
                                                                        Var(
                                                                            "nodes",
                                                                        ),
                                                                        Var(
                                                                            "m1",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "IsFreshTransfer",
                                                                    args: [
                                                                        Var(
                                                                            "network",
                                                                        ),
                                                                        Var(
                                                                            "nodes",
                                                                        ),
                                                                        Var(
                                                                            "m2",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "m1",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "m2",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "m",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "msg",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "network",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "m",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "InvMsg",
                                                    args: [
                                                        Var(
                                                            "network",
                                                        ),
                                                        Var(
                                                            "nodes",
                                                        ),
                                                        Var(
                                                            "history",
                                                        ),
                                                        Var(
                                                            "m",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicGrant",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "dst",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "epoch",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "history",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "history",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "addHistory",
                                                args: [
                                                    Var(
                                                        "history",
                                                    ),
                                                    Var(
                                                        "dst",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicGrant",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Grant",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "dst",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "epoch",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "2",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "held#node",
                                args: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "nodes",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "me",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "2",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Inv",
                                args: [
                                    Var(
                                        "network",
                                    ),
                                    Var(
                                        "nodes",
                                    ),
                                    Var(
                                        "history",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "2",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Inv",
                                args: [
                                    Var(
                                        "network",
                                    ),
                                    Var(
                                        "nodes",
                                    ),
                                    Var(
                                        "history",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "node",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "node",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "node",
                                        ],
                                        target: "GetNode",
                                        params: [
                                            Var(
                                                "me",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "dst",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "nextNode",
                                                args: [
                                                    Var(
                                                        "me",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "epoch",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "epoch#node",
                                                args: [
                                                    Var(
                                                        "node",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "AddHistory",
                                        params: [
                                            Var(
                                                "dst",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "SetNode",
                                        params: [
                                            Var(
                                                "me",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "node",
                                                    args: [
                                                        BoolLit(
                                                            false,
                                                        ),
                                                        Var(
                                                            "epoch",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "SendInternal",
                                        params: [
                                            Var(
                                                "me",
                                            ),
                                            Var(
                                                "dst",
                                            ),
                                            FuncCall(
                                                FuncCall {
                                                    target: "transfer",
                                                    args: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "epoch",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AtomicAccept",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "dst",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "epoch",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "external",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "EpochInHistory",
                                            args: [
                                                Term(
                                                    Term {
                                                        lhs: Var(
                                                            "epoch",
                                                        ),
                                                        op: Sub,
                                                        rhs: Nat(
                                                            "1",
                                                        ),
                                                    },
                                                ),
                                                Var(
                                                    "history",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "me",
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "locks#history",
                                                            args: [
                                                                Var(
                                                                    "history",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Var(
                                                                            "epoch",
                                                                        ),
                                                                        op: Sub,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "external",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "external",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            FuncCall(
                                                                FuncCall {
                                                                    target: "msg",
                                                                    args: [
                                                                        Var(
                                                                            "me",
                                                                        ),
                                                                        Var(
                                                                            "dst",
                                                                        ),
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "locked",
                                                                                args: [
                                                                                    Var(
                                                                                        "epoch",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                true,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "2",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "AtomicAccept",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Accept",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "me",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "me",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "dst",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "epoch",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "2",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Inv",
                                args: [
                                    Var(
                                        "network",
                                    ),
                                    Var(
                                        "nodes",
                                    ),
                                    Var(
                                        "history",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "2",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Inv",
                                args: [
                                    Var(
                                        "network",
                                    ),
                                    Var(
                                        "nodes",
                                    ),
                                    Var(
                                        "history",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "node",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "node",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "m",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "msg",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "yields",
                                                        params: [],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "2",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "2",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Inv",
                                                    args: [
                                                        Var(
                                                            "network",
                                                        ),
                                                        Var(
                                                            "nodes",
                                                        ),
                                                        Var(
                                                            "history",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "m",
                                                        ],
                                                        target: "Recv",
                                                        params: [
                                                            Var(
                                                                "me",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "node",
                                                        ],
                                                        target: "GetNode",
                                                        params: [
                                                            Var(
                                                                "me",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "epoch",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "epoch#transfer",
                                                                args: [
                                                                    FuncCall(
                                                                        FuncCall {
                                                                            target: "payload#msg",
                                                                            args: [
                                                                                Var(
                                                                                    "m",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Logical(
                                                            LogicalExpr {
                                                                lhs: FuncCall(
                                                                    FuncCall {
                                                                        target: "is#transfer",
                                                                        args: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "payload#msg",
                                                                                    args: [
                                                                                        Var(
                                                                                            "m",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "epoch",
                                                                        ),
                                                                        op: Gt,
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "epoch#node",
                                                                                args: [
                                                                                    Var(
                                                                                        "node",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [],
                                                                        target: "SetNode",
                                                                        params: [
                                                                            Var(
                                                                                "me",
                                                                            ),
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "node",
                                                                                    args: [
                                                                                        BoolLit(
                                                                                            true,
                                                                                        ),
                                                                                        Var(
                                                                                            "epoch",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [],
                                                                        target: "SendExternal",
                                                                        params: [
                                                                            Var(
                                                                                "me",
                                                                            ),
                                                                            Var(
                                                                                "dst",
                                                                            ),
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "locked",
                                                                                    args: [
                                                                                        Var(
                                                                                            "epoch",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "CheckInitInv",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "network",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "msg",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "nodes",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: App(
                                            TypeApp {
                                                head: "node",
                                                tail: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "history",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "history",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "network",
                                ),
                                op: Eq,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "m",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "msg",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: BoolLit(
                                                false,
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "nodes",
                                ),
                                op: Eq,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "i",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "node",
                                                    args: [
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Eq,
                                                                rhs: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                        IfThenElse(
                                                            IfThenElseExpr {
                                                                cond: Rel(
                                                                    RelExpr {
                                                                        lhs: Var(
                                                                            "i",
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Nat(
                                                                            "0",
                                                                        ),
                                                                    },
                                                                ),
                                                                then: Nat(
                                                                    "1",
                                                                ),
                                                                else_: Nat(
                                                                    "0",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Rel(
                            RelExpr {
                                lhs: Var(
                                    "history",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "history",
                                        args: [
                                            Nat(
                                                "1",
                                            ),
                                            Quant(
                                                QuantExpr {
                                                    kind: Lambda,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "i",
                                                                        ],
                                                                        type_: Atom(
                                                                            Int,
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: Nat(
                                                            "0",
                                                        ),
                                                    },
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Inv",
                                args: [
                                    Var(
                                        "network",
                                    ),
                                    Var(
                                        "nodes",
                                    ),
                                    Var(
                                        "history",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [],
                },
            ),
        },
    ),
]

[Printed]
type {:linear "me"} X = int;

type {:datatype} lockMsg;

function {:constructor} transfer(epoch: int): lockMsg;

function {:constructor} locked(epoch: int): lockMsg;

type {:datatype} msg;

function {:constructor} msg(src: int, dst: int, payload: lockMsg): msg;

type {:datatype} node;

function {:constructor} node(held: bool, epoch: int): node;

var {:layer 1, 2} network: [msg]bool;

var {:layer 1, 3} external: [msg]bool;

var {:layer 1, 2} nodes: [int]node;

type {:datatype} history;

function {:constructor} history(len: int, locks: [int]int): history;

var {:layer 1, 3} history: history;

function addHistory(h: history, l: int): history {
  history(len#history(h) + 1, locks#history(h)[len#history(h) := l])
}

function nextNode(me: int): int;

procedure {:both} {:layer 2} AtomicGetNode({:linear "me"} me: int) returns (n: node) {
  n := nodes[me];
}

procedure {:yields} {:layer 1} {:refines "AtomicGetNode"} GetNode({:linear "me"} me: int) returns (n: node);

procedure {:both} {:layer 2} AtomicSetNode({:linear "me"} me: int, n: node)
  modifies nodes;
{
  nodes := nodes[me := n];
}

procedure {:yields} {:layer 1} {:refines "AtomicSetNode"} SetNode({:linear "me"} me: int, n: node);

procedure {:right} {:layer 2} AtomicRecv({:linear "me"} me: int) returns (m: msg) {
  assume network[m] && dst#msg(m) == me;
}

procedure {:yields} {:layer 1} {:refines "AtomicRecv"} Recv({:linear "me"} me: int) returns (m: msg);

procedure {:left} {:layer 2} AtomicSendInternal({:linear "me"} me: int, dst: int, payload: lockMsg)
  modifies network;
{
  network := network[msg(me, dst, payload) := true];
}

procedure {:yields} {:layer 1} {:refines "AtomicSendInternal"} SendInternal({:linear "me"} me: int, dst: int, payload: lockMsg);

procedure {:left} {:layer 2} AtomicSendExternal({:linear "me"} me: int, dst: int, payload: lockMsg)
  modifies network, external;
{
  network := network[msg(me, dst, payload) := true];
  external := external[msg(me, dst, payload) := true];
}

procedure {:yields} {:layer 1} {:refines "AtomicSendExternal"} SendExternal({:linear "me"} me: int, dst: int, payload: lockMsg);

procedure {:atomic} {:layer 2} AtomicAddHistory(l: int)
  modifies history;
{
  history := addHistory(history, l);
}

procedure {:yields} {:layer 1} {:refines "AtomicAddHistory"} AddHistory(l: int);

function EpochInHistory(epoch: int, history: history): bool {
  0 <= epoch && epoch < len#history(history)
}

function {:inline} IsFreshTransfer(network: [msg]bool, nodes: [int]node, m: msg): bool {
  network[m] && is#transfer(payload#msg(m)) && epoch#transfer(payload#msg(m)) > epoch#node(nodes[dst#msg(m)])
}

function InvMsg(network: [msg]bool, nodes: [int]node, history: history, m: msg): bool {
  is#transfer(payload#msg(m)) ==> EpochInHistory(epoch#transfer(payload#msg(m)) - 1, history) && dst#msg(m) == locks#history(history)[epoch#transfer(payload#msg(m)) - 1] && (IsFreshTransfer(network, nodes, m) ==> len#history(history) == epoch#transfer(payload#msg(m)))
}

function InvNode(history: history, n: node): bool {
  held#node(n) ==> len#history(history) == epoch#node(n)
}

function Inv(network: [msg]bool, nodes: [int]node, history: history): bool {
  0 <= len#history(history) && (forall i: int :: InvNode(history, nodes[i])) && (forall i1: int, i2: int :: held#node(nodes[i1]) && held#node(nodes[i2]) ==> i1 == i2) && (forall i1: int, m2: msg :: held#node(nodes[i1]) && IsFreshTransfer(network, nodes, m2) ==> false) && (forall m1: msg, m2: msg :: IsFreshTransfer(network, nodes, m1) && IsFreshTransfer(network, nodes, m2) ==> m1 == m2) && (forall m: msg :: network[m] ==> InvMsg(network, nodes, history, m))
}

procedure {:atomic} {:layer 3} AtomicGrant({:linear "me"} me: int) returns (dst: int, epoch: int)
  modifies history;
{
  history := addHistory(history, dst);
}

procedure {:yields} {:layer 2} {:refines "AtomicGrant"} Grant({:linear "me"} me: int) returns (dst: int, epoch: int)
  requires {:layer 2} held#node(nodes[me]);
  requires {:layer 2} Inv(network, nodes, history);
  ensures {:layer 2} Inv(network, nodes, history);
{
  var node: node;

  call node := GetNode(me);
  dst := nextNode(me);
  epoch := epoch#node(node);
  call AddHistory(dst);
  call SetNode(me, node(false, epoch));
  call SendInternal(me, dst, transfer(epoch + 1));
}

procedure {:atomic} {:layer 3} AtomicAccept({:linear "me"} me: int, dst: int) returns (epoch: int)
  modifies external;
{
  assume EpochInHistory(epoch - 1, history);
  assume me == locks#history(history)[epoch - 1];
  external := external[msg(me, dst, locked(epoch)) := true];
}

procedure {:yields} {:layer 2} {:refines "AtomicAccept"} Accept({:linear "me"} me: int, dst: int) returns (epoch: int)
  requires {:layer 2} Inv(network, nodes, history);
  ensures {:layer 2} Inv(network, nodes, history);
{
  var node: node;
  var m: msg;

  while (true)
    invariant {:yields} {:layer 2} true;
    invariant {:layer 2} Inv(network, nodes, history);
  {
    call m := Recv(me);
    call node := GetNode(me);
    epoch := epoch#transfer(payload#msg(m));
    if (is#transfer(payload#msg(m)) && epoch > epoch#node(node)) {
      call SetNode(me, node(true, epoch));
      call SendExternal(me, dst, locked(epoch));
      return;
    }
  }
}

procedure CheckInitInv(network: [msg]bool, nodes: [int]node, history: history)
  requires network == (lambda m: msg :: false);
  requires nodes == (lambda i: int :: node(i == 0, if i == 0 then 1 else 0));
  requires history == history(1, (lambda i: int :: 0));
  ensures Inv(network, nodes, history);
{
}

[Input - ../../vendor/boogie/Test/civl/lease.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

type {:linear "me"} X = int;
// datatype lockMsg = transfer(epoch:int) | locked(epoch:int)
type{:datatype} lockMsg;
function{:constructor} transfer(epoch:int):lockMsg;
function{:constructor} locked(epoch:int):lockMsg;

// datatype msg = msg(src:int, dst:int, payload:lockMsg)
type{:datatype} msg;
function{:constructor} msg(src:int, dst:int, payload:lockMsg):msg;

// datatype node = node(held:bool, epoch:int)
type{:datatype} node;
function{:constructor} node(held:bool, epoch:int):node;

// var network:set<msg>
var{:layer 1,2} network:[msg]bool;

// var external:set<msg>
var{:layer 1,3} external:[msg]bool;

// var nodes:imap<int, node>
var{:layer 1,2} nodes:[int]node;

// datatype history = history(len:int, locks:[int]int)
type{:datatype} history;
function{:constructor} history(len:int, locks:[int]int):history;

var{:layer 1,3} history:history;

function addHistory(h:history, l:int):history
{
  history(len#history(h) + 1, locks#history(h)[len#history(h) := l])
}

function nextNode(me:int):int;


////// primitive actions //////

procedure{:both}{:layer 2} AtomicGetNode({:linear "me"} me:int) returns(n:node)
{
        n := nodes[me];
}

procedure{:yields}{:layer 1} {:refines "AtomicGetNode"} GetNode({:linear "me"} me:int) returns(n:node);

procedure{:both}{:layer 2} AtomicSetNode({:linear "me"} me:int, n:node)
modifies nodes;
{
        nodes := nodes[me := n];
}

procedure{:yields}{:layer 1} {:refines "AtomicSetNode"} SetNode({:linear "me"} me:int, n:node);

procedure{:right}{:layer 2} AtomicRecv({:linear "me"} me:int) returns(m:msg)
{
        assume network[m] && dst#msg(m) == me;
}

procedure{:yields}{:layer 1} {:refines "AtomicRecv"} Recv({:linear "me"} me:int) returns(m:msg);

procedure{:left}{:layer 2} AtomicSendInternal({:linear "me"} me:int, dst:int, payload:lockMsg)
modifies network;
{
        network := network[msg(me, dst, payload) := true];
}

procedure{:yields}{:layer 1} {:refines "AtomicSendInternal"} SendInternal({:linear "me"} me:int, dst:int, payload:lockMsg);

procedure{:left}{:layer 2} AtomicSendExternal({:linear "me"} me:int, dst:int, payload:lockMsg)
modifies network, external;
{
        network  := network [msg(me, dst, payload) := true];
        external := external[msg(me, dst, payload) := true];
}

procedure{:yields}{:layer 1} {:refines "AtomicSendExternal"} SendExternal({:linear "me"} me:int, dst:int, payload:lockMsg);

procedure{:atomic}{:layer 2} AtomicAddHistory(l:int)
modifies history;
{
        history  := addHistory(history, l);
}

procedure{:yields}{:layer 1} {:refines "AtomicAddHistory"} AddHistory(l:int);
////// composite actions //////

function EpochInHistory(epoch:int, history:history):bool
{
  0 <= epoch && epoch < len#history(history)
}

function{:inline} IsFreshTransfer(network:[msg]bool, nodes:[int]node, m:msg):bool
{
  network[m] && is#transfer(payload#msg(m)) && epoch#transfer(payload#msg(m)) > epoch#node(nodes[dst#msg(m)])
}

function InvMsg(network:[msg]bool, nodes:[int]node, history:history, m:msg):bool
{
  is#transfer(payload#msg(m)) ==>
      EpochInHistory(epoch#transfer(payload#msg(m)) - 1, history)
   && dst#msg(m) == locks#history(history)[epoch#transfer(payload#msg(m)) - 1]
   && (IsFreshTransfer(network, nodes, m) ==> len#history(history) == epoch#transfer(payload#msg(m)))
}

function InvNode(history:history, n:node):bool
{
  held#node(n) ==> len#history(history) == epoch#node(n)
}

function Inv(network:[msg]bool, nodes:[int]node, history:history):bool
{
    0 <= len#history(history)
&& (forall i:int :: InvNode(history, nodes[i]))
&& (forall i1:int, i2:int :: held#node(nodes[i1]) && held#node(nodes[i2]) ==> i1 == i2)
&& (forall i1:int, m2:msg :: held#node(nodes[i1]) && IsFreshTransfer(network, nodes, m2) ==> false)
&& (forall m1:msg, m2:msg :: IsFreshTransfer(network, nodes, m1) && IsFreshTransfer(network, nodes, m2) ==> m1 == m2)
&& (forall m:msg :: network[m] ==> InvMsg(network, nodes, history, m))
}

procedure{:atomic}{:layer 3} AtomicGrant({:linear "me"} me:int) returns(dst:int, epoch:int)
modifies history;
{
        history := addHistory(history, dst);
}

procedure{:yields}{:layer 2} {:refines "AtomicGrant"} Grant({:linear "me"} me:int) returns(dst:int, epoch:int)
  requires{:layer 2} held#node(nodes[me]);
  requires{:layer 2} Inv(network, nodes, history);
  ensures {:layer 2} Inv(network, nodes, history);
{
  var node:node;

  call node := GetNode(me);
  dst := nextNode(me);
  epoch := epoch#node(node);
  call AddHistory(dst);
  call SetNode(me, node(false, epoch));
  call SendInternal(me, dst, transfer(epoch + 1));
}

procedure{:atomic}{:layer 3} AtomicAccept({:linear "me"} me:int, dst:int) returns(epoch:int)
modifies external;
{
        // specify that the message source (me) must appear at right epoch in history:
        assume EpochInHistory(epoch - 1, history);
        assume me == locks#history(history)[epoch - 1];

        external := external[msg(me, dst, locked(epoch)) := true];
}

procedure{:yields}{:layer 2} {:refines "AtomicAccept"} Accept({:linear "me"} me:int, dst:int) returns(epoch:int)
  requires{:layer 2} Inv(network, nodes, history);
  ensures {:layer 2} Inv(network, nodes, history);
{
  var node:node;
  var m:msg;

  while (true)
    invariant {:yields} {:layer 2} true;
    invariant {:layer 2} Inv(network, nodes, history);
  {
    call m := Recv(me);
    call node := GetNode(me);
    epoch := epoch#transfer(payload#msg(m));

    if (is#transfer(payload#msg(m)) && epoch > epoch#node(node))
    {
      call SetNode(me, node(true, epoch));
      call SendExternal(me, dst, locked(epoch));
      return;
    }
  }
}

procedure CheckInitInv(network:[msg]bool, nodes:[int]node, history:history)
  requires network == (lambda m:msg :: false);
  requires nodes == (lambda i:int :: node(i == 0, if i == 0 then 1 else 0));
  requires history == history(1, (lambda i:int :: 0));
 ensures  Inv(network, nodes, history);
{
}
