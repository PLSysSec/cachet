---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "elements",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Field",
                    type_params: [
                        "a",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "heap",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [
                                    "a",
                                ],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "Field",
                                            tail: Some(
                                                App(
                                                    TypeApp {
                                                        head: "a",
                                                        tail: None,
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "a",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "p",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "x",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "z",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [
                                            "a",
                                        ],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "Field",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "a",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        value: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "newHeap",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [
                                            "a",
                                        ],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "ref",
                                                    tail: None,
                                                },
                                            ),
                                            App(
                                                TypeApp {
                                                    head: "Field",
                                                    tail: Some(
                                                        App(
                                                            TypeApp {
                                                                head: "a",
                                                                tail: None,
                                                            },
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        value: App(
                                            TypeApp {
                                                head: "a",
                                                tail: None,
                                            },
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "f",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Field",
                                                tail: Some(
                                                    AtomApp(
                                                        TypeApp {
                                                            head: Int,
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "g",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Field",
                                                tail: Some(
                                                    AtomApp(
                                                        TypeApp {
                                                            head: Bool,
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "heap",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [
                                                    "a",
                                                ],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                    App(
                                                        TypeApp {
                                                            head: "Field",
                                                            tail: Some(
                                                                App(
                                                                    TypeApp {
                                                                        head: "a",
                                                                        tail: None,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                value: App(
                                                    TypeApp {
                                                        head: "a",
                                                        tail: None,
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "z",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "y",
                                                                ),
                                                                Var(
                                                                    "f",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "z",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "x",
                                                                ),
                                                                Var(
                                                                    "f",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "z",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "y",
                                                                ),
                                                                Var(
                                                                    "x",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "z",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "y",
                                                                ),
                                                                Var(
                                                                    "g",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Ge,
                                            rhs: Nat(
                                                "0",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "heap",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "y",
                                                    ),
                                                    Var(
                                                        "g",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
]

[Printed]
type elements;

type Field a;

var heap: <a>[ref, Field a]a;

procedure p(x: int, y: ref, z: <a>[ref, Field a]a) returns (newHeap: <a>[ref, Field a]a) {
  var f: Field int;
  var g: Field bool;
  var heap: <a>[ref, Field a]a;

  assert z[y, f] >= 0;
  assert z[x, f] >= 0;
  assert z[y, x] >= 0;
  assert z[y, g] >= 0;
  heap[y, g] := false;
}

type ref;

[Input - ../../vendor/boogie/Test/test20/Prog1.bpl]
// RUN: %boogie -noVerify "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
// Let's test some Boogie 2 features ...

type elements;

type Field a;
var heap : <a> [ref, Field a] a;



procedure p (x:int, y:ref, z:<a> [ref, Field a] a) returns (newHeap : <a> [ref, Field a] a) {

  var f : Field int;
  var g : Field bool;

  var heap : <a> [ref, Field a] a;
  
  assert z[y, f] >= 0;
  assert z[x, f] >= 0;   // error: x has wrong type
  assert z[y, x] >= 0;   // error: x has wrong type
  assert z[y, g] >= 0;   // error: result of map select has wrong type

  heap[y, g] := false;

}

type ref;
