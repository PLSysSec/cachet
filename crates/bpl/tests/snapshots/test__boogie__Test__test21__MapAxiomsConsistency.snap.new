---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "ref",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "null",
                ],
                type_: App(
                    TypeApp {
                        head: "ref",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Set",
                    type_params: [
                        "T",
                    ],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "T",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Empty",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Singleton",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#UnionOne",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Union",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Intersection",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Difference",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Set",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Subset",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Equal",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Set#Disjoint",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Set",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Seq",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Length",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Empty",
            type_params: [
                "T",
            ],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Singleton",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Build",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "index",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "val",
                    ),
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "newLength",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Append",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Index",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "T",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Contains",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "T",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Equal",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#SameUntil",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Take",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "howMany",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Seq#Drop",
            type_params: [
                "T",
            ],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "s",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Seq",
                            tail: Some(
                                App(
                                    TypeApp {
                                        head: "T",
                                        tail: None,
                                    },
                                ),
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "howMany",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Seq",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "T",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            body: None,
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Field",
                    type_params: [
                        "_",
                    ],
                    type_: None,
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "HeapType",
                    type_params: [],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [
                                    "alpha",
                                ],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                    App(
                                        TypeApp {
                                            head: "Field",
                                            tail: Some(
                                                App(
                                                    TypeApp {
                                                        head: "alpha",
                                                        tail: None,
                                                    },
                                                ),
                                            ),
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "alpha",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$IsGoodHeap",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "$Heap",
                        ],
                        type_: App(
                            TypeApp {
                                head: "HeapType",
                                tail: None,
                            },
                        ),
                    },
                    where_: Some(
                        FuncCall(
                            FuncCall {
                                target: "$IsGoodHeap",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "alloc",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Bool,
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "$HeapSucc",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "Node.list",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            AtomApp(
                                TypeApp {
                                    head: Paren(
                                        App(
                                            TypeApp {
                                                head: "Seq",
                                                tail: Some(
                                                    App(
                                                        TypeApp {
                                                            head: "ref",
                                                            tail: None,
                                                        },
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "Node.footprint",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            Map(
                                MapType {
                                    type_params: [],
                                    keys: [
                                        App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    ],
                                    value: Atom(
                                        Bool,
                                    ),
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "Node.data",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "ref",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "Node.next",
                ],
                type_: App(
                    TypeApp {
                        head: "Field",
                        tail: Some(
                            App(
                                TypeApp {
                                    head: "ref",
                                    tail: None,
                                },
                            ),
                        ),
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "Node.Valid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "$heap",
                    ),
                    type_: App(
                        TypeApp {
                            head: "HeapType",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "this",
                    ),
                    type_: App(
                        TypeApp {
                            head: "ref",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [
                            "T",
                        ],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "r",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "o",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "T",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    Array(
                                        ArrayExpr {
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Set#Singleton",
                                                    args: [
                                                        Var(
                                                            "r",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "o",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Equiv(
                            EquivExpr {
                                lhs: Array(
                                    ArrayExpr {
                                        expr: FuncCall(
                                            FuncCall {
                                                target: "Set#Singleton",
                                                args: [
                                                    Var(
                                                        "r",
                                                    ),
                                                ],
                                            },
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "o",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "r",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "o",
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Quant(
                QuantExpr {
                    kind: ForAll,
                    body: QuantBody {
                        type_params: [],
                        bound_vars: [
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "$Heap",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "HeapType",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                            AttrTypedIdentsWhere {
                                attrs: [],
                                typed_idents_where: TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "this",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "ref",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            },
                        ],
                        attrs: [
                            Trigger(
                                [
                                    FuncCall(
                                        FuncCall {
                                            target: "Node.Valid",
                                            args: [
                                                Var(
                                                    "$Heap",
                                                ),
                                                Var(
                                                    "this",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            ),
                        ],
                        expr: Implies(
                            ImpliesExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "this",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "null",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "$IsGoodHeap",
                                                args: [
                                                    Var(
                                                        "$Heap",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                rhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "Node.Valid",
                                                args: [
                                                    Var(
                                                        "$Heap",
                                                    ),
                                                    Var(
                                                        "this",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "this",
                                                                                    ),
                                                                                    Var(
                                                                                        "Node.footprint",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "this",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Neg(
                                                                    NegExpr {
                                                                        op: Logical,
                                                                        expr: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "$Heap",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "this",
                                                                                            ),
                                                                                            Var(
                                                                                                "Node.footprint",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "null",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Quant(
                                                            QuantExpr {
                                                                kind: ForAll,
                                                                body: QuantBody {
                                                                    type_params: [],
                                                                    bound_vars: [
                                                                        AttrTypedIdentsWhere {
                                                                            attrs: [],
                                                                            typed_idents_where: TypedIdentsWhere {
                                                                                typed_idents: TypedIdents {
                                                                                    idents: [
                                                                                        "n",
                                                                                    ],
                                                                                    type_: App(
                                                                                        TypeApp {
                                                                                            head: "ref",
                                                                                            tail: None,
                                                                                        },
                                                                                    ),
                                                                                },
                                                                                where_: None,
                                                                            },
                                                                        },
                                                                    ],
                                                                    attrs: [],
                                                                    expr: Implies(
                                                                        ImpliesExpr {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "$Heap",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "this",
                                                                                                ),
                                                                                                Var(
                                                                                                    "Node.footprint",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "n",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            rhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: Logical(
                                                                                                LogicalExpr {
                                                                                                    lhs: Logical(
                                                                                                        LogicalExpr {
                                                                                                            lhs: Array(
                                                                                                                ArrayExpr {
                                                                                                                    expr: Var(
                                                                                                                        "$Heap",
                                                                                                                    ),
                                                                                                                    subscripts: [
                                                                                                                        ArraySubscript {
                                                                                                                            keys: [
                                                                                                                                Var(
                                                                                                                                    "n",
                                                                                                                                ),
                                                                                                                                Var(
                                                                                                                                    "Node.footprint",
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                            value: None,
                                                                                                                        },
                                                                                                                        ArraySubscript {
                                                                                                                            keys: [
                                                                                                                                Var(
                                                                                                                                    "n",
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                            value: None,
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                            op: And,
                                                                                                            rhs: Neg(
                                                                                                                NegExpr {
                                                                                                                    op: Logical,
                                                                                                                    expr: Array(
                                                                                                                        ArrayExpr {
                                                                                                                            expr: Var(
                                                                                                                                "$Heap",
                                                                                                                            ),
                                                                                                                            subscripts: [
                                                                                                                                ArraySubscript {
                                                                                                                                    keys: [
                                                                                                                                        Var(
                                                                                                                                            "n",
                                                                                                                                        ),
                                                                                                                                        Var(
                                                                                                                                            "Node.footprint",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    value: None,
                                                                                                                                },
                                                                                                                                ArraySubscript {
                                                                                                                                    keys: [
                                                                                                                                        Var(
                                                                                                                                            "null",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    value: None,
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    ),
                                                                                                    op: And,
                                                                                                    rhs: FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "Set#Subset",
                                                                                                            args: [
                                                                                                                Array(
                                                                                                                    ArrayExpr {
                                                                                                                        expr: Var(
                                                                                                                            "$Heap",
                                                                                                                        ),
                                                                                                                        subscripts: [
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    Var(
                                                                                                                                        "n",
                                                                                                                                    ),
                                                                                                                                    Var(
                                                                                                                                        "Node.footprint",
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                                Array(
                                                                                                                    ArrayExpr {
                                                                                                                        expr: Var(
                                                                                                                            "$Heap",
                                                                                                                        ),
                                                                                                                        subscripts: [
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    Var(
                                                                                                                                        "this",
                                                                                                                                    ),
                                                                                                                                    Var(
                                                                                                                                        "Node.footprint",
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: Implies(
                                                                                                ImpliesExpr {
                                                                                                    lhs: Rel(
                                                                                                        RelExpr {
                                                                                                            lhs: Array(
                                                                                                                ArrayExpr {
                                                                                                                    expr: Var(
                                                                                                                        "$Heap",
                                                                                                                    ),
                                                                                                                    subscripts: [
                                                                                                                        ArraySubscript {
                                                                                                                            keys: [
                                                                                                                                Var(
                                                                                                                                    "n",
                                                                                                                                ),
                                                                                                                                Var(
                                                                                                                                    "Node.next",
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                            value: None,
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            ),
                                                                                                            op: Eq,
                                                                                                            rhs: Var(
                                                                                                                "null",
                                                                                                            ),
                                                                                                        },
                                                                                                    ),
                                                                                                    rhs: FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "Seq#Equal",
                                                                                                            args: [
                                                                                                                Array(
                                                                                                                    ArrayExpr {
                                                                                                                        expr: Var(
                                                                                                                            "$Heap",
                                                                                                                        ),
                                                                                                                        subscripts: [
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    Var(
                                                                                                                                        "n",
                                                                                                                                    ),
                                                                                                                                    Var(
                                                                                                                                        "Node.list",
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                                FuncCall(
                                                                                                                    FuncCall {
                                                                                                                        target: "Seq#Build",
                                                                                                                        args: [
                                                                                                                            FuncCall(
                                                                                                                                FuncCall {
                                                                                                                                    target: "Seq#Empty",
                                                                                                                                    args: [],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                            Nat(
                                                                                                                                "0",
                                                                                                                            ),
                                                                                                                            Array(
                                                                                                                                ArrayExpr {
                                                                                                                                    expr: Var(
                                                                                                                                        "$Heap",
                                                                                                                                    ),
                                                                                                                                    subscripts: [
                                                                                                                                        ArraySubscript {
                                                                                                                                            keys: [
                                                                                                                                                Var(
                                                                                                                                                    "n",
                                                                                                                                                ),
                                                                                                                                                Var(
                                                                                                                                                    "Node.data",
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                            value: None,
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                            Nat(
                                                                                                                                "1",
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Implies(
                                                                                        ImpliesExpr {
                                                                                            lhs: Rel(
                                                                                                RelExpr {
                                                                                                    lhs: Array(
                                                                                                        ArrayExpr {
                                                                                                            expr: Var(
                                                                                                                "$Heap",
                                                                                                            ),
                                                                                                            subscripts: [
                                                                                                                ArraySubscript {
                                                                                                                    keys: [
                                                                                                                        Var(
                                                                                                                            "n",
                                                                                                                        ),
                                                                                                                        Var(
                                                                                                                            "Node.next",
                                                                                                                        ),
                                                                                                                    ],
                                                                                                                    value: None,
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                    op: Neq,
                                                                                                    rhs: Var(
                                                                                                        "null",
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                            rhs: Logical(
                                                                                                LogicalExpr {
                                                                                                    lhs: Logical(
                                                                                                        LogicalExpr {
                                                                                                            lhs: Logical(
                                                                                                                LogicalExpr {
                                                                                                                    lhs: Array(
                                                                                                                        ArrayExpr {
                                                                                                                            expr: Var(
                                                                                                                                "$Heap",
                                                                                                                            ),
                                                                                                                            subscripts: [
                                                                                                                                ArraySubscript {
                                                                                                                                    keys: [
                                                                                                                                        Var(
                                                                                                                                            "n",
                                                                                                                                        ),
                                                                                                                                        Var(
                                                                                                                                            "Node.footprint",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    value: None,
                                                                                                                                },
                                                                                                                                ArraySubscript {
                                                                                                                                    keys: [
                                                                                                                                        Array(
                                                                                                                                            ArrayExpr {
                                                                                                                                                expr: Var(
                                                                                                                                                    "$Heap",
                                                                                                                                                ),
                                                                                                                                                subscripts: [
                                                                                                                                                    ArraySubscript {
                                                                                                                                                        keys: [
                                                                                                                                                            Var(
                                                                                                                                                                "n",
                                                                                                                                                            ),
                                                                                                                                                            Var(
                                                                                                                                                                "Node.next",
                                                                                                                                                            ),
                                                                                                                                                        ],
                                                                                                                                                        value: None,
                                                                                                                                                    },
                                                                                                                                                ],
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    value: None,
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                    op: And,
                                                                                                                    rhs: FuncCall(
                                                                                                                        FuncCall {
                                                                                                                            target: "Set#Subset",
                                                                                                                            args: [
                                                                                                                                Array(
                                                                                                                                    ArrayExpr {
                                                                                                                                        expr: Var(
                                                                                                                                            "$Heap",
                                                                                                                                        ),
                                                                                                                                        subscripts: [
                                                                                                                                            ArraySubscript {
                                                                                                                                                keys: [
                                                                                                                                                    Array(
                                                                                                                                                        ArrayExpr {
                                                                                                                                                            expr: Var(
                                                                                                                                                                "$Heap",
                                                                                                                                                            ),
                                                                                                                                                            subscripts: [
                                                                                                                                                                ArraySubscript {
                                                                                                                                                                    keys: [
                                                                                                                                                                        Var(
                                                                                                                                                                            "n",
                                                                                                                                                                        ),
                                                                                                                                                                        Var(
                                                                                                                                                                            "Node.next",
                                                                                                                                                                        ),
                                                                                                                                                                    ],
                                                                                                                                                                    value: None,
                                                                                                                                                                },
                                                                                                                                                            ],
                                                                                                                                                        },
                                                                                                                                                    ),
                                                                                                                                                    Var(
                                                                                                                                                        "Node.footprint",
                                                                                                                                                    ),
                                                                                                                                                ],
                                                                                                                                                value: None,
                                                                                                                                            },
                                                                                                                                        ],
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                                Array(
                                                                                                                                    ArrayExpr {
                                                                                                                                        expr: Var(
                                                                                                                                            "$Heap",
                                                                                                                                        ),
                                                                                                                                        subscripts: [
                                                                                                                                            ArraySubscript {
                                                                                                                                                keys: [
                                                                                                                                                    Var(
                                                                                                                                                        "n",
                                                                                                                                                    ),
                                                                                                                                                    Var(
                                                                                                                                                        "Node.footprint",
                                                                                                                                                    ),
                                                                                                                                                ],
                                                                                                                                                value: None,
                                                                                                                                            },
                                                                                                                                        ],
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                            op: And,
                                                                                                            rhs: Neg(
                                                                                                                NegExpr {
                                                                                                                    op: Logical,
                                                                                                                    expr: Array(
                                                                                                                        ArrayExpr {
                                                                                                                            expr: Var(
                                                                                                                                "$Heap",
                                                                                                                            ),
                                                                                                                            subscripts: [
                                                                                                                                ArraySubscript {
                                                                                                                                    keys: [
                                                                                                                                        Array(
                                                                                                                                            ArrayExpr {
                                                                                                                                                expr: Var(
                                                                                                                                                    "$Heap",
                                                                                                                                                ),
                                                                                                                                                subscripts: [
                                                                                                                                                    ArraySubscript {
                                                                                                                                                        keys: [
                                                                                                                                                            Var(
                                                                                                                                                                "n",
                                                                                                                                                            ),
                                                                                                                                                            Var(
                                                                                                                                                                "Node.next",
                                                                                                                                                            ),
                                                                                                                                                        ],
                                                                                                                                                        value: None,
                                                                                                                                                    },
                                                                                                                                                ],
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                        Var(
                                                                                                                                            "Node.footprint",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    value: None,
                                                                                                                                },
                                                                                                                                ArraySubscript {
                                                                                                                                    keys: [
                                                                                                                                        Var(
                                                                                                                                            "n",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                    value: None,
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    ),
                                                                                                                },
                                                                                                            ),
                                                                                                        },
                                                                                                    ),
                                                                                                    op: And,
                                                                                                    rhs: FuncCall(
                                                                                                        FuncCall {
                                                                                                            target: "Seq#Equal",
                                                                                                            args: [
                                                                                                                Array(
                                                                                                                    ArrayExpr {
                                                                                                                        expr: Var(
                                                                                                                            "$Heap",
                                                                                                                        ),
                                                                                                                        subscripts: [
                                                                                                                            ArraySubscript {
                                                                                                                                keys: [
                                                                                                                                    Var(
                                                                                                                                        "n",
                                                                                                                                    ),
                                                                                                                                    Var(
                                                                                                                                        "Node.list",
                                                                                                                                    ),
                                                                                                                                ],
                                                                                                                                value: None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                                FuncCall(
                                                                                                                    FuncCall {
                                                                                                                        target: "Seq#Append",
                                                                                                                        args: [
                                                                                                                            FuncCall(
                                                                                                                                FuncCall {
                                                                                                                                    target: "Seq#Build",
                                                                                                                                    args: [
                                                                                                                                        FuncCall(
                                                                                                                                            FuncCall {
                                                                                                                                                target: "Seq#Empty",
                                                                                                                                                args: [],
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                        Nat(
                                                                                                                                            "0",
                                                                                                                                        ),
                                                                                                                                        Array(
                                                                                                                                            ArrayExpr {
                                                                                                                                                expr: Var(
                                                                                                                                                    "$Heap",
                                                                                                                                                ),
                                                                                                                                                subscripts: [
                                                                                                                                                    ArraySubscript {
                                                                                                                                                        keys: [
                                                                                                                                                            Var(
                                                                                                                                                                "n",
                                                                                                                                                            ),
                                                                                                                                                            Var(
                                                                                                                                                                "Node.data",
                                                                                                                                                            ),
                                                                                                                                                        ],
                                                                                                                                                        value: None,
                                                                                                                                                    },
                                                                                                                                                ],
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                        Nat(
                                                                                                                                            "1",
                                                                                                                                        ),
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                            Array(
                                                                                                                                ArrayExpr {
                                                                                                                                    expr: Var(
                                                                                                                                        "$Heap",
                                                                                                                                    ),
                                                                                                                                    subscripts: [
                                                                                                                                        ArraySubscript {
                                                                                                                                            keys: [
                                                                                                                                                Array(
                                                                                                                                                    ArrayExpr {
                                                                                                                                                        expr: Var(
                                                                                                                                                            "$Heap",
                                                                                                                                                        ),
                                                                                                                                                        subscripts: [
                                                                                                                                                            ArraySubscript {
                                                                                                                                                                keys: [
                                                                                                                                                                    Var(
                                                                                                                                                                        "n",
                                                                                                                                                                    ),
                                                                                                                                                                    Var(
                                                                                                                                                                        "Node.next",
                                                                                                                                                                    ),
                                                                                                                                                                ],
                                                                                                                                                                value: None,
                                                                                                                                                            },
                                                                                                                                                        ],
                                                                                                                                                    },
                                                                                                                                                ),
                                                                                                                                                Var(
                                                                                                                                                    "Node.list",
                                                                                                                                                ),
                                                                                                                                            ],
                                                                                                                                            value: None,
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                    },
                                                                                                                ),
                                                                                                            ],
                                                                                                        },
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Implies(
                                                    ImpliesExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "$Heap",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "this",
                                                                                    ),
                                                                                    Var(
                                                                                        "Node.next",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                op: Neq,
                                                                rhs: Var(
                                                                    "null",
                                                                ),
                                                            },
                                                        ),
                                                        rhs: FuncCall(
                                                            FuncCall {
                                                                target: "Node.Valid",
                                                                args: [
                                                                    Var(
                                                                        "$Heap",
                                                                    ),
                                                                    Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "$Heap",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "this",
                                                                                        ),
                                                                                        Var(
                                                                                            "Node.next",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Node.ReverseInPlace",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: Some(
                                Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "this",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "null",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "$Heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "this",
                                                            ),
                                                            Var(
                                                                "alloc",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "reverse",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: Some(
                                Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "reverse",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "null",
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "$Heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "reverse",
                                                            ),
                                                            Var(
                                                                "alloc",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Node.Valid",
                                args: [
                                    Var(
                                        "$Heap",
                                    ),
                                    Var(
                                        "this",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Array(
                            ArrayExpr {
                                expr: Var(
                                    "$Heap",
                                ),
                                subscripts: [
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "this",
                                            ),
                                            Var(
                                                "Node.footprint",
                                            ),
                                        ],
                                        value: None,
                                    },
                                    ArraySubscript {
                                        keys: [
                                            Var(
                                                "this",
                                            ),
                                        ],
                                        value: None,
                                    },
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "$Heap",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "this",
                                                    ),
                                                    Var(
                                                        "Node.footprint",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "null",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "$Heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "this",
                                                            ),
                                                            Var(
                                                                "Node.next",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Neq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Node.Valid",
                                        args: [
                                            Var(
                                                "$Heap",
                                            ),
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "this",
                                                                ),
                                                                Var(
                                                                    "Node.next",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "$Heap",
                        ],
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "$HeapSucc",
                                args: [
                                    Old(
                                        OldExpr {
                                            expr: Var(
                                                "$Heap",
                                            ),
                                        },
                                    ),
                                    Var(
                                        "$Heap",
                                    ),
                                ],
                            },
                        ),
                        is_free: true,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "CheckWellformed$$Node.Valid",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: Some(
                                Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "this",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "null",
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "$Heap",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "this",
                                                            ),
                                                            Var(
                                                                "alloc",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Node.ReverseInPlace",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "this",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "reverse",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "ref",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [
                    LocalVars {
                        attrs: [],
                        vars: [
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "current",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: Some(
                                    Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "current",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "null",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "current",
                                                                ),
                                                                Var(
                                                                    "alloc",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ),
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "$PreLoopHeap0",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "HeapType",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: None,
                            },
                            TypedIdentsWhere {
                                typed_idents: TypedIdents {
                                    idents: [
                                        "nx",
                                    ],
                                    type_: App(
                                        TypeApp {
                                            head: "ref",
                                            tail: None,
                                        },
                                    ),
                                },
                                where_: Some(
                                    Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "nx",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "null",
                                                    ),
                                                },
                                            ),
                                            op: Or,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "$Heap",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "nx",
                                                                ),
                                                                Var(
                                                                    "alloc",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ),
                            },
                        ],
                    },
                ],
                stmt_list: [
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "current",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "$Heap",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "this",
                                                        ),
                                                        Var(
                                                            "Node.next",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "reverse",
                                        subscripts: [],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "this",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap",
                                        subscripts: [
                                            [
                                                Var(
                                                    "reverse",
                                                ),
                                                Var(
                                                    "Node.next",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    Var(
                                        "null",
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assume,
                                attrs: [],
                                proposition: FuncCall(
                                    FuncCall {
                                        target: "$IsGoodHeap",
                                        args: [
                                            Var(
                                                "$Heap",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Assign(
                            AssignCmd {
                                lhs: [
                                    AssignLhs {
                                        ident: "$Heap",
                                        subscripts: [
                                            [
                                                Var(
                                                    "reverse",
                                                ),
                                                Var(
                                                    "Node.footprint",
                                                ),
                                            ],
                                        ],
                                    },
                                ],
                                rhs: [
                                    FuncCall(
                                        FuncCall {
                                            target: "Set#Singleton",
                                            args: [
                                                Var(
                                                    "reverse",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                    LabelOrCmd(
                        Claim(
                            ClaimCmd {
                                kind: Assert,
                                attrs: [],
                                proposition: Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "current",
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "null",
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ],
            },
        },
    ),
]

[Printed]
type ref;

const null: ref;

type Set T = [T]bool;

function Set#Empty<T>(): Set T;

function Set#Singleton<T>(T): Set T;

function Set#UnionOne<T>(Set T, T): Set T;

function Set#Union<T>(Set T, Set T): Set T;

function Set#Intersection<T>(Set T, Set T): Set T;

function Set#Difference<T>(Set T, Set T): Set T;

function Set#Subset<T>(Set T, Set T): bool;

function Set#Equal<T>(Set T, Set T): bool;

function Set#Disjoint<T>(Set T, Set T): bool;

type Seq _;

function Seq#Length<T>(Seq T): int;

function Seq#Empty<T>(): Seq T;

function Seq#Singleton<T>(T): Seq T;

function Seq#Build<T>(s: Seq T, index: int, val: T, newLength: int): Seq T;

function Seq#Append<T>(Seq T, Seq T): Seq T;

function Seq#Index<T>(Seq T, int): T;

function Seq#Contains<T>(Seq T, T): bool;

function Seq#Equal<T>(Seq T, Seq T): bool;

function Seq#SameUntil<T>(Seq T, Seq T, int): bool;

function Seq#Take<T>(s: Seq T, howMany: int): Seq T;

function Seq#Drop<T>(s: Seq T, howMany: int): Seq T;

type Field _;

type HeapType = <alpha>[ref, Field alpha]alpha;

function $IsGoodHeap(HeapType): bool;

var $Heap: HeapType where $IsGoodHeap($Heap);

const alloc: Field bool;

function $HeapSucc(HeapType, HeapType): bool;

const unique Node.list: Field (Seq ref);

const unique Node.footprint: Field [ref]bool;

const unique Node.data: Field ref;

const unique Node.next: Field ref;

function Node.Valid($heap: HeapType, this: ref): bool;

axiom (forall <T> r: T, o: T :: {Set#Singleton(r)[o]} Set#Singleton(r)[o] <==> r == o);

axiom (forall $Heap: HeapType, this: ref :: {Node.Valid($Heap, this)} this != null && $IsGoodHeap($Heap) ==> Node.Valid($Heap, this) == ($Heap[this, Node.footprint][this] && !$Heap[this, Node.footprint][null] && (forall n: ref :: $Heap[this, Node.footprint][n] ==> $Heap[n, Node.footprint][n] && !$Heap[n, Node.footprint][null] && Set#Subset($Heap[n, Node.footprint], $Heap[this, Node.footprint]) && ($Heap[n, Node.next] == null ==> Seq#Equal($Heap[n, Node.list], Seq#Build(Seq#Empty(), 0, $Heap[n, Node.data], 1))) && ($Heap[n, Node.next] != null ==> $Heap[n, Node.footprint][$Heap[n, Node.next]] && Set#Subset($Heap[$Heap[n, Node.next], Node.footprint], $Heap[n, Node.footprint]) && !$Heap[$Heap[n, Node.next], Node.footprint][n] && Seq#Equal($Heap[n, Node.list], Seq#Append(Seq#Build(Seq#Empty(), 0, $Heap[n, Node.data], 1), $Heap[$Heap[n, Node.next], Node.list])))) && ($Heap[this, Node.next] != null ==> Node.Valid($Heap, $Heap[this, Node.next]))));

procedure Node.ReverseInPlace(this: ref where this != null && $Heap[this, alloc]) returns (reverse: ref where reverse == null || $Heap[reverse, alloc]);
  free requires Node.Valid($Heap, this);
  requires $Heap[this, Node.footprint][this];
  requires !$Heap[this, Node.footprint][null];
  requires $Heap[this, Node.next] != null ==> Node.Valid($Heap, $Heap[this, Node.next]);
  modifies $Heap;
  free ensures $HeapSucc(old ($Heap), $Heap);

procedure CheckWellformed$$Node.Valid(this: ref where this != null && $Heap[this, alloc]);

implementation Node.ReverseInPlace(this: ref) returns (reverse: ref) {
  var current: ref where current == null || $Heap[current, alloc], $PreLoopHeap0: HeapType, nx: ref where nx == null || $Heap[nx, alloc];

  current := $Heap[this, Node.next];
  reverse := this;
  $Heap[reverse, Node.next] := null;
  assume $IsGoodHeap($Heap);
  $Heap[reverse, Node.footprint] := Set#Singleton(reverse);
  assert current == null;
}

[Input - ../../vendor/boogie/Test/test21/MapAxiomsConsistency.bpl]
// RUN: %boogie -typeEncoding:p -logPrefix:0p "%s" > "%t"
// RUN: %diff "%s.p.expect" "%t"
// RUN: %boogie -typeEncoding:a -logPrefix:0a "%s" > "%t"
// RUN: %diff "%s.a.expect" "%t"
// Dafny program verifier version 0.92, Copyright (c) 2003-2008, Microsoft.
// Command Line Options: /trace /typeEncoding:arguments /print:test.bpl test.dfy

type ref;

const null: ref;

type Set T = [T]bool;
function Set#Empty<T>() returns (Set T);
function Set#Singleton<T>(T) returns (Set T);
function Set#UnionOne<T>(Set T, T) returns (Set T);
function Set#Union<T>(Set T, Set T) returns (Set T);
function Set#Intersection<T>(Set T, Set T) returns (Set T);
function Set#Difference<T>(Set T, Set T) returns (Set T);
function Set#Subset<T>(Set T, Set T) returns (bool);
function Set#Equal<T>(Set T, Set T) returns (bool);
function Set#Disjoint<T>(Set T, Set T) returns (bool);

type Seq _;
function Seq#Length<T>(Seq T) returns (int);
function Seq#Empty<T>() returns (Seq T);
function Seq#Singleton<T>(T) returns (Seq T);
function Seq#Build<T>(s: Seq T, index: int, val: T, newLength: int) returns (Seq T);
function Seq#Append<T>(Seq T, Seq T) returns (Seq T);
function Seq#Index<T>(Seq T, int) returns (T);
function Seq#Contains<T>(Seq T, T) returns (bool);
function Seq#Equal<T>(Seq T, Seq T) returns (bool);
function Seq#SameUntil<T>(Seq T, Seq T, int) returns (bool);
function Seq#Take<T>(s:Seq T, howMany: int) returns (Seq T);
function Seq#Drop<T>(s:Seq T, howMany: int) returns (Seq T);

type Field _;
type HeapType = <alpha>[ref,Field alpha]alpha;
function $IsGoodHeap(HeapType) returns (bool);
var $Heap: HeapType where $IsGoodHeap($Heap);
const alloc: Field bool;
function $HeapSucc(HeapType, HeapType) returns (bool);

const unique Node.list: Field (Seq ref);
const unique Node.footprint: Field [ref]bool;
const unique Node.data: Field ref;
const unique Node.next: Field ref;
function Node.Valid($heap: HeapType, this: ref) returns (bool);




axiom (forall<T> r: T, o: T :: { Set#Singleton(r)[o] } Set#Singleton(r)[o] <==> r == o);

axiom (forall $Heap: HeapType, this: ref :: { Node.Valid($Heap, this) } this != null && $IsGoodHeap($Heap) ==> Node.Valid($Heap, this) == ($Heap[this, Node.footprint][this] && !$Heap[this, Node.footprint][null] && (forall n: ref :: $Heap[this, Node.footprint][n] ==> $Heap[n, Node.footprint][n] && !$Heap[n, Node.footprint][null] && Set#Subset($Heap[n, Node.footprint], $Heap[this, Node.footprint]) && ($Heap[n, Node.next] == null ==> Seq#Equal($Heap[n, Node.list], Seq#Build(Seq#Empty(), 0, $Heap[n, Node.data], 1))) && ($Heap[n, Node.next] != null ==> $Heap[n, Node.footprint][$Heap[n, Node.next]] && Set#Subset($Heap[$Heap[n, Node.next], Node.footprint], $Heap[n, Node.footprint]) && !$Heap[$Heap[n, Node.next], Node.footprint][n] && Seq#Equal($Heap[n, Node.list], Seq#Append(Seq#Build(Seq#Empty(), 0, $Heap[n, Node.data], 1), $Heap[$Heap[n, Node.next], Node.list])))) && ($Heap[this, Node.next] != null ==> Node.Valid($Heap, $Heap[this, Node.next]))));




procedure Node.ReverseInPlace(this: ref where this != null && $Heap[this, alloc]) returns (reverse: ref where reverse == null || $Heap[reverse, alloc]);
  // user-defined preconditions
  free requires Node.Valid($Heap, this);
  requires $Heap[this, Node.footprint][this];
  requires !$Heap[this, Node.footprint][null];
  requires $Heap[this, Node.next] != null ==> Node.Valid($Heap, $Heap[this, Node.next]);
  modifies $Heap;
  // frame condition
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure CheckWellformed$$Node.Valid(this: ref where this != null && $Heap[this, alloc]);





implementation Node.ReverseInPlace(this: ref) returns (reverse: ref)
{
  var current: ref where current == null || $Heap[current, alloc], $PreLoopHeap0: HeapType, nx: ref where nx == null || $Heap[nx, alloc];

    // ----- var-declaration statement ----- test.dfy(28,9)
    current := $Heap[this, Node.next];


    // ----- assignment statement ----- test.dfy(29,13)
    reverse := this;
    // ----- assignment statement ----- test.dfy(30,18)
    $Heap[reverse, Node.next] := null;
    assume $IsGoodHeap($Heap);



    // ----- assignment statement ----- test.dfy(31,23)
    $Heap[reverse, Node.footprint] := // Set#UnionOne(Set#Empty(), reverse);
                                      Set#Singleton(reverse);

    assert current == null;
}
