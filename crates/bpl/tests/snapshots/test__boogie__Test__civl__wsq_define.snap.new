---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "tid",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Tid",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "nil",
                ],
                type_: App(
                    TypeApp {
                        head: "Tid",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "H",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "T",
                        ],
                        type_: Atom(
                            Int,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "items",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "4",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "status",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "take_in_cs",
                        ],
                        type_: Atom(
                            Bool,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "put_in_cs",
                        ],
                        type_: Atom(
                            Bool,
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "steal_in_cs",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Tid",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "h_ss",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Tid",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "3",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "t_ss",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Tid",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "IN_Q",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "NOT_IN_Q",
                ],
                type_: Atom(
                    Bool,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "IN_Q",
                    ),
                    op: Eq,
                    rhs: BoolLit(
                        true,
                    ),
                },
            ),
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "NOT_IN_Q",
                    ),
                    op: Eq,
                    rhs: BoolLit(
                        false,
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "EMPTY",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "NIL",
                ],
                type_: App(
                    TypeApp {
                        head: "Tid",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: true,
            consts: TypedIdents {
                idents: [
                    "ptTid",
                ],
                type_: App(
                    TypeApp {
                        head: "Tid",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "ptTid",
                    ),
                    op: Neq,
                    rhs: Var(
                        "NIL",
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "define",
                        params: [],
                    },
                ),
            ],
            ident: "stealerTid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "tid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Tid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        Atom(
                            Bool,
                        ),
                    ),
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "tid",
                                ),
                                op: Neq,
                                rhs: Var(
                                    "NIL",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "tid",
                                ),
                                op: Neq,
                                rhs: Var(
                                    "ptTid",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "define",
                        params: [],
                    },
                ),
            ],
            ident: "ideasInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "put_in_cs",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "items",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "status",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "H",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "T",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "take_in_cs",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "steal_in_cs",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "h_ss",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t_ss",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        Atom(
                            Bool,
                        ),
                    ),
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Implies(
                                                            ImpliesExpr {
                                                                lhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Var(
                                                                            "take_in_cs",
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "h_ss",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "ptTid",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Lt,
                                                                                rhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "t_ss",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "ptTid",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                                rhs: Logical(
                                                                    LogicalExpr {
                                                                        lhs: Logical(
                                                                            LogicalExpr {
                                                                                lhs: Logical(
                                                                                    LogicalExpr {
                                                                                        lhs: Rel(
                                                                                            RelExpr {
                                                                                                lhs: Array(
                                                                                                    ArrayExpr {
                                                                                                        expr: Var(
                                                                                                            "t_ss",
                                                                                                        ),
                                                                                                        subscripts: [
                                                                                                            ArraySubscript {
                                                                                                                keys: [
                                                                                                                    Var(
                                                                                                                        "ptTid",
                                                                                                                    ),
                                                                                                                ],
                                                                                                                value: None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                                op: Eq,
                                                                                                rhs: Var(
                                                                                                    "T",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        op: And,
                                                                                        rhs: Rel(
                                                                                            RelExpr {
                                                                                                lhs: Var(
                                                                                                    "H",
                                                                                                ),
                                                                                                op: Le,
                                                                                                rhs: Var(
                                                                                                    "T",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                op: And,
                                                                                rhs: Rel(
                                                                                    RelExpr {
                                                                                        lhs: Array(
                                                                                            ArrayExpr {
                                                                                                expr: Var(
                                                                                                    "items",
                                                                                                ),
                                                                                                subscripts: [
                                                                                                    ArraySubscript {
                                                                                                        keys: [
                                                                                                            Var(
                                                                                                                "T",
                                                                                                            ),
                                                                                                        ],
                                                                                                        value: None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                        op: Neq,
                                                                                        rhs: Var(
                                                                                            "EMPTY",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "status",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "T",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                op: Eq,
                                                                                rhs: Var(
                                                                                    "IN_Q",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Implies(
                                                            ImpliesExpr {
                                                                lhs: Var(
                                                                    "put_in_cs",
                                                                ),
                                                                rhs: Neg(
                                                                    NegExpr {
                                                                        op: Logical,
                                                                        expr: Var(
                                                                            "take_in_cs",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Implies(
                                                    ImpliesExpr {
                                                        lhs: Var(
                                                            "take_in_cs",
                                                        ),
                                                        rhs: Neg(
                                                            NegExpr {
                                                                op: Logical,
                                                                expr: Var(
                                                                    "put_in_cs",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Implies(
                                            ImpliesExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: Var(
                                                            "take_in_cs",
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "H",
                                                                ),
                                                                op: Neq,
                                                                rhs: Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "h_ss",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "ptTid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "H",
                                                        ),
                                                        op: Gt,
                                                        rhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "h_ss",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "ptTid",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "td",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "Tid",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "stealerTid",
                                                                                    args: [
                                                                                        Var(
                                                                                            "td",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "steal_in_cs",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "td",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "H",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "h_ss",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "td",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "H",
                                                                    ),
                                                                    op: Lt,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "t_ss",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "td",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "items",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "H",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "EMPTY",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "status",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "H",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "IN_Q",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "td",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "Tid",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "stealerTid",
                                                                    args: [
                                                                        Var(
                                                                            "td",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "steal_in_cs",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "td",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "H",
                                                            ),
                                                            op: Neq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "h_ss",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "td",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "H",
                                                    ),
                                                    op: Gt,
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "h_ss",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "td",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "define",
                        params: [],
                    },
                ),
            ],
            ident: "queueInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "steal_in_cs",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "put_in_cs",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "take_in_cs",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "items",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "status",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_H",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "_T",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        Atom(
                            Bool,
                        ),
                    ),
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "i",
                                            ],
                                            type_: Atom(
                                                Int,
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Implies(
                                ImpliesExpr {
                                    lhs: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "_H",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "i",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "i",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "_T",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    rhs: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "status",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "IN_Q",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "items",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: Var(
                                                        "EMPTY",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "define",
                        params: [],
                    },
                ),
            ],
            ident: "emptyInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "put_in_cs",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "take_in_cs",
                    ),
                    type_: Atom(
                        Bool,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "items",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "status",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "T",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        Atom(
                            Bool,
                        ),
                    ),
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "i",
                                            ],
                                            type_: Atom(
                                                Int,
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Implies(
                                ImpliesExpr {
                                    lhs: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Ge,
                                                            rhs: Var(
                                                                "T",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Var(
                                                                "put_in_cs",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Neg(
                                                NegExpr {
                                                    op: Logical,
                                                    expr: Var(
                                                        "take_in_cs",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    rhs: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "status",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "NOT_IN_Q",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "items",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "EMPTY",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "define",
                        params: [],
                    },
                ),
            ],
            ident: "putInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "items",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "status",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "H",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "T",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        Atom(
                            Bool,
                        ),
                    ),
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "i",
                                            ],
                                            type_: Atom(
                                                Int,
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Implies(
                                ImpliesExpr {
                                    lhs: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "H",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "i",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "i",
                                                    ),
                                                    op: Lt,
                                                    rhs: Var(
                                                        "T",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    rhs: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "status",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "IN_Q",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "items",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "i",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: Neq,
                                                    rhs: Var(
                                                        "EMPTY",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "define",
                        params: [],
                    },
                ),
            ],
            ident: "takeInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "items",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "status",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                Atom(
                                    Int,
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "H",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "T",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "t",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "h",
                    ),
                    type_: Atom(
                        Int,
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Paren(
                        Atom(
                            Bool,
                        ),
                    ),
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "i",
                                            ],
                                            type_: Atom(
                                                Int,
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Implies(
                                ImpliesExpr {
                                    lhs: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "h",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "i",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "i",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "t",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    rhs: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "status",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "IN_Q",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "items",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Neq,
                                                            rhs: Var(
                                                                "EMPTY",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "t",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "T",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "4",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_put",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "task",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "status",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "status",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "i",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "NOT_IN_Q",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "status",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "i",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "IN_Q",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_put",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "put",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "task",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "queueInv",
                                                                args: [
                                                                    Var(
                                                                        "steal_in_cs",
                                                                    ),
                                                                    Var(
                                                                        "put_in_cs",
                                                                    ),
                                                                    Var(
                                                                        "take_in_cs",
                                                                    ),
                                                                    Var(
                                                                        "items",
                                                                    ),
                                                                    Var(
                                                                        "status",
                                                                    ),
                                                                    Var(
                                                                        "H",
                                                                    ),
                                                                    Term(
                                                                        Term {
                                                                            lhs: Var(
                                                                                "T",
                                                                            ),
                                                                            op: Sub,
                                                                            rhs: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "tid",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "ptTid",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "task",
                                                        ),
                                                        op: Neq,
                                                        rhs: Var(
                                                            "EMPTY",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Var(
                                                    "take_in_cs",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Var(
                                            "put_in_cs",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "ideasInv",
                                args: [
                                    Var(
                                        "put_in_cs",
                                    ),
                                    Var(
                                        "items",
                                    ),
                                    Var(
                                        "status",
                                    ),
                                    Var(
                                        "H",
                                    ),
                                    Var(
                                        "T",
                                    ),
                                    Var(
                                        "take_in_cs",
                                    ),
                                    Var(
                                        "steal_in_cs",
                                    ),
                                    Var(
                                        "h_ss",
                                    ),
                                    Var(
                                        "t_ss",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "emptyInv",
                                args: [
                                    Var(
                                        "put_in_cs",
                                    ),
                                    Var(
                                        "take_in_cs",
                                    ),
                                    Var(
                                        "items",
                                    ),
                                    Var(
                                        "status",
                                    ),
                                    Var(
                                        "T",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "queueInv",
                                                        args: [
                                                            Var(
                                                                "steal_in_cs",
                                                            ),
                                                            Var(
                                                                "put_in_cs",
                                                            ),
                                                            Var(
                                                                "take_in_cs",
                                                            ),
                                                            Var(
                                                                "items",
                                                            ),
                                                            Var(
                                                                "status",
                                                            ),
                                                            Var(
                                                                "H",
                                                            ),
                                                            Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "T",
                                                                    ),
                                                                    op: Sub,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "tid",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "ptTid",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Var(
                                                    "take_in_cs",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Var(
                                            "put_in_cs",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "ideasInv",
                                args: [
                                    Var(
                                        "put_in_cs",
                                    ),
                                    Var(
                                        "items",
                                    ),
                                    Var(
                                        "status",
                                    ),
                                    Var(
                                        "H",
                                    ),
                                    Var(
                                        "T",
                                    ),
                                    Var(
                                        "take_in_cs",
                                    ),
                                    Var(
                                        "steal_in_cs",
                                    ),
                                    Var(
                                        "h_ss",
                                    ),
                                    Var(
                                        "t_ss",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "emptyInv",
                                args: [
                                    Var(
                                        "put_in_cs",
                                    ),
                                    Var(
                                        "take_in_cs",
                                    ),
                                    Var(
                                        "items",
                                    ),
                                    Var(
                                        "status",
                                    ),
                                    Var(
                                        "T",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "t",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "3",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "oldH",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "3",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "oldT",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "3",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "oldStatusT",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "t",
                                        ],
                                        target: "readT_put",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "oldH",
                                            "oldT",
                                        ],
                                        target: "GhostRead",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Yield(
                                YieldCmd,
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        Attr(
                                            AttrContent {
                                                ident: "expand",
                                                params: [],
                                            },
                                        ),
                                    ],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "queueInv",
                                                                    args: [
                                                                        Var(
                                                                            "steal_in_cs",
                                                                        ),
                                                                        Var(
                                                                            "put_in_cs",
                                                                        ),
                                                                        Var(
                                                                            "take_in_cs",
                                                                        ),
                                                                        Var(
                                                                            "items",
                                                                        ),
                                                                        Var(
                                                                            "status",
                                                                        ),
                                                                        Var(
                                                                            "H",
                                                                        ),
                                                                        Term(
                                                                            Term {
                                                                                lhs: Var(
                                                                                    "T",
                                                                                ),
                                                                                op: Sub,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "tid",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "ptTid",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Var(
                                                                "take_in_cs",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Var(
                                                "put_in_cs",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        Attr(
                                            AttrContent {
                                                ident: "expand",
                                                params: [],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "ideasInv",
                                            args: [
                                                Var(
                                                    "put_in_cs",
                                                ),
                                                Var(
                                                    "items",
                                                ),
                                                Var(
                                                    "status",
                                                ),
                                                Var(
                                                    "H",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                                Var(
                                                    "take_in_cs",
                                                ),
                                                Var(
                                                    "steal_in_cs",
                                                ),
                                                Var(
                                                    "h_ss",
                                                ),
                                                Var(
                                                    "t_ss",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "tid",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "ptTid",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "t",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "T",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "oldH",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "H",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "oldT",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "T",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Ge,
                                                                rhs: Var(
                                                                    "T",
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "status",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "NOT_IN_Q",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "items",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "EMPTY",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "writeItems_put",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                            Var(
                                                "t",
                                            ),
                                            Var(
                                                "task",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "oldH",
                                            "oldT",
                                        ],
                                        target: "GhostRead",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "oldStatusT",
                                        ],
                                        target: "GhostReadStatus",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Yield(
                                YieldCmd,
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        Attr(
                                            AttrContent {
                                                ident: "expand",
                                                params: [],
                                            },
                                        ),
                                    ],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "queueInv",
                                                                            args: [
                                                                                Var(
                                                                                    "steal_in_cs",
                                                                                ),
                                                                                Var(
                                                                                    "put_in_cs",
                                                                                ),
                                                                                Var(
                                                                                    "take_in_cs",
                                                                                ),
                                                                                Var(
                                                                                    "items",
                                                                                ),
                                                                                Var(
                                                                                    "status",
                                                                                ),
                                                                                Var(
                                                                                    "H",
                                                                                ),
                                                                                Var(
                                                                                    "T",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "t",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "T",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "tid",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "ptTid",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Var(
                                                                "take_in_cs",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Var(
                                                "put_in_cs",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                        Attr(
                                            AttrContent {
                                                ident: "expand",
                                                params: [],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "ideasInv",
                                            args: [
                                                Var(
                                                    "put_in_cs",
                                                ),
                                                Var(
                                                    "items",
                                                ),
                                                Var(
                                                    "status",
                                                ),
                                                Var(
                                                    "H",
                                                ),
                                                Var(
                                                    "T",
                                                ),
                                                Var(
                                                    "take_in_cs",
                                                ),
                                                Var(
                                                    "steal_in_cs",
                                                ),
                                                Var(
                                                    "h_ss",
                                                ),
                                                Var(
                                                    "t_ss",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "items",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "t",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "task",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Logical(
                                        LogicalExpr {
                                            lhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "oldH",
                                                    ),
                                                    op: Le,
                                                    rhs: Var(
                                                        "H",
                                                    ),
                                                },
                                            ),
                                            op: And,
                                            rhs: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "oldT",
                                                    ),
                                                    op: Eq,
                                                    rhs: Var(
                                                        "T",
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "3",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: Quant(
                                        QuantExpr {
                                            kind: ForAll,
                                            body: QuantBody {
                                                type_params: [],
                                                bound_vars: [
                                                    AttrTypedIdentsWhere {
                                                        attrs: [],
                                                        typed_idents_where: TypedIdentsWhere {
                                                            typed_idents: TypedIdents {
                                                                idents: [
                                                                    "i",
                                                                ],
                                                                type_: Atom(
                                                                    Int,
                                                                ),
                                                            },
                                                            where_: None,
                                                        },
                                                    },
                                                ],
                                                attrs: [],
                                                expr: Implies(
                                                    ImpliesExpr {
                                                        lhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Gt,
                                                                rhs: Var(
                                                                    "T",
                                                                ),
                                                            },
                                                        ),
                                                        rhs: Logical(
                                                            LogicalExpr {
                                                                lhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "status",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "NOT_IN_Q",
                                                                        ),
                                                                    },
                                                                ),
                                                                op: And,
                                                                rhs: Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "items",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "i",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "EMPTY",
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "writeT_put",
                                        params: [
                                            Var(
                                                "tid",
                                            ),
                                            Term(
                                                Term {
                                                    lhs: Var(
                                                        "t",
                                                    ),
                                                    op: Add,
                                                    rhs: Nat(
                                                        "1",
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "oldH",
                                            "oldT",
                                        ],
                                        target: "GhostRead",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "4",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_take",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "task",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "taskstatus",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "status",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "status",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "IN_Q",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "status",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "i",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "NOT_IN_Q",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_take",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "take",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "task",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "taskstatus",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "queueInv",
                                                        args: [
                                                            Var(
                                                                "steal_in_cs",
                                                            ),
                                                            Var(
                                                                "put_in_cs",
                                                            ),
                                                            Var(
                                                                "take_in_cs",
                                                            ),
                                                            Var(
                                                                "items",
                                                            ),
                                                            Var(
                                                                "status",
                                                            ),
                                                            Var(
                                                                "H",
                                                            ),
                                                            Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "T",
                                                                    ),
                                                                    op: Sub,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Var(
                                                            "tid",
                                                        ),
                                                        op: Eq,
                                                        rhs: Var(
                                                            "ptTid",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Var(
                                                    "take_in_cs",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Var(
                                            "put_in_cs",
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                            Attr(
                                AttrContent {
                                    ident: "expand",
                                    params: [],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "ideasInv",
                                args: [
                                    Var(
                                        "put_in_cs",
                                    ),
                                    Var(
                                        "items",
                                    ),
                                    Var(
                                        "status",
                                    ),
                                    Var(
                                        "H",
                                    ),
                                    Var(
                                        "T",
                                    ),
                                    Var(
                                        "take_in_cs",
                                    ),
                                    Var(
                                        "steal_in_cs",
                                    ),
                                    Var(
                                        "h_ss",
                                    ),
                                    Var(
                                        "t_ss",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Logical(
                                                    LogicalExpr {
                                                        lhs: FuncCall(
                                                            FuncCall {
                                                                target: "queueInv",
                                                                args: [
                                                                    Var(
                                                                        "steal_in_cs",
                                                                    ),
                                                                    Var(
                                                                        "put_in_cs",
                                                                    ),
                                                                    Var(
                                                                        "take_in_cs",
                                                                    ),
                                                                    Var(
                                                                        "items",
                                                                    ),
                                                                    Var(
                                                                        "status",
                                                                    ),
                                                                    Var(
                                                                        "H",
                                                                    ),
                                                                    Term(
                                                                        Term {
                                                                            lhs: Var(
                                                                                "T",
                                                                            ),
                                                                            op: Sub,
                                                                            rhs: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        op: And,
                                                        rhs: Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "tid",
                                                                ),
                                                                op: Eq,
                                                                rhs: Var(
                                                                    "ptTid",
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Neg(
                                                    NegExpr {
                                                        op: Logical,
                                                        expr: Var(
                                                            "take_in_cs",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Var(
                                                    "put_in_cs",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "task",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "EMPTY",
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "taskstatus",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "IN_Q",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "ideasInv",
                                args: [
                                    Var(
                                        "put_in_cs",
                                    ),
                                    Var(
                                        "items",
                                    ),
                                    Var(
                                        "status",
                                    ),
                                    Var(
                                        "H",
                                    ),
                                    Var(
                                        "T",
                                    ),
                                    Var(
                                        "take_in_cs",
                                    ),
                                    Var(
                                        "steal_in_cs",
                                    ),
                                    Var(
                                        "h_ss",
                                    ),
                                    Var(
                                        "t_ss",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                            "t",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "chk",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "3",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "oldH",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "3",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "oldT",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "yields",
                                                        params: [],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "3",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "3",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "queueInv",
                                                                            args: [
                                                                                Var(
                                                                                    "steal_in_cs",
                                                                                ),
                                                                                Var(
                                                                                    "put_in_cs",
                                                                                ),
                                                                                Var(
                                                                                    "take_in_cs",
                                                                                ),
                                                                                Var(
                                                                                    "items",
                                                                                ),
                                                                                Var(
                                                                                    "status",
                                                                                ),
                                                                                Var(
                                                                                    "H",
                                                                                ),
                                                                                Term(
                                                                                    Term {
                                                                                        lhs: Var(
                                                                                            "T",
                                                                                        ),
                                                                                        op: Sub,
                                                                                        rhs: Nat(
                                                                                            "1",
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "tid",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "ptTid",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: Var(
                                                                        "take_in_cs",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Var(
                                                                "put_in_cs",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "3",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "ideasInv",
                                                    args: [
                                                        Var(
                                                            "put_in_cs",
                                                        ),
                                                        Var(
                                                            "items",
                                                        ),
                                                        Var(
                                                            "status",
                                                        ),
                                                        Var(
                                                            "H",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                        Var(
                                                            "take_in_cs",
                                                        ),
                                                        Var(
                                                            "steal_in_cs",
                                                        ),
                                                        Var(
                                                            "h_ss",
                                                        ),
                                                        Var(
                                                            "t_ss",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "t",
                                                        ],
                                                        target: "readT_take_init",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "oldH",
                                                            "oldT",
                                                        ],
                                                        target: "GhostRead",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Yield(
                                                YieldCmd,
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "queueInv",
                                                                                    args: [
                                                                                        Var(
                                                                                            "steal_in_cs",
                                                                                        ),
                                                                                        Var(
                                                                                            "put_in_cs",
                                                                                        ),
                                                                                        Var(
                                                                                            "take_in_cs",
                                                                                        ),
                                                                                        Var(
                                                                                            "items",
                                                                                        ),
                                                                                        Var(
                                                                                            "status",
                                                                                        ),
                                                                                        Var(
                                                                                            "H",
                                                                                        ),
                                                                                        Term(
                                                                                            Term {
                                                                                                lhs: Var(
                                                                                                    "T",
                                                                                                ),
                                                                                                op: Sub,
                                                                                                rhs: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "tid",
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: Var(
                                                                                        "ptTid",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: Var(
                                                                                "take_in_cs",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Logical,
                                                                    expr: Var(
                                                                        "put_in_cs",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "ideasInv",
                                                            args: [
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Var(
                                                                    "T",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "h_ss",
                                                                ),
                                                                Var(
                                                                    "t_ss",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "t",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "T",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "items",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Term(
                                                                                            Term {
                                                                                                lhs: Var(
                                                                                                    "t",
                                                                                                ),
                                                                                                op: Sub,
                                                                                                rhs: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "EMPTY",
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "H",
                                                                    ),
                                                                    op: Gt,
                                                                    rhs: Term(
                                                                        Term {
                                                                            lhs: Var(
                                                                                "t",
                                                                            ),
                                                                            op: Sub,
                                                                            rhs: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "oldH",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "H",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "oldT",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "T",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "t",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "t",
                                                                ),
                                                                op: Sub,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "writeT_take",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "oldH",
                                                            "oldT",
                                                        ],
                                                        target: "GhostRead",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Yield(
                                                YieldCmd,
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "queueInv",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "steal_in_cs",
                                                                                                ),
                                                                                                Var(
                                                                                                    "put_in_cs",
                                                                                                ),
                                                                                                Var(
                                                                                                    "take_in_cs",
                                                                                                ),
                                                                                                Var(
                                                                                                    "items",
                                                                                                ),
                                                                                                Var(
                                                                                                    "status",
                                                                                                ),
                                                                                                Var(
                                                                                                    "H",
                                                                                                ),
                                                                                                Var(
                                                                                                    "T",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "tid",
                                                                                            ),
                                                                                            op: Eq,
                                                                                            rhs: Var(
                                                                                                "ptTid",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Neg(
                                                                                NegExpr {
                                                                                    op: Logical,
                                                                                    expr: Var(
                                                                                        "take_in_cs",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: Var(
                                                                                "put_in_cs",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "t_ss",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "t",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "ideasInv",
                                                            args: [
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Var(
                                                                    "T",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "h_ss",
                                                                ),
                                                                Var(
                                                                    "t_ss",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "t",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "T",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "items",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "t",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "EMPTY",
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "H",
                                                                    ),
                                                                    op: Gt,
                                                                    rhs: Var(
                                                                        "t",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "oldH",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "H",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "oldT",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "T",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "h",
                                                        ],
                                                        target: "readH_take",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "oldH",
                                                            "oldT",
                                                        ],
                                                        target: "GhostRead",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Yield(
                                                YieldCmd,
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: Logical(
                                                                                        LogicalExpr {
                                                                                            lhs: FuncCall(
                                                                                                FuncCall {
                                                                                                    target: "queueInv",
                                                                                                    args: [
                                                                                                        Var(
                                                                                                            "steal_in_cs",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "put_in_cs",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "take_in_cs",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "items",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "status",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "H",
                                                                                                        ),
                                                                                                        Var(
                                                                                                            "T",
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                            op: And,
                                                                                            rhs: Rel(
                                                                                                RelExpr {
                                                                                                    lhs: Var(
                                                                                                        "tid",
                                                                                                    ),
                                                                                                    op: Eq,
                                                                                                    rhs: Var(
                                                                                                        "ptTid",
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Var(
                                                                                        "take_in_cs",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Neg(
                                                                                NegExpr {
                                                                                    op: Logical,
                                                                                    expr: Var(
                                                                                        "put_in_cs",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "h_ss",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "tid",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "h",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "t_ss",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "t",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Attr(
                                                            AttrContent {
                                                                ident: "expand",
                                                                params: [],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "ideasInv",
                                                            args: [
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Var(
                                                                    "T",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "h_ss",
                                                                ),
                                                                Var(
                                                                    "t_ss",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "t",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "T",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "h",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "H",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "items",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "t",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "EMPTY",
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "H",
                                                                    ),
                                                                    op: Gt,
                                                                    rhs: Var(
                                                                        "t",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "oldH",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "H",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "oldT",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "T",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "h",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "H",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "oldH",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "h",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "t",
                                                                ),
                                                                op: Lt,
                                                                rhs: Var(
                                                                    "h",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [],
                                                                        target: "writeT_take_abort",
                                                                        params: [
                                                                            Var(
                                                                                "tid",
                                                                            ),
                                                                            Var(
                                                                                "h",
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "task",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Var(
                                                                            "EMPTY",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "task",
                                                            "taskstatus",
                                                        ],
                                                        target: "readItems",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                            Var(
                                                                "t",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "oldH",
                                                            "oldT",
                                                        ],
                                                        target: "GhostRead",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Yield(
                                                YieldCmd,
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "H",
                                                            ),
                                                            op: Ge,
                                                            rhs: Var(
                                                                "h",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: FuncCall(
                                                                                        FuncCall {
                                                                                            target: "queueInv",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "steal_in_cs",
                                                                                                ),
                                                                                                Var(
                                                                                                    "put_in_cs",
                                                                                                ),
                                                                                                Var(
                                                                                                    "take_in_cs",
                                                                                                ),
                                                                                                Var(
                                                                                                    "items",
                                                                                                ),
                                                                                                Var(
                                                                                                    "status",
                                                                                                ),
                                                                                                Var(
                                                                                                    "H",
                                                                                                ),
                                                                                                Var(
                                                                                                    "T",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "tid",
                                                                                            ),
                                                                                            op: Eq,
                                                                                            rhs: Var(
                                                                                                "ptTid",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Var(
                                                                                "take_in_cs",
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "h_ss",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "tid",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "h",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "t_ss",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "t",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "ideasInv",
                                                            args: [
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Var(
                                                                    "T",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "h_ss",
                                                                ),
                                                                Var(
                                                                    "t_ss",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "t",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "T",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "task",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "items",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "T",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "T",
                                                                    ),
                                                                    op: Gt,
                                                                    rhs: Var(
                                                                        "H",
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "items",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "T",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "EMPTY",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "oldH",
                                                                                    ),
                                                                                    op: Le,
                                                                                    rhs: Var(
                                                                                        "H",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "oldT",
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: Var(
                                                                                        "T",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Neg(
                                                                        NegExpr {
                                                                            op: Logical,
                                                                            expr: Var(
                                                                                "put_in_cs",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Var(
                                                                "take_in_cs",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "t",
                                                                ),
                                                                op: Gt,
                                                                rhs: Var(
                                                                    "h",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [],
                                                                        target: "takeExitCS",
                                                                        params: [
                                                                            Var(
                                                                                "tid",
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "writeT_take_eq",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                            Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "h",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "oldH",
                                                            "oldT",
                                                        ],
                                                        target: "GhostRead",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Yield(
                                                YieldCmd,
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "queueInv",
                                                                                    args: [
                                                                                        Var(
                                                                                            "steal_in_cs",
                                                                                        ),
                                                                                        Var(
                                                                                            "put_in_cs",
                                                                                        ),
                                                                                        Var(
                                                                                            "take_in_cs",
                                                                                        ),
                                                                                        Var(
                                                                                            "items",
                                                                                        ),
                                                                                        Var(
                                                                                            "status",
                                                                                        ),
                                                                                        Var(
                                                                                            "H",
                                                                                        ),
                                                                                        Term(
                                                                                            Term {
                                                                                                lhs: Var(
                                                                                                    "T",
                                                                                                ),
                                                                                                op: Sub,
                                                                                                rhs: Nat(
                                                                                                    "1",
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "tid",
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: Var(
                                                                                        "ptTid",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "h_ss",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "tid",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "h",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "t_ss",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "t",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "ideasInv",
                                                            args: [
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Var(
                                                                    "T",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "h_ss",
                                                                ),
                                                                Var(
                                                                    "t_ss",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "T",
                                                            ),
                                                            op: Eq,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "h",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "oldH",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "H",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "oldT",
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "T",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "task",
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "items",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "t",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Var(
                                                                "put_in_cs",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "chk",
                                                        ],
                                                        target: "CAS_H_take",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                            Var(
                                                                "h",
                                                            ),
                                                            Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "h",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "chk",
                                                        ),
                                                    ),
                                                    then: [
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "4",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_steal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "task",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "taskstatus",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "status",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "status",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "IN_Q",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "status",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "i",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "NOT_IN_Q",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_steal",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "steal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "task",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "taskstatus",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "queueInv",
                                                args: [
                                                    Var(
                                                        "steal_in_cs",
                                                    ),
                                                    Var(
                                                        "put_in_cs",
                                                    ),
                                                    Var(
                                                        "take_in_cs",
                                                    ),
                                                    Var(
                                                        "items",
                                                    ),
                                                    Var(
                                                        "status",
                                                    ),
                                                    Var(
                                                        "H",
                                                    ),
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "T",
                                                            ),
                                                            op: Sub,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "stealerTid",
                                                args: [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Neg(
                                    NegExpr {
                                        op: Logical,
                                        expr: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "steal_in_cs",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "ideasInv",
                                args: [
                                    Var(
                                        "put_in_cs",
                                    ),
                                    Var(
                                        "items",
                                    ),
                                    Var(
                                        "status",
                                    ),
                                    Var(
                                        "H",
                                    ),
                                    Var(
                                        "T",
                                    ),
                                    Var(
                                        "take_in_cs",
                                    ),
                                    Var(
                                        "steal_in_cs",
                                    ),
                                    Var(
                                        "h_ss",
                                    ),
                                    Var(
                                        "t_ss",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "queueInv",
                                                args: [
                                                    Var(
                                                        "steal_in_cs",
                                                    ),
                                                    Var(
                                                        "put_in_cs",
                                                    ),
                                                    Var(
                                                        "take_in_cs",
                                                    ),
                                                    Var(
                                                        "items",
                                                    ),
                                                    Var(
                                                        "status",
                                                    ),
                                                    Var(
                                                        "H",
                                                    ),
                                                    Term(
                                                        Term {
                                                            lhs: Var(
                                                                "T",
                                                            ),
                                                            op: Sub,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: And,
                                        rhs: Neg(
                                            NegExpr {
                                                op: Logical,
                                                expr: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "steal_in_cs",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "tid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Implies(
                                    ImpliesExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "task",
                                                ),
                                                op: Neq,
                                                rhs: Var(
                                                    "EMPTY",
                                                ),
                                            },
                                        ),
                                        rhs: Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "taskstatus",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "IN_Q",
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "layer",
                                    params: [
                                        Expr(
                                            Nat(
                                                "3",
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ],
                        proposition: FuncCall(
                            FuncCall {
                                target: "ideasInv",
                                args: [
                                    Var(
                                        "put_in_cs",
                                    ),
                                    Var(
                                        "items",
                                    ),
                                    Var(
                                        "status",
                                    ),
                                    Var(
                                        "H",
                                    ),
                                    Var(
                                        "T",
                                    ),
                                    Var(
                                        "take_in_cs",
                                    ),
                                    Var(
                                        "steal_in_cs",
                                    ),
                                    Var(
                                        "h_ss",
                                    ),
                                    Var(
                                        "t_ss",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "h",
                                            "t",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "chk",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "3",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "oldH",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "3",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "oldT",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        BoolLit(
                                            true,
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "yields",
                                                        params: [],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "3",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "3",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "stealerTid",
                                                    args: [
                                                        Var(
                                                            "tid",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "3",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "queueInv",
                                                    args: [
                                                        Var(
                                                            "steal_in_cs",
                                                        ),
                                                        Var(
                                                            "put_in_cs",
                                                        ),
                                                        Var(
                                                            "take_in_cs",
                                                        ),
                                                        Var(
                                                            "items",
                                                        ),
                                                        Var(
                                                            "status",
                                                        ),
                                                        Var(
                                                            "H",
                                                        ),
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "T",
                                                                ),
                                                                op: Sub,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "3",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "ideasInv",
                                                    args: [
                                                        Var(
                                                            "put_in_cs",
                                                        ),
                                                        Var(
                                                            "items",
                                                        ),
                                                        Var(
                                                            "status",
                                                        ),
                                                        Var(
                                                            "H",
                                                        ),
                                                        Var(
                                                            "T",
                                                        ),
                                                        Var(
                                                            "take_in_cs",
                                                        ),
                                                        Var(
                                                            "steal_in_cs",
                                                        ),
                                                        Var(
                                                            "h_ss",
                                                        ),
                                                        Var(
                                                            "t_ss",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "3",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Neg(
                                                NegExpr {
                                                    op: Logical,
                                                    expr: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "steal_in_cs",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "tid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "h",
                                                        ],
                                                        target: "readH_steal",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "oldH",
                                                            "oldT",
                                                        ],
                                                        target: "GhostRead",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Yield(
                                                YieldCmd,
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "H",
                                                            ),
                                                            op: Ge,
                                                            rhs: Var(
                                                                "h",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Neg(
                                                        NegExpr {
                                                            op: Logical,
                                                            expr: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "steal_in_cs",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "tid",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "h_ss",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "tid",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Var(
                                                                "h",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "queueInv",
                                                            args: [
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Term(
                                                                    Term {
                                                                        lhs: Var(
                                                                            "T",
                                                                        ),
                                                                        op: Sub,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Attr(
                                                            AttrContent {
                                                                ident: "expand",
                                                                params: [],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "ideasInv",
                                                            args: [
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Var(
                                                                    "T",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "h_ss",
                                                                ),
                                                                Var(
                                                                    "t_ss",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "oldH",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "H",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "t",
                                                        ],
                                                        target: "readT_steal",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "oldH",
                                                            "oldT",
                                                        ],
                                                        target: "GhostRead",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Yield(
                                                YieldCmd,
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "steal_in_cs",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "tid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: FuncCall(
                                                                                FuncCall {
                                                                                    target: "stealerTid",
                                                                                    args: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "H",
                                                                                    ),
                                                                                    op: Ge,
                                                                                    rhs: Var(
                                                                                        "h",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "steal_in_cs",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "h_ss",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "h",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "queueInv",
                                                            args: [
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Term(
                                                                    Term {
                                                                        lhs: Var(
                                                                            "T",
                                                                        ),
                                                                        op: Sub,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "ideasInv",
                                                            args: [
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Var(
                                                                    "T",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "h_ss",
                                                                ),
                                                                Var(
                                                                    "t_ss",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "oldH",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Var(
                                                                        "H",
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "t",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "t_ss",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Logical(
                                                                                LogicalExpr {
                                                                                    lhs: Rel(
                                                                                        RelExpr {
                                                                                            lhs: Var(
                                                                                                "h",
                                                                                            ),
                                                                                            op: Lt,
                                                                                            rhs: Var(
                                                                                                "t",
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    op: And,
                                                                                    rhs: Var(
                                                                                        "take_in_cs",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "h_ss",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "ptTid",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "t_ss",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "ptTid",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "h",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "H",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "H",
                                                                    ),
                                                                    op: Lt,
                                                                    rhs: Var(
                                                                        "T",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "H",
                                                            ),
                                                            op: Ge,
                                                            rhs: Var(
                                                                "h",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "h",
                                                                ),
                                                                op: Ge,
                                                                rhs: Var(
                                                                    "t",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    then: [
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "task",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Var(
                                                                            "EMPTY",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [],
                                                                    call_params: CallParams {
                                                                        returns: [],
                                                                        target: "stealExitCS",
                                                                        params: [
                                                                            Var(
                                                                                "tid",
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: false,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "task",
                                                            "taskstatus",
                                                        ],
                                                        target: "readItems",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                            Var(
                                                                "h",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "oldH",
                                                            "oldT",
                                                        ],
                                                        target: "GhostRead",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Yield(
                                                YieldCmd,
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Logical(
                                                        LogicalExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "stealerTid",
                                                                            args: [
                                                                                Var(
                                                                                    "tid",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "steal_in_cs",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: And,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "h_ss",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "tid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "h",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "queueInv",
                                                            args: [
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Term(
                                                                    Term {
                                                                        lhs: Var(
                                                                            "T",
                                                                        ),
                                                                        op: Sub,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "ideasInv",
                                                            args: [
                                                                Var(
                                                                    "put_in_cs",
                                                                ),
                                                                Var(
                                                                    "items",
                                                                ),
                                                                Var(
                                                                    "status",
                                                                ),
                                                                Var(
                                                                    "H",
                                                                ),
                                                                Var(
                                                                    "T",
                                                                ),
                                                                Var(
                                                                    "take_in_cs",
                                                                ),
                                                                Var(
                                                                    "steal_in_cs",
                                                                ),
                                                                Var(
                                                                    "h_ss",
                                                                ),
                                                                Var(
                                                                    "t_ss",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "oldH",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "H",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "oldH",
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: Var(
                                                                                        "H",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Var(
                                                                                        "H",
                                                                                    ),
                                                                                    op: Eq,
                                                                                    rhs: Var(
                                                                                        "h",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Array(
                                                                                ArrayExpr {
                                                                                    expr: Var(
                                                                                        "h_ss",
                                                                                    ),
                                                                                    subscripts: [
                                                                                        ArraySubscript {
                                                                                            keys: [
                                                                                                Var(
                                                                                                    "tid",
                                                                                                ),
                                                                                            ],
                                                                                            value: None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "h",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "task",
                                                                    ),
                                                                    op: Neq,
                                                                    rhs: Var(
                                                                        "EMPTY",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Logical(
                                                                LogicalExpr {
                                                                    lhs: Logical(
                                                                        LogicalExpr {
                                                                            lhs: Var(
                                                                                "take_in_cs",
                                                                            ),
                                                                            op: And,
                                                                            rhs: Rel(
                                                                                RelExpr {
                                                                                    lhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "h_ss",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "ptTid",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    op: Lt,
                                                                                    rhs: Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "t_ss",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "ptTid",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "h",
                                                                            ),
                                                                            op: Eq,
                                                                            rhs: Var(
                                                                                "H",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "H",
                                                                    ),
                                                                    op: Lt,
                                                                    rhs: Var(
                                                                        "T",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "3",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: Implies(
                                                        ImpliesExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "h",
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "H",
                                                                    ),
                                                                },
                                                            ),
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "status",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "H",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Var(
                                                                        "IN_Q",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "chk",
                                                        ],
                                                        target: "CAS_H_steal",
                                                        params: [
                                                            Var(
                                                                "tid",
                                                            ),
                                                            Var(
                                                                "h",
                                                            ),
                                                            Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "h",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            If(
                                                IfCmd {
                                                    guard: Expr(
                                                        Var(
                                                            "chk",
                                                        ),
                                                    ),
                                                    then: [
                                                        TransferCmd(
                                                            Return(
                                                                ReturnCmd,
                                                            ),
                                                        ),
                                                    ],
                                                    else_: None,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "intro",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "GhostRead",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "oldH",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "oldT",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "oldH",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "H",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "oldT",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "T",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "intro",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "GhostReadStatus",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "oldStatus",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "oldStatus",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "status",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "T",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_readH_take",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "take_in_cs",
                            "h_ss",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "H",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "take_in_cs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "h_ss",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "H",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_readH_take",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "readH_take",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_readH_steal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "h_ss",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "stealerTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "steal_in_cs",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "tid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "H",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "h_ss",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "H",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_readH_steal",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "readH_steal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_readT_take_init",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Neq,
                                            rhs: Var(
                                                "NIL",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "T",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_readT_take_init",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "readT_take_init",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_readT_put",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "put_in_cs",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Neq,
                                            rhs: Var(
                                                "NIL",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "put_in_cs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "T",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_readT_put",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "readT_put",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_readT_steal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "t_ss",
                            "steal_in_cs",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Neq,
                                            rhs: Var(
                                                "NIL",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "stealerTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "steal_in_cs",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "tid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "T",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "t_ss",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "T",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "steal_in_cs",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_readT_steal",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "readT_steal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_readItems",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ind",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "y",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "items",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "ind",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "b",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "status",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "ind",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_readItems",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "readItems",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "ind",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "y",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "b",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_writeT_put",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "T",
                            "put_in_cs",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "T",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Term(
                                            Term {
                                                lhs: Var(
                                                    "T",
                                                ),
                                                op: Add,
                                                rhs: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "put_in_cs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_writeT_put",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "writeT_put",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_writeT_take",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "T",
                            "t_ss",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "T",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "val",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "t_ss",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "val",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_writeT_take",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "writeT_take",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_writeT_take_abort",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "T",
                            "take_in_cs",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Var(
                                        "take_in_cs",
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "T",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "val",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "take_in_cs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_writeT_take_abort",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "writeT_take_abort",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_writeT_take_eq",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "T",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "T",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "val",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_writeT_take_eq",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "writeT_take_eq",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_takeExitCS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "take_in_cs",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "take_in_cs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_takeExitCS",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "takeExitCS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_stealExitCS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "steal_in_cs",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "stealerTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "steal_in_cs",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "tid",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "steal_in_cs",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "tid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_stealExitCS",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "stealExitCS",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_writeItems",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "idx",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "items",
                            "status",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "val",
                                            ),
                                            op: Neq,
                                            rhs: Var(
                                                "EMPTY",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "items",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "idx",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "val",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "status",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "idx",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "IN_Q",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_writeItems",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "writeItems",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "idx",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_writeItems_put",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "idx",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "items",
                            "status",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "val",
                                            ),
                                            op: Neq,
                                            rhs: Var(
                                                "EMPTY",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "items",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "idx",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "val",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "status",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "idx",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "IN_Q",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_writeItems_put",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "writeItems_put",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "idx",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_CAS_H_take",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "prevVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "result",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "status",
                            "H",
                            "take_in_cs",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "tid",
                                            ),
                                            op: Eq,
                                            rhs: Var(
                                                "ptTid",
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "H",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "prevVal",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "status",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "H",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "NOT_IN_Q",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "H",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "H",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "result",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "take_in_cs",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            false,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "result",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "take_in_cs",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_CAS_H_take",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "CAS_H_take",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "prevVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "result",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "1",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "3",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_CAS_H_steal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "prevVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "result",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "status",
                            "H",
                            "steal_in_cs",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "stealerTid",
                                            args: [
                                                Var(
                                                    "tid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "H",
                                                ),
                                                op: Eq,
                                                rhs: Var(
                                                    "prevVal",
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "status",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "H",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Var(
                                                            "NOT_IN_Q",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "H",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "H",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "result",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            true,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "steal_in_cs",
                                                            subscripts: [
                                                                [
                                                                    Var(
                                                                        "tid",
                                                                    ),
                                                                ],
                                                            ],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            false,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "result",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "steal_in_cs",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "tid",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                BoolLit(
                                                                    false,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "0",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_CAS_H_steal",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "CAS_H_steal",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "tid",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "tid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Tid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "prevVal",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "val",
                                ],
                                type_: Atom(
                                    Int,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "result",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
]

[Printed]
type {:linear "tid"} Tid;

const nil: Tid;

var {:layer 0, 3} H: int;

var {:layer 0, 3} T: int;

var {:layer 0, 3} items: [int]int;

var {:layer 0, 4} status: [int]bool;

var {:layer 0, 3} take_in_cs: bool;

var {:layer 0, 3} put_in_cs: bool;

var {:layer 0, 3} steal_in_cs: [Tid]bool;

var {:layer 0, 3} h_ss: [Tid]int;

var {:layer 0, 3} t_ss: [Tid]int;

const IN_Q: bool;

const NOT_IN_Q: bool;

axiom IN_Q == true;

axiom NOT_IN_Q == false;

const unique EMPTY: int;

const unique NIL: Tid;

const unique ptTid: Tid;

axiom ptTid != NIL;

function {:define} stealerTid(tid: Tid): (bool) {
  tid != NIL && tid != ptTid
}

function {:define} ideasInv(put_in_cs: bool, items: [int]int, status: [int]bool, H: int, T: int, take_in_cs: bool, steal_in_cs: [Tid]bool, h_ss: [Tid]int, t_ss: [Tid]int): (bool) {
  (take_in_cs && h_ss[ptTid] < t_ss[ptTid] ==> t_ss[ptTid] == T && H <= T && items[T] != EMPTY && status[T] == IN_Q) && (put_in_cs ==> !take_in_cs) && (take_in_cs ==> !put_in_cs) && (take_in_cs && H != h_ss[ptTid] ==> H > h_ss[ptTid]) && (forall td: Tid :: stealerTid(td) && steal_in_cs[td] && H == h_ss[td] && H < t_ss[td] ==> items[H] != EMPTY && status[H] == IN_Q) && (forall td: Tid :: stealerTid(td) && steal_in_cs[td] && H != h_ss[td] ==> H > h_ss[td])
}

function {:define} queueInv(steal_in_cs: [Tid]bool, put_in_cs: bool, take_in_cs: bool, items: [int]int, status: [int]bool, _H: int, _T: int): (bool) {
  (forall i: int :: _H <= i && i <= _T ==> status[i] == IN_Q && items[i] != EMPTY)
}

function {:define} emptyInv(put_in_cs: bool, take_in_cs: bool, items: [int]int, status: [int]bool, T: int): (bool) {
  (forall i: int :: i >= T && !put_in_cs && !take_in_cs ==> status[i] == NOT_IN_Q && items[i] == EMPTY)
}

function {:define} putInv(items: [int]int, status: [int]bool, H: int, T: int): (bool) {
  (forall i: int :: H <= i && i < T ==> status[i] == IN_Q && items[i] != EMPTY)
}

function {:define} takeInv(items: [int]int, status: [int]bool, H: int, T: int, t: int, h: int): (bool) {
  (forall i: int :: h <= i && i <= t ==> status[i] == IN_Q && items[i] != EMPTY && t == T)
}

procedure {:atomic} {:layer 4} atomic_put({:linear "tid"} tid: Tid, task: int)
  modifies status;
{
  var i: int;

  assume status[i] == NOT_IN_Q;
  status[i] := IN_Q;
}

procedure {:yields} {:layer 3} {:refines "atomic_put"} put({:linear "tid"} tid: Tid, task: int)
  requires {:layer 3} {:expand} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && tid == ptTid && task != EMPTY && !take_in_cs && !put_in_cs;
  requires {:layer 3} {:expand} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  requires {:layer 3} {:expand} emptyInv(put_in_cs, take_in_cs, items, status, T);
  ensures {:layer 3} {:expand} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && tid == ptTid && !take_in_cs && !put_in_cs;
  ensures {:layer 3} {:expand} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  ensures {:layer 3} {:expand} emptyInv(put_in_cs, take_in_cs, items, status, T);
{
  var t: int;
  var {:layer 3} oldH: int;
  var {:layer 3} oldT: int;
  var {:layer 3} oldStatusT: bool;

  call t := readT_put(tid);
  call oldH, oldT := GhostRead();
  yield;
  assert {:layer 3} {:expand} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && tid == ptTid && !take_in_cs && put_in_cs;
  assert {:layer 3} {:expand} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  assert {:layer 3} tid == ptTid && t == T;
  assert {:layer 3} oldH <= H && oldT == T;
  assert {:layer 3} (forall i: int :: i >= T ==> status[i] == NOT_IN_Q && items[i] == EMPTY);
  call writeItems_put(tid, t, task);
  call oldH, oldT := GhostRead();
  call oldStatusT := GhostReadStatus();
  yield;
  assert {:layer 3} {:expand} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T) && t == T && tid == ptTid && !take_in_cs && put_in_cs;
  assert {:layer 3} {:expand} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  assert {:layer 3} items[t] == task;
  assert {:layer 3} oldH <= H && oldT == T;
  assert {:layer 3} (forall i: int :: i > T ==> status[i] == NOT_IN_Q && items[i] == EMPTY);
  call writeT_put(tid, t + 1);
  call oldH, oldT := GhostRead();
}

procedure {:atomic} {:layer 4} atomic_take({:linear "tid"} tid: Tid) returns (task: int, taskstatus: bool)
  modifies status;
{
  var i: int;

  if (*) {
    assume status[i] == IN_Q;
    status[i] := NOT_IN_Q;
  }
}

procedure {:yields} {:layer 3} {:refines "atomic_take"} take({:linear "tid"} tid: Tid) returns (task: int, taskstatus: bool)
  requires {:layer 3} {:expand} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && tid == ptTid && !take_in_cs && !put_in_cs;
  requires {:layer 3} {:expand} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  ensures {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && tid == ptTid && !take_in_cs && !put_in_cs && (task != EMPTY ==> taskstatus == IN_Q);
  ensures {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
{
  var h, t: int;
  var chk: bool;
  var {:layer 3} oldH: int;
  var {:layer 3} oldT: int;

  while (true)
    invariant {:yields} {:layer 3} true;
    invariant {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && tid == ptTid && !take_in_cs && !put_in_cs;
    invariant {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  {
    call t := readT_take_init(tid);
    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && tid == ptTid && !take_in_cs && !put_in_cs;
    assert {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} t == T;
    assert {:layer 3} items[t - 1] == EMPTY ==> H > t - 1;
    assert {:layer 3} oldH <= H && oldT == T;
    t := t - 1;
    call writeT_take(tid, t);
    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T) && tid == ptTid && !take_in_cs && !put_in_cs && t_ss[tid] == t;
    assert {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} t == T;
    assert {:layer 3} items[t] == EMPTY ==> H > t;
    assert {:layer 3} oldH <= H && oldT == T;
    call h := readH_take(tid);
    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T) && tid == ptTid && take_in_cs && !put_in_cs && h_ss[tid] == h && t_ss[tid] == t;
    assert {:layer 3} {:expand} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} t == T;
    assert {:layer 3} h <= H;
    assert {:layer 3} items[t] == EMPTY ==> H > t;
    assert {:layer 3} oldH <= H;
    assert {:layer 3} oldT == T;
    assert {:layer 3} h <= H;
    assert {:layer 3} oldH == h;
    if (t < h) {
      call writeT_take_abort(tid, h);
      task := EMPTY;
      return;
    }
    call task, taskstatus := readItems(tid, t);
    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} H >= h;
    assert {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T) && tid == ptTid && take_in_cs && h_ss[tid] == h && t_ss[tid] == t;
    assert {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} t == T && task == items[T];
    assert {:layer 3} T > H ==> items[T] != EMPTY;
    assert {:layer 3} oldH <= H && oldT == T && !put_in_cs && take_in_cs;
    if (t > h) {
      call takeExitCS(tid);
      return;
    }
    call writeT_take_eq(tid, h + 1);
    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && tid == ptTid && h_ss[tid] == h && t_ss[tid] == t;
    assert {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} T == h + 1;
    assert {:layer 3} oldH <= H;
    assert {:layer 3} oldT == T;
    assert {:layer 3} task == items[t];
    assert {:layer 3} !put_in_cs;
    call chk := CAS_H_take(tid, h, h + 1);
    if (chk) {
      return;
    }
  }
}

procedure {:atomic} {:layer 4} atomic_steal({:linear "tid"} tid: Tid) returns (task: int, taskstatus: bool)
  modifies status;
{
  var i: int;

  if (*) {
    assume status[i] == IN_Q;
    status[i] := NOT_IN_Q;
  }
}

procedure {:yields} {:layer 3} {:refines "atomic_steal"} steal({:linear "tid"} tid: Tid) returns (task: int, taskstatus: bool)
  requires {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && stealerTid(tid) && !steal_in_cs[tid];
  requires {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  ensures {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1) && !steal_in_cs[tid] && (task != EMPTY ==> taskstatus == IN_Q);
  ensures {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
{
  var h, t: int;
  var chk: bool;
  var {:layer 3} oldH: int;
  var {:layer 3} oldT: int;

  while (true)
    invariant {:yields} {:layer 3} true;
    invariant {:layer 3} stealerTid(tid);
    invariant {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1);
    invariant {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    invariant {:layer 3} !steal_in_cs[tid];
  {
    call h := readH_steal(tid);
    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} H >= h;
    assert {:layer 3} !steal_in_cs[tid];
    assert {:layer 3} h_ss[tid] == h;
    assert {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1);
    assert {:layer 3} {:expand} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} oldH <= H;
    call t := readT_steal(tid);
    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} steal_in_cs[tid];
    assert {:layer 3} stealerTid(tid) && H >= h && steal_in_cs[tid] && h_ss[tid] == h;
    assert {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1);
    assert {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} oldH <= H && t == t_ss[tid];
    assert {:layer 3} h < t && take_in_cs && h_ss[ptTid] < t_ss[ptTid] && h == H ==> H < T;
    assert {:layer 3} H >= h;
    if (h >= t) {
      task := EMPTY;
      call stealExitCS(tid);
      return;
    }
    call task, taskstatus := readItems(tid, h);
    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} stealerTid(tid) && steal_in_cs[tid] && h_ss[tid] == h;
    assert {:layer 3} queueInv(steal_in_cs, put_in_cs, take_in_cs, items, status, H, T - 1);
    assert {:layer 3} ideasInv(put_in_cs, items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} oldH <= H;
    assert {:layer 3} oldH == H && H == h && h_ss[tid] == h ==> task != EMPTY;
    assert {:layer 3} take_in_cs && h_ss[ptTid] < t_ss[ptTid] && h == H ==> H < T;
    assert {:layer 3} h == H ==> status[H] == IN_Q;
    call chk := CAS_H_steal(tid, h, h + 1);
    if (chk) {
      return;
    }
  }
}

procedure {:intro} {:layer 3} GhostRead() returns (oldH: int, oldT: int) {
  oldH := H;
  oldT := T;
}

procedure {:intro} {:layer 3} GhostReadStatus() returns (oldStatus: bool) {
  oldStatus := status[T];
}

procedure {:atomic} {:layer 1, 3} atomic_readH_take({:linear "tid"} tid: Tid) returns (y: int)
  modifies take_in_cs, h_ss;
{
  assert tid == ptTid;
  y := H;
  take_in_cs := true;
  h_ss[tid] := H;
}

procedure {:yields} {:layer 0} {:refines "atomic_readH_take"} readH_take({:linear "tid"} tid: Tid) returns (y: int);

procedure {:atomic} {:layer 1, 3} atomic_readH_steal({:linear "tid"} tid: Tid) returns (y: int)
  modifies h_ss;
{
  assert stealerTid(tid);
  assert !steal_in_cs[tid];
  y := H;
  h_ss[tid] := H;
}

procedure {:yields} {:layer 0} {:refines "atomic_readH_steal"} readH_steal({:linear "tid"} tid: Tid) returns (y: int);

procedure {:atomic} {:layer 1, 3} atomic_readT_take_init({:linear "tid"} tid: Tid) returns (y: int) {
  assert tid != NIL;
  assert tid == ptTid;
  y := T;
}

procedure {:yields} {:layer 0} {:refines "atomic_readT_take_init"} readT_take_init({:linear "tid"} tid: Tid) returns (y: int);

procedure {:atomic} {:layer 1, 3} atomic_readT_put({:linear "tid"} tid: Tid) returns (y: int)
  modifies put_in_cs;
{
  assert tid != NIL;
  assert tid == ptTid;
  put_in_cs := true;
  y := T;
}

procedure {:yields} {:layer 0} {:refines "atomic_readT_put"} readT_put({:linear "tid"} tid: Tid) returns (y: int);

procedure {:atomic} {:layer 1, 3} atomic_readT_steal({:linear "tid"} tid: Tid) returns (y: int)
  modifies t_ss, steal_in_cs;
{
  assert tid != NIL;
  assert stealerTid(tid);
  assert !steal_in_cs[tid];
  y := T;
  t_ss[tid] := T;
  steal_in_cs[tid] := true;
}

procedure {:yields} {:layer 0} {:refines "atomic_readT_steal"} readT_steal({:linear "tid"} tid: Tid) returns (y: int);

procedure {:atomic} {:layer 1, 3} atomic_readItems({:linear "tid"} tid: Tid, ind: int) returns (y: int, b: bool) {
  y := items[ind];
  b := status[ind];
}

procedure {:yields} {:layer 0} {:refines "atomic_readItems"} readItems({:linear "tid"} tid: Tid, ind: int) returns (y: int, b: bool);

procedure {:atomic} {:layer 1, 3} atomic_writeT_put({:linear "tid"} tid: Tid, val: int)
  modifies T, put_in_cs;
{
  assert tid == ptTid;
  T := T + 1;
  put_in_cs := false;
}

procedure {:yields} {:layer 0} {:refines "atomic_writeT_put"} writeT_put({:linear "tid"} tid: Tid, val: int);

procedure {:atomic} {:layer 1, 3} atomic_writeT_take({:linear "tid"} tid: Tid, val: int)
  modifies T, t_ss;
{
  assert tid == ptTid;
  T := val;
  t_ss[tid] := val;
}

procedure {:yields} {:layer 0} {:refines "atomic_writeT_take"} writeT_take({:linear "tid"} tid: Tid, val: int);

procedure {:atomic} {:layer 1, 3} atomic_writeT_take_abort({:linear "tid"} tid: Tid, val: int)
  modifies T, take_in_cs;
{
  assert tid == ptTid;
  assert take_in_cs;
  T := val;
  take_in_cs := false;
}

procedure {:yields} {:layer 0} {:refines "atomic_writeT_take_abort"} writeT_take_abort({:linear "tid"} tid: Tid, val: int);

procedure {:atomic} {:layer 1, 3} atomic_writeT_take_eq({:linear "tid"} tid: Tid, val: int)
  modifies T;
{
  assert tid == ptTid;
  T := val;
}

procedure {:yields} {:layer 0} {:refines "atomic_writeT_take_eq"} writeT_take_eq({:linear "tid"} tid: Tid, val: int);

procedure {:atomic} {:layer 1, 3} atomic_takeExitCS({:linear "tid"} tid: Tid)
  modifies take_in_cs;
{
  assert tid == ptTid;
  take_in_cs := false;
}

procedure {:yields} {:layer 0} {:refines "atomic_takeExitCS"} takeExitCS({:linear "tid"} tid: Tid);

procedure {:atomic} {:layer 1, 3} atomic_stealExitCS({:linear "tid"} tid: Tid)
  modifies steal_in_cs;
{
  assert stealerTid(tid);
  assert steal_in_cs[tid];
  steal_in_cs[tid] := false;
}

procedure {:yields} {:layer 0} {:refines "atomic_stealExitCS"} stealExitCS({:linear "tid"} tid: Tid);

procedure {:atomic} {:layer 1, 3} atomic_writeItems({:linear "tid"} tid: Tid, idx: int, val: int)
  modifies items, status;
{
  assert tid == ptTid;
  assert val != EMPTY;
  items[idx] := val;
  status[idx] := IN_Q;
}

procedure {:yields} {:layer 0} {:refines "atomic_writeItems"} writeItems({:linear "tid"} tid: Tid, idx: int, val: int);

procedure {:atomic} {:layer 1, 3} atomic_writeItems_put({:linear "tid"} tid: Tid, idx: int, val: int)
  modifies items, status;
{
  assert tid == ptTid;
  assert val != EMPTY;
  items[idx] := val;
  status[idx] := IN_Q;
}

procedure {:yields} {:layer 0} {:refines "atomic_writeItems_put"} writeItems_put({:linear "tid"} tid: Tid, idx: int, val: int);

procedure {:atomic} {:layer 1, 3} atomic_CAS_H_take({:linear "tid"} tid: Tid, prevVal: int, val: int) returns (result: bool)
  modifies status, H, take_in_cs;
{
  assert tid == ptTid;
  if (H == prevVal) {
    status[H] := NOT_IN_Q;
    H := H + 1;
    result := true;
    take_in_cs := false;
  } else {
    result := false;
    take_in_cs := false;
  }
}

procedure {:yields} {:layer 0} {:refines "atomic_CAS_H_take"} CAS_H_take({:linear "tid"} tid: Tid, prevVal: int, val: int) returns (result: bool);

procedure {:atomic} {:layer 1, 3} atomic_CAS_H_steal({:linear "tid"} tid: Tid, prevVal: int, val: int) returns (result: bool)
  modifies status, H, steal_in_cs;
{
  assert stealerTid(tid);
  if (H == prevVal) {
    status[H] := NOT_IN_Q;
    H := H + 1;
    result := true;
    steal_in_cs[tid] := false;
  } else {
    result := false;
    steal_in_cs[tid] := false;
  }
}

procedure {:yields} {:layer 0} {:refines "atomic_CAS_H_steal"} CAS_H_steal({:linear "tid"} tid: Tid, prevVal: int, val: int) returns (result: bool);

[Input - ../../vendor/boogie/Test/civl/wsq-define.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"
type {:linear "tid"} Tid;
const nil: Tid;

var {:layer 0,3} H: int;
var {:layer 0,3} T: int;
var {:layer 0,3} items: [int]int;
var {:layer 0,4} status: [int]bool;
var {:layer 0,3} take_in_cs: bool;
var {:layer 0,3} put_in_cs: bool;
var {:layer 0,3} steal_in_cs: [Tid]bool;
var {:layer 0,3} h_ss: [Tid]int;
var {:layer 0,3} t_ss: [Tid]int;

const IN_Q: bool;
const NOT_IN_Q: bool;
axiom IN_Q == true;
axiom NOT_IN_Q == false;

const unique EMPTY: int;
const unique NIL: Tid;
const unique ptTid: Tid;
axiom ptTid != NIL;

function {:define} stealerTid(tid: Tid):(bool) { tid != NIL && tid != ptTid  }

function {:define} ideasInv(put_in_cs:bool,
                           items:[int]int,
                           status: [int]bool,
                H:int, T:int,
                take_in_cs:bool,
                steal_in_cs:[Tid]bool,
                h_ss:[Tid]int,
                    t_ss:[Tid]int
                ):(bool)
{
   (
     ( (take_in_cs) && h_ss[ptTid] < t_ss[ptTid] ==> (t_ss[ptTid] == T && H <= T &&
                                                          items[T] != EMPTY && status[T] == IN_Q) ) &&
     (put_in_cs ==> !take_in_cs) && (take_in_cs ==> !put_in_cs) &&
     (( (take_in_cs) && H != h_ss[ptTid]) ==> H > h_ss[ptTid]) &&
     (forall td:Tid :: (stealerTid(td) && steal_in_cs[td] && H == h_ss[td] && H < t_ss[td]) ==> (items[H] != EMPTY && status[H] == IN_Q)) &&
     (forall td:Tid :: (stealerTid(td) && steal_in_cs[td] && H != h_ss[td]) ==> H > h_ss[td])
    )
}

function {:define} queueInv(steal_in_cs:[Tid]bool,
                           put_in_cs:bool,
                take_in_cs:bool,
                items:[int]int, status: [int]bool, _H:int, _T:int):(bool)
{
   ( (forall i:int :: (_H <= i && i <= _T) ==> (status[i] == IN_Q && items[i] != EMPTY)) )
}

function {:define} emptyInv(put_in_cs:bool, take_in_cs:bool, items:[int]int, status:[int]bool, T:int):(bool)
{
   (forall i:int :: (i>=T && !put_in_cs && !take_in_cs) ==> status[i] == NOT_IN_Q && items[i] == EMPTY)
}

function {:define} putInv(items:[int]int, status: [int]bool, H:int, T:int):(bool)
{
   (forall i:int :: (H <= i && i < T) ==> (status[i] == IN_Q && items[i] != EMPTY))
}

function {:define} takeInv(items:[int]int, status: [int]bool, H:int, T:int, t:int, h:int):(bool)
{
   (forall i:int :: (h <= i && i <= t) ==> (status[i] == IN_Q &&
    items[i] != EMPTY) &&
    t == T
   )
}

procedure {:atomic} {:layer 4} atomic_put({:linear "tid"} tid:Tid, task: int)
modifies status;
{
  var i: int;
  assume status[i] == NOT_IN_Q;
  status[i] := IN_Q;
}

procedure {:yields} {:layer 3} {:refines "atomic_put"} put({:linear "tid"} tid:Tid, task: int)
requires {:layer 3} {:expand} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && tid == ptTid && task != EMPTY && !take_in_cs && !put_in_cs;
requires {:layer 3} {:expand} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
requires {:layer 3} {:expand} emptyInv(put_in_cs, take_in_cs, items,status,T);
ensures {:layer 3} {:expand} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && tid == ptTid && !take_in_cs && !put_in_cs;
ensures {:layer 3} {:expand} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
ensures {:layer 3} {:expand} emptyInv(put_in_cs, take_in_cs, items,status,T);
{
  var t: int;
  var {:layer 3} oldH:int;
  var {:layer 3} oldT:int;
  var {:layer 3} oldStatusT:bool;

  call t := readT_put(tid);

  call oldH, oldT := GhostRead();
  yield;
  assert {:layer 3} {:expand} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && tid == ptTid && !take_in_cs && put_in_cs;
  assert {:layer 3} {:expand} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  assert {:layer 3} tid == ptTid && t == T;
  assert {:layer 3} oldH <= H && oldT == T;
  assert {:layer 3} (forall i:int :: i>=T ==> status[i] == NOT_IN_Q && items[i] == EMPTY);

  call writeItems_put(tid,t, task);

  call oldH, oldT := GhostRead();
  call oldStatusT := GhostReadStatus();
  yield;
  assert {:layer 3} {:expand} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T) && t == T && tid == ptTid && !take_in_cs && put_in_cs;
  assert {:layer 3} {:expand} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  assert {:layer 3} items[t] == task;
  assert {:layer 3} oldH <= H && oldT == T;
  assert {:layer 3} (forall i:int :: i>T ==> status[i] == NOT_IN_Q && items[i] == EMPTY);

  call writeT_put(tid, t+1);

  call oldH, oldT := GhostRead();
}

procedure {:atomic} {:layer 4} atomic_take({:linear "tid"} tid:Tid) returns (task: int, taskstatus: bool)
modifies status;
{
  var i: int;
  if (*) {
    assume status[i] == IN_Q;
    status[i] := NOT_IN_Q;
  }
}

procedure {:yields} {:layer 3} {:refines "atomic_take"} take({:linear "tid"} tid:Tid) returns (task: int, taskstatus: bool)
requires {:layer 3} {:expand} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && tid == ptTid && !take_in_cs && !put_in_cs;
requires {:layer 3} {:expand} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
ensures {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && tid == ptTid && !take_in_cs && !put_in_cs && (task != EMPTY ==> taskstatus == IN_Q);
ensures {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
{
  var h, t: int;
  var chk: bool;
  var {:layer 3} oldH:int;
  var {:layer 3} oldT:int;

  while(true)
  invariant {:yields} {:layer 3} true;
  invariant {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && tid == ptTid && !take_in_cs && !put_in_cs;
  invariant {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  {
    call t := readT_take_init(tid);

    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && tid == ptTid && !take_in_cs && !put_in_cs;
    assert {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} t == T;
    assert {:layer 3} items[t-1] == EMPTY ==> H > t-1;
    assert {:layer 3} oldH <= H && oldT == T;

    t := t-1;
    call writeT_take(tid, t);

    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T) && tid == ptTid && !take_in_cs && !put_in_cs && t_ss[tid] == t;
    assert {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} t == T;
    assert {:layer 3} items[t] == EMPTY ==> H > t;
    assert {:layer 3} oldH <= H && oldT == T;

    call h := readH_take(tid);

    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T) && tid == ptTid && take_in_cs  && !put_in_cs && h_ss[tid] == h && t_ss[tid] == t;
    assert {:layer 3} {:expand} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} t == T;
    assert {:layer 3} h <= H;
    assert {:layer 3} items[t] == EMPTY ==> H > t;
    assert {:layer 3} oldH <= H;
    assert {:layer 3} oldT == T;
    assert {:layer 3} h <= H;
    assert {:layer 3} oldH == h;

    if (t<h) {
      call writeT_take_abort(tid, h);
      task := EMPTY;
      return;
    }

    call task, taskstatus := readItems(tid, t);

    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} H >= h;
    assert {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T) && tid == ptTid && take_in_cs && h_ss[tid] == h && t_ss[tid] == t;
    assert {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} t == T && task == items[T];
    assert {:layer 3} T > H ==> items[T] != EMPTY;
    assert {:layer 3} oldH <= H && oldT == T && !put_in_cs && take_in_cs;

    if (t>h) {
      call takeExitCS(tid);
      return;
    }
    call writeT_take_eq(tid, h+1);
    call oldH, oldT := GhostRead();

    yield;
    assert {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && tid == ptTid && h_ss[tid] == h && t_ss[tid] == t;
    assert {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} T == h + 1;
    assert {:layer 3} oldH <= H;
    assert {:layer 3} oldT == T;
    assert {:layer 3} task == items[t];
    assert {:layer 3} !put_in_cs;

    call chk := CAS_H_take(tid, h,h+1);

    if (chk) {
      return;
    }
  }
}

procedure {:atomic} {:layer 4} atomic_steal({:linear "tid"} tid:Tid) returns (task: int, taskstatus: bool)
modifies status;
{
  var i: int;
  if (*) {
    assume status[i] == IN_Q;
    status[i] := NOT_IN_Q;
  }
}

procedure {:yields} {:layer 3} {:refines "atomic_steal"} steal({:linear "tid"} tid:Tid) returns (task: int, taskstatus: bool)
requires {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) && stealerTid(tid) &&
                   !steal_in_cs[tid];
requires {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
ensures {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1) &&
                   !steal_in_cs[tid] && (task != EMPTY ==> taskstatus == IN_Q);
ensures {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
{
  var h, t: int;
  var chk: bool;
  var {:layer 3} oldH:int;
  var {:layer 3} oldT:int;

  while(true)
  invariant {:yields} {:layer 3} true;
  invariant {:layer 3} stealerTid(tid);
  invariant {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1);
  invariant {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
  invariant {:layer 3} !steal_in_cs[tid];
  {
    call h := readH_steal(tid);

    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} H >= h;
    assert {:layer 3} !steal_in_cs[tid];
    assert {:layer 3} h_ss[tid] == h;
    assert {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1);
    assert {:layer 3} {:expand} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} oldH <= H;

    call t := readT_steal(tid);

    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} steal_in_cs[tid];
    assert {:layer 3} stealerTid(tid) && H >= h && steal_in_cs[tid] && h_ss[tid] == h;
    assert {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1);
    assert {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} oldH <= H && t == t_ss[tid];
    assert {:layer 3} (h < t && take_in_cs && (h_ss[ptTid] < t_ss[ptTid]) && h == H) ==> (H < T);
    assert {:layer 3} H >= h;

    if( h>= t) {
      task := EMPTY;
      call stealExitCS(tid);
      return;
    }

    call task, taskstatus := readItems(tid, h);

    call oldH, oldT := GhostRead();
    yield;
    assert {:layer 3} stealerTid(tid) && steal_in_cs[tid] && h_ss[tid] == h;
    assert {:layer 3} queueInv(steal_in_cs,put_in_cs,take_in_cs,items, status, H, T-1);
    assert {:layer 3} ideasInv(put_in_cs,items, status, H, T, take_in_cs, steal_in_cs, h_ss, t_ss);
    assert {:layer 3} oldH <= H;
    assert {:layer 3} oldH == H && H == h && h_ss[tid] == h ==> task != EMPTY;
    assert {:layer 3} (take_in_cs && (h_ss[ptTid] < t_ss[ptTid]) && h == H) ==> (H < T);
    assert {:layer 3} h == H ==> status[H] == IN_Q;

    call chk := CAS_H_steal(tid, h,h+1);
    if (chk) {
      return;
    }
  }
}

procedure {:intro} {:layer 3} GhostRead() returns (oldH: int, oldT: int)
{
  oldH := H;
  oldT := T;
}

procedure {:intro} {:layer 3} GhostReadStatus() returns (oldStatus: bool)
{
  oldStatus := status[T];
}

procedure {:atomic} {:layer 1,3} atomic_readH_take({:linear "tid"} tid:Tid) returns (y: int)
modifies take_in_cs, h_ss;
{ assert tid == ptTid; y := H; take_in_cs := true; h_ss[tid] := H; }

procedure {:yields} {:layer 0} {:refines "atomic_readH_take"} readH_take({:linear "tid"} tid:Tid) returns (y: int);

procedure {:atomic} {:layer 1,3} atomic_readH_steal({:linear "tid"} tid:Tid) returns (y: int)
modifies h_ss;
{ assert stealerTid(tid); assert !steal_in_cs[tid]; y := H; h_ss[tid] := H; }

procedure {:yields} {:layer 0} {:refines "atomic_readH_steal"} readH_steal({:linear "tid"} tid:Tid) returns (y: int);

procedure {:atomic} {:layer 1,3} atomic_readT_take_init({:linear "tid"} tid:Tid) returns (y: int)
{ assert tid != NIL; assert tid == ptTid; y := T; }

procedure {:yields} {:layer 0} {:refines "atomic_readT_take_init"} readT_take_init({:linear "tid"} tid:Tid) returns (y: int);

procedure {:atomic} {:layer 1,3} atomic_readT_put({:linear "tid"} tid:Tid) returns (y: int)
modifies put_in_cs;
{ assert tid != NIL; assert tid == ptTid; put_in_cs := true; y := T; }

procedure {:yields} {:layer 0} {:refines "atomic_readT_put"} readT_put({:linear "tid"} tid:Tid) returns (y: int);

procedure {:atomic} {:layer 1,3} atomic_readT_steal({:linear "tid"} tid:Tid) returns (y: int)
modifies t_ss, steal_in_cs;
{ assert tid != NIL; assert stealerTid(tid); assert !steal_in_cs[tid]; y := T; t_ss[tid] := T; steal_in_cs[tid] := true; }

procedure {:yields} {:layer 0} {:refines "atomic_readT_steal"} readT_steal({:linear "tid"} tid:Tid) returns (y: int);

procedure {:atomic} {:layer 1,3} atomic_readItems({:linear "tid"} tid:Tid, ind: int) returns (y: int, b:bool)
{ y := items[ind]; b := status[ind]; }

procedure {:yields} {:layer 0} {:refines "atomic_readItems"} readItems({:linear "tid"} tid:Tid, ind: int) returns (y: int, b:bool);

procedure {:atomic} {:layer 1,3} atomic_writeT_put({:linear "tid"} tid:Tid, val: int)
modifies T, put_in_cs;
{ assert tid == ptTid; T := T+1; put_in_cs := false; }

procedure {:yields} {:layer 0} {:refines "atomic_writeT_put"} writeT_put({:linear "tid"} tid:Tid, val: int);

procedure {:atomic} {:layer 1,3} atomic_writeT_take({:linear "tid"} tid:Tid, val: int)
modifies T, t_ss;
{ assert tid == ptTid; T := val; t_ss[tid] := val; }

procedure {:yields} {:layer 0} {:refines "atomic_writeT_take"} writeT_take({:linear "tid"} tid:Tid, val: int);

procedure {:atomic} {:layer 1,3} atomic_writeT_take_abort({:linear "tid"} tid:Tid, val: int)
modifies T, take_in_cs;
{ assert tid == ptTid; assert take_in_cs; T := val; take_in_cs := false; }

procedure {:yields} {:layer 0} {:refines "atomic_writeT_take_abort"} writeT_take_abort({:linear "tid"} tid:Tid, val: int);

procedure {:atomic} {:layer 1,3} atomic_writeT_take_eq({:linear "tid"} tid:Tid, val: int)
modifies T;
{ assert tid == ptTid; T := val; }

procedure {:yields} {:layer 0} {:refines "atomic_writeT_take_eq"} writeT_take_eq({:linear "tid"} tid:Tid, val: int);

procedure {:atomic} {:layer 1,3} atomic_takeExitCS({:linear "tid"} tid:Tid)
modifies take_in_cs;
{ assert tid == ptTid; take_in_cs := false; }

procedure {:yields} {:layer 0} {:refines "atomic_takeExitCS"} takeExitCS({:linear "tid"} tid:Tid);

procedure {:atomic} {:layer 1,3} atomic_stealExitCS({:linear "tid"} tid:Tid)
modifies steal_in_cs;
{ assert stealerTid(tid); assert steal_in_cs[tid]; steal_in_cs[tid] := false; }

procedure {:yields} {:layer 0} {:refines "atomic_stealExitCS"} stealExitCS({:linear "tid"} tid:Tid);

procedure {:atomic} {:layer 1,3} atomic_writeItems({:linear "tid"} tid:Tid, idx: int, val: int)
modifies items, status;
{ assert tid == ptTid; assert val != EMPTY; items[idx] := val; status[idx] := IN_Q; }

procedure {:yields} {:layer 0} {:refines "atomic_writeItems"} writeItems({:linear "tid"} tid:Tid, idx: int, val: int);

procedure {:atomic} {:layer 1,3} atomic_writeItems_put({:linear "tid"} tid:Tid, idx: int, val: int)
modifies items, status;
{ assert tid == ptTid; assert val != EMPTY; items[idx] := val; status[idx] := IN_Q; }

procedure {:yields} {:layer 0} {:refines "atomic_writeItems_put"} writeItems_put({:linear "tid"} tid:Tid, idx: int, val: int);

procedure {:atomic} {:layer 1,3} atomic_CAS_H_take({:linear "tid"} tid:Tid, prevVal :int, val: int) returns (result: bool)
modifies status, H, take_in_cs;
{
  assert tid == ptTid;
  if (H == prevVal) {
    status[H] := NOT_IN_Q;
    H := H+1;
    result := true;
    take_in_cs := false;
  } else {
    result := false;
    take_in_cs := false;
  }
}

procedure {:yields} {:layer 0} {:refines "atomic_CAS_H_take"} CAS_H_take({:linear "tid"} tid:Tid, prevVal :int, val: int) returns (result: bool);

procedure {:atomic} {:layer 1,3} atomic_CAS_H_steal({:linear "tid"} tid:Tid, prevVal :int, val: int) returns (result: bool)
modifies status, H, steal_in_cs;
{
  assert stealerTid(tid);
  if (H == prevVal) {
    status[H] := NOT_IN_Q;
    H := H+1;
    result := true;
    steal_in_cs[tid] := false;
  } else {
    result := false;
    steal_in_cs[tid] := false;
  }
}

procedure {:yields} {:layer 0} {:refines "atomic_CAS_H_steal"} CAS_H_steal({:linear "tid"} tid:Tid, prevVal :int, val: int) returns (result: bool);
