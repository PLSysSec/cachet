---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Local",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "llam",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    Atom(
                                                        Int,
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: Some(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "llam",
                                                ),
                                                op: Eq,
                                                rhs: Quant(
                                                    QuantExpr {
                                                        kind: Lambda,
                                                        body: QuantBody {
                                                            type_params: [],
                                                            bound_vars: [
                                                                AttrTypedIdentsWhere {
                                                                    attrs: [],
                                                                    typed_idents_where: TypedIdentsWhere {
                                                                        typed_idents: TypedIdents {
                                                                            idents: [
                                                                                "n",
                                                                            ],
                                                                            type_: Atom(
                                                                                Int,
                                                                            ),
                                                                        },
                                                                        where_: None,
                                                                    },
                                                                },
                                                            ],
                                                            attrs: [],
                                                            expr: Rel(
                                                                RelExpr {
                                                                    lhs: Var(
                                                                        "n",
                                                                    ),
                                                                    op: Le,
                                                                    rhs: Nat(
                                                                        "0",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "llam",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Var(
        VarDecl {
            attrs: [],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "glam",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    Atom(
                                        Int,
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: Some(
                        Rel(
                            RelExpr {
                                lhs: Var(
                                    "glam",
                                ),
                                op: Eq,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: Lambda,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "n",
                                                            ],
                                                            type_: Atom(
                                                                Int,
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "n",
                                                    ),
                                                    op: Le,
                                                    rhs: Nat(
                                                        "0",
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "Global",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "glam",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "InParameter",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "inlam",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: Some(
                                Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "inlam",
                                        ),
                                        op: Eq,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "n",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "n",
                                                            ),
                                                            op: Le,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "inlam",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "OutParameter",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outlam",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: Some(
                                Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "outlam",
                                        ),
                                        op: Eq,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "n",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "n",
                                                            ),
                                                            op: Le,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "outlam",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Nat(
                                                            "0",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "ProcPlusImpl",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "inlam",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: Some(
                                Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "inlam",
                                        ),
                                        op: Eq,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "n",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "n",
                                                            ),
                                                            op: Le,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outlam",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: Some(
                                Rel(
                                    RelExpr {
                                        lhs: Var(
                                            "outlam",
                                        ),
                                        op: Eq,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "n",
                                                                    ],
                                                                    type_: Atom(
                                                                        Int,
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "n",
                                                            ),
                                                            op: Le,
                                                            rhs: Nat(
                                                                "0",
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                            ),
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Impl(
        ImplDecl {
            proc_sign: ProcSign {
                attrs: [],
                ident: "ProcPlusImpl",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "inlam",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "outlam",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            Atom(
                                                Int,
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            impl_body: ImplBody {
                local_vars: [],
                stmt_list: [],
            },
        },
    ),
]

[Printed]
procedure Local() {
  var llam: [int]bool where llam == (lambda n: int :: n <= 0);

  assert llam[0];
}

var glam: [int]bool where glam == (lambda n: int :: n <= 0);

procedure Global() {
  assert glam[0];
}

procedure InParameter(inlam: [int]bool where inlam == (lambda n: int :: n <= 0)) {
  assert inlam[0];
}

procedure OutParameter() returns (outlam: [int]bool where outlam == (lambda n: int :: n <= 0)) {
  assert outlam[0];
}

procedure ProcPlusImpl(inlam: [int]bool where inlam == (lambda n: int :: n <= 0)) returns (outlam: [int]bool where outlam == (lambda n: int :: n <= 0));

implementation ProcPlusImpl(inlam: [int]bool) returns (outlam: [int]bool) {
}

[Input - ../../vendor/boogie/Test/test2/LambdaWhere.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

// These examples once crashed Boogie (see https://github.com/boogie-org/boogie/issues/111).

procedure Local() {
  var llam: [int]bool where llam == (lambda n: int :: n <= 0);
  assert llam[0];
}

var glam: [int]bool where glam == (lambda n: int :: n <= 0);
procedure Global() {
  assert glam[0];
}

procedure InParameter(inlam: [int]bool where inlam == (lambda n: int :: n <= 0)) {
  assert inlam[0];
}

procedure OutParameter() returns (outlam: [int]bool where outlam == (lambda n: int :: n <= 0)) {
  assert outlam[0];
}

procedure ProcPlusImpl(inlam: [int]bool where inlam == (lambda n: int :: n <= 0))
  returns (outlam: [int]bool where outlam == (lambda n: int :: n <= 0));
implementation ProcPlusImpl(inlam: [int]bool) returns (outlam: [int]bool)
{
}
