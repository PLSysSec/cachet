---
source: crates/bpl/tests/test.rs
assertion_line: 41
expression: snapshot_report
---
[Parsed]
[
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Xid",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "Mid",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "CoordinatorMid",
                ],
                type_: App(
                    TypeApp {
                        head: "Mid",
                        tail: None,
                    },
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Var(
                        "CoordinatorMid",
                    ),
                    op: Eq,
                    rhs: Nat(
                        "0",
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "coordinatorMid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "mid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Mid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Rel(
                    RelExpr {
                        lhs: Var(
                            "mid",
                        ),
                        op: Eq,
                        rhs: Var(
                            "CoordinatorMid",
                        ),
                    },
                ),
            ),
        },
    ),
    Const(
        ConstDecl {
            attrs: [],
            is_unique: false,
            consts: TypedIdents {
                idents: [
                    "numParticipants",
                ],
                type_: Atom(
                    Int,
                ),
            },
            order_spec: None,
        },
    ),
    Axiom(
        AxiomDecl {
            attrs: [],
            proposition: Rel(
                RelExpr {
                    lhs: Nat(
                        "0",
                    ),
                    op: Lt,
                    rhs: Var(
                        "numParticipants",
                    ),
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "participantMid",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "mid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Mid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Nat(
                                    "1",
                                ),
                                op: Le,
                                rhs: Var(
                                    "mid",
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "mid",
                                ),
                                op: Le,
                                rhs: Var(
                                    "numParticipants",
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "datatype",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "pair",
                                },
                            ),
                        ],
                    },
                ),
            ],
            decls: [
                TypeDecl {
                    ident: "Pair",
                    type_params: [],
                    type_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "constructor",
                        params: [],
                    },
                ),
            ],
            ident: "Pair",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "mid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Mid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "Pair",
                        tail: None,
                    },
                ),
            },
            body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "pair",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "mid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Mid",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "p",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Pair",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Rel(
                            RelExpr {
                                lhs: Var(
                                    "p",
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Pair",
                                        args: [
                                            Var(
                                                "xid",
                                            ),
                                            Var(
                                                "mid",
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: FuncCall(
                            FuncCall {
                                target: "participantMid",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "mid#Pair",
                                            args: [
                                                Var(
                                                    "p",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "MState",
                    type_params: [],
                    type_: Some(
                        Atom(
                            Int,
                        ),
                    ),
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "ABORTED",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: Some(
                Nat(
                    "0",
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "UNDECIDED",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: Some(
                Nat(
                    "1",
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "COMMITTED",
            type_params: [],
            var_params: [],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: Some(
                Nat(
                    "2",
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Aborted",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Rel(
                    RelExpr {
                        lhs: Var(
                            "i",
                        ),
                        op: Eq,
                        rhs: FuncCall(
                            FuncCall {
                                target: "ABORTED",
                                args: [],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Undecided",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Rel(
                    RelExpr {
                        lhs: Var(
                            "i",
                        ),
                        op: Eq,
                        rhs: FuncCall(
                            FuncCall {
                                target: "UNDECIDED",
                                args: [],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Committed",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Rel(
                    RelExpr {
                        lhs: Var(
                            "i",
                        ),
                        op: Eq,
                        rhs: FuncCall(
                            FuncCall {
                                target: "COMMITTED",
                                args: [],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "UndecidedOrAborted",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "Undecided",
                                args: [
                                    Var(
                                        "i",
                                    ),
                                ],
                            },
                        ),
                        op: Or,
                        rhs: FuncCall(
                            FuncCall {
                                target: "Aborted",
                                args: [
                                    Var(
                                        "i",
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "UndecidedOrCommitted",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "i",
                    ),
                    type_: App(
                        TypeApp {
                            head: "MState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "Undecided",
                                args: [
                                    Var(
                                        "i",
                                    ),
                                ],
                            },
                        ),
                        op: Or,
                        rhs: FuncCall(
                            FuncCall {
                                target: "Committed",
                                args: [
                                    Var(
                                        "i",
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "XState",
                    type_params: [],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Mid",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "MState",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Type(
        TypeDecls {
            attrs: [],
            decls: [
                TypeDecl {
                    ident: "GState",
                    type_params: [],
                    type_: Some(
                        Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Xid",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: App(
                                    TypeApp {
                                        head: "XState",
                                        tail: None,
                                    },
                                ),
                            },
                        ),
                    ),
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "0",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "11",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "state",
                        ],
                        type_: App(
                            TypeApp {
                                head: "GState",
                                tail: None,
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "7",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "8",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "votes",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Xid",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Int,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "pair",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "7",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "9",
                                ),
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "B",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Pair",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Var(
        VarDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "layer",
                        params: [
                            Expr(
                                Nat(
                                    "7",
                                ),
                            ),
                            Expr(
                                Nat(
                                    "10",
                                ),
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "pair",
                                },
                            ),
                        ],
                    },
                ),
            ],
            vars: [
                TypedIdentsWhere {
                    typed_idents: TypedIdents {
                        idents: [
                            "UnallocatedXids",
                        ],
                        type_: Map(
                            MapType {
                                type_params: [],
                                keys: [
                                    App(
                                        TypeApp {
                                            head: "Xid",
                                            tail: None,
                                        },
                                    ),
                                ],
                                value: Atom(
                                    Bool,
                                ),
                            },
                        ),
                    },
                    where_: None,
                },
            ],
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "xUndecided",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "Undecided",
                                args: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "state",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "CoordinatorMid",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "Mid",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "participantMid",
                                                    args: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "Undecided",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "state",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "xUndecidedOrCommitted",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "UndecidedOrCommitted",
                                args: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "state",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "CoordinatorMid",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "Mid",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "participantMid",
                                                    args: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "UndecidedOrCommitted",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "state",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "xUndecidedOrAborted",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "UndecidedOrAborted",
                                args: [
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "state",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "CoordinatorMid",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "Mid",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "participantMid",
                                                    args: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "UndecidedOrAborted",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "state",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "xConsistent",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "xUndecidedOrCommitted",
                                args: [
                                    Var(
                                        "state",
                                    ),
                                ],
                            },
                        ),
                        op: Or,
                        rhs: FuncCall(
                            FuncCall {
                                target: "xUndecidedOrAborted",
                                args: [
                                    Var(
                                        "state",
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "xNoUndoneDecision",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "oldState",
                    ),
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "newState",
                    ),
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "newState",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "CoordinatorMid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "oldState",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "CoordinatorMid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: Or,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Undecided",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "oldState",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "CoordinatorMid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "i",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "Mid",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [
                                        Trigger(
                                            [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "participantMid",
                                                        args: [
                                                            Var(
                                                                "i",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        ),
                                    ],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "participantMid",
                                                    args: [
                                                        Var(
                                                            "i",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            rhs: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "newState",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "oldState",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "i",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: FuncCall(
                                                        FuncCall {
                                                            target: "Undecided",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "oldState",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "i",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "xConsistentExtension",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "oldState",
                    ),
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "newState",
                    ),
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "xConsistent",
                                args: [
                                    Var(
                                        "newState",
                                    ),
                                ],
                            },
                        ),
                        op: And,
                        rhs: FuncCall(
                            FuncCall {
                                target: "xNoUndoneDecision",
                                args: [
                                    Var(
                                        "oldState",
                                    ),
                                    Var(
                                        "newState",
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "xAllParticipantsInB",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "B",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "mid",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Mid",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Implies(
                                ImpliesExpr {
                                    lhs: FuncCall(
                                        FuncCall {
                                            target: "participantMid",
                                            args: [
                                                Var(
                                                    "mid",
                                                ),
                                            ],
                                        },
                                    ),
                                    rhs: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "B",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Pair",
                                                                args: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                    Var(
                                                                        "mid",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "gUndecided",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "j",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Xid",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: FuncCall(
                                FuncCall {
                                    target: "xUndecided",
                                    args: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "state",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "j",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "gConsistent",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "j",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Xid",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: FuncCall(
                                FuncCall {
                                    target: "xConsistent",
                                    args: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "state",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "j",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "NextStateTrigger",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: None,
                    type_: App(
                        TypeApp {
                            head: "XState",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                BoolLit(
                    true,
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "XidTrigger",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                BoolLit(
                    true,
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "ExistsMonotoneExtension",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "snapshot",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Exists,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "newState",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "XState",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [
                                Trigger(
                                    [
                                        FuncCall(
                                            FuncCall {
                                                target: "NextStateTrigger",
                                                args: [
                                                    Var(
                                                        "newState",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                ),
                            ],
                            expr: Logical(
                                LogicalExpr {
                                    lhs: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "state",
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "snapshot",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: Some(
                                                                Var(
                                                                    "newState",
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    op: And,
                                    rhs: FuncCall(
                                        FuncCall {
                                            target: "xNoUndoneDecision",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "snapshot",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Var(
                                                    "newState",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "VotesEqCoordinatorState",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "votes",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "votes",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Neg(
                                                    NegExpr {
                                                        op: Arith,
                                                        expr: Nat(
                                                            "1",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Aborted",
                                                args: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "state",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "xid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "CoordinatorMid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Rel(
                                    RelExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: Rel(
                                                    RelExpr {
                                                        lhs: Nat(
                                                            "0",
                                                        ),
                                                        op: Le,
                                                        rhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "votes",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "xid",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                op: And,
                                                rhs: Rel(
                                                    RelExpr {
                                                        lhs: Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "votes",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "xid",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        op: Lt,
                                                        rhs: Var(
                                                            "numParticipants",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Eq,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "Undecided",
                                                args: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "state",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "xid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "CoordinatorMid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Rel(
                            RelExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "votes",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "xid",
                                                            ),
                                                        ],
                                                        value: None,
                                                    },
                                                ],
                                            },
                                        ),
                                        op: Eq,
                                        rhs: Var(
                                            "numParticipants",
                                        ),
                                    },
                                ),
                                op: Eq,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Committed",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "state",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "CoordinatorMid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "SetInv",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "B",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: ForAll,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "xid",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Xid",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "mid",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Mid",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Implies(
                                ImpliesExpr {
                                    lhs: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "B",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Pair",
                                                                args: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                    Var(
                                                                        "mid",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                    rhs: FuncCall(
                                        FuncCall {
                                            target: "participantMid",
                                            args: [
                                                Var(
                                                    "mid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Inv_8",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "B",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "votes",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Int,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: Logical(
                            LogicalExpr {
                                lhs: Logical(
                                    LogicalExpr {
                                        lhs: Logical(
                                            LogicalExpr {
                                                lhs: FuncCall(
                                                    FuncCall {
                                                        target: "gConsistent",
                                                        args: [
                                                            Var(
                                                                "state",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                op: And,
                                                rhs: FuncCall(
                                                    FuncCall {
                                                        target: "SetInv",
                                                        args: [
                                                            Var(
                                                                "B",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                        op: And,
                                        rhs: Quant(
                                            QuantExpr {
                                                kind: ForAll,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "xid",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "Xid",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [
                                                        Trigger(
                                                            [
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "XidTrigger",
                                                                        args: [
                                                                            Var(
                                                                                "xid",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    expr: Implies(
                                                        ImpliesExpr {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "XidTrigger",
                                                                    args: [
                                                                        Var(
                                                                            "xid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "VotesEqCoordinatorState",
                                                                    args: [
                                                                        Var(
                                                                            "votes",
                                                                        ),
                                                                        Var(
                                                                            "state",
                                                                        ),
                                                                        Var(
                                                                            "xid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    },
                                ),
                                op: And,
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "xid",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "Xid",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [
                                                Trigger(
                                                    [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "XidTrigger",
                                                                args: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "XidTrigger",
                                                            args: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Logical(
                                                        LogicalExpr {
                                                            lhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "votes",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "xid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: Neg(
                                                                        NegExpr {
                                                                            op: Arith,
                                                                            expr: Nat(
                                                                                "1",
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            op: Or,
                                                            rhs: Rel(
                                                                RelExpr {
                                                                    lhs: Array(
                                                                        ArrayExpr {
                                                                            expr: Var(
                                                                                "votes",
                                                                            ),
                                                                            subscripts: [
                                                                                ArraySubscript {
                                                                                    keys: [
                                                                                        Var(
                                                                                            "xid",
                                                                                        ),
                                                                                    ],
                                                                                    value: None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                    op: Eq,
                                                                    rhs: FuncCall(
                                                                        FuncCall {
                                                                            target: "card",
                                                                            args: [
                                                                                Var(
                                                                                    "B",
                                                                                ),
                                                                                Var(
                                                                                    "xid",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        op: And,
                        rhs: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "p",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "Pair",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Implies(
                                        ImpliesExpr {
                                            lhs: Logical(
                                                LogicalExpr {
                                                    lhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "B",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "p",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "votes",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                FuncCall(
                                                                                    FuncCall {
                                                                                        target: "xid#Pair",
                                                                                        args: [
                                                                                            Var(
                                                                                                "p",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Neq,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Arith,
                                                                    expr: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            rhs: FuncCall(
                                                FuncCall {
                                                    target: "UndecidedOrCommitted",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "state",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "xid#Pair",
                                                                                    args: [
                                                                                        Var(
                                                                                            "p",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            FuncCall(
                                                                                FuncCall {
                                                                                    target: "mid#Pair",
                                                                                    args: [
                                                                                        Var(
                                                                                            "p",
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
            ],
            ident: "Inv_9",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "B",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Bool,
                ),
            },
            body: Some(
                Logical(
                    LogicalExpr {
                        lhs: FuncCall(
                            FuncCall {
                                target: "gConsistent",
                                args: [
                                    Var(
                                        "state",
                                    ),
                                ],
                            },
                        ),
                        op: And,
                        rhs: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "xAllParticipantsInB",
                                        args: [
                                            Var(
                                                "xid",
                                            ),
                                            Var(
                                                "B",
                                            ),
                                        ],
                                    },
                                ),
                                op: Or,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "xUndecidedOrAborted",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "state",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldInv_8",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Inv_8",
                                args: [
                                    Var(
                                        "state",
                                    ),
                                    Var(
                                        "B",
                                    ),
                                    Var(
                                        "votes",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldUndecidedOrCommitted_8",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "pair",
                                        args: [
                                            Var(
                                                "xid",
                                            ),
                                            Var(
                                                "mid",
                                            ),
                                            Var(
                                                "pair",
                                            ),
                                        ],
                                    },
                                ),
                                op: And,
                                rhs: Logical(
                                    LogicalExpr {
                                        lhs: Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "votes",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Neg(
                                                    NegExpr {
                                                        op: Arith,
                                                        expr: Nat(
                                                            "1",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        op: Or,
                                        rhs: FuncCall(
                                            FuncCall {
                                                target: "UndecidedOrCommitted",
                                                args: [
                                                    Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "state",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "xid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                                ArraySubscript {
                                                                    keys: [
                                                                        Var(
                                                                            "mid",
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldAborted_8",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Logical(
                            LogicalExpr {
                                lhs: FuncCall(
                                    FuncCall {
                                        target: "pair",
                                        args: [
                                            Var(
                                                "xid",
                                            ),
                                            Var(
                                                "mid",
                                            ),
                                            Var(
                                                "pair",
                                            ),
                                        ],
                                    },
                                ),
                                op: And,
                                rhs: FuncCall(
                                    FuncCall {
                                        target: "Aborted",
                                        args: [
                                            Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "state",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "mid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "9",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldInv_9",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "Inv_9",
                                args: [
                                    Var(
                                        "state",
                                    ),
                                    Var(
                                        "B",
                                    ),
                                    Var(
                                        "xid",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "9",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldConsistent_9",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "gConsistent",
                                args: [
                                    Var(
                                        "state",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yield_invariant",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "10",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "YieldConsistent_10",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "gConsistent",
                                args: [
                                    Var(
                                        "state",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "witness",
                        params: [
                            String(
                                StringLit {
                                    text: "state",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteNo",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteNo",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteYes",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteNo",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteNo",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteYes",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteYes",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteYes",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "atomic_SetParticipantAborted",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteYes",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "atomic_SetParticipantAborted",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "atomic_Coordinator_VoteNo",
                                },
                            ),
                        ],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "commutativity",
                        params: [
                            String(
                                StringLit {
                                    text: "atomic_Participant_VoteReq",
                                },
                            ),
                            String(
                                StringLit {
                                    text: "atomic_Participant_VoteReq",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "witness",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "state'",
                    ),
                    type_: App(
                        TypeApp {
                            head: "GState",
                            tail: None,
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "second_xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: App(
                    TypeApp {
                        head: "GState",
                        tail: None,
                    },
                ),
            },
            body: Some(
                Array(
                    ArrayExpr {
                        expr: Var(
                            "state",
                        ),
                        subscripts: [
                            ArraySubscript {
                                keys: [
                                    Var(
                                        "second_xid",
                                    ),
                                ],
                                value: Some(
                                    Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "state'",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "second_xid",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                ),
                            },
                        ],
                    },
                ),
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "11",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldInv_8",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldConsistent_9",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldConsistent_10",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "main",
                type_params: [],
                var_params: [],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "xid",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Xid",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Asterisk,
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "yields",
                                                        params: [],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "8",
                                                                ),
                                                            ),
                                                            Expr(
                                                                Nat(
                                                                    "9",
                                                                ),
                                                            ),
                                                            Expr(
                                                                Nat(
                                                                    "10",
                                                                ),
                                                            ),
                                                            Expr(
                                                                Nat(
                                                                    "11",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "yield_loop",
                                                        params: [
                                                            String(
                                                                StringLit {
                                                                    text: "YieldInv_8",
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "yield_loop",
                                                        params: [
                                                            String(
                                                                StringLit {
                                                                    text: "YieldConsistent_9",
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "yield_loop",
                                                        params: [
                                                            String(
                                                                StringLit {
                                                                    text: "YieldConsistent_10",
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "xid",
                                                        ],
                                                        target: "Coordinator_TransactionReq",
                                                        params: [],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "intro",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "GhostRead_8",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "snapshot",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "GState",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "snapshot",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "state",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "intro",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "10",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "GhostRead_10",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "snapshot",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "GState",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "snapshot",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Var(
                                            "state",
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "11",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_Coordinator_TransactionReq",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "state",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "state",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xConsistent",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "state",
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Old(
                                                        OldExpr {
                                                            expr: Var(
                                                                "state",
                                                            ),
                                                        },
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: Some(
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "state",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "10",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_Coordinator_TransactionReq",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldInv_8",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldConsistent_9",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_preserves",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldConsistent_10",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Coordinator_TransactionReq",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "pair",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pair",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Pair",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "linear",
                                        params: [
                                            String(
                                                StringLit {
                                                    text: "pair",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "pairs",
                                        ],
                                        type_: Map(
                                            MapType {
                                                type_params: [],
                                                keys: [
                                                    App(
                                                        TypeApp {
                                                            head: "Pair",
                                                            tail: None,
                                                        },
                                                    ),
                                                ],
                                                value: Atom(
                                                    Bool,
                                                ),
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "10",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "snapshot",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "GState",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Mid",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "xid",
                                            "pairs",
                                        ],
                                        target: "AllocateXid",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "10",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "NextStateTrigger",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "snapshot",
                                        ],
                                        target: "GhostRead_10",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "i",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Nat(
                                            "1",
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            While(
                                WhileCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Var(
                                                    "i",
                                                ),
                                                op: Le,
                                                rhs: Var(
                                                    "numParticipants",
                                                ),
                                            },
                                        ),
                                    ),
                                    invariants: [
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "cooperates",
                                                        params: [],
                                                    },
                                                ),
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "8",
                                                                ),
                                                            ),
                                                            Expr(
                                                                Nat(
                                                                    "9",
                                                                ),
                                                            ),
                                                            Expr(
                                                                Nat(
                                                                    "10",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: BoolLit(
                                                true,
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "8",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Inv_8",
                                                    args: [
                                                        Var(
                                                            "state",
                                                        ),
                                                        Var(
                                                            "B",
                                                        ),
                                                        Var(
                                                            "votes",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "8",
                                                                ),
                                                            ),
                                                            Expr(
                                                                Nat(
                                                                    "10",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Rel(
                                                RelExpr {
                                                    lhs: Var(
                                                        "pairs",
                                                    ),
                                                    op: Eq,
                                                    rhs: Quant(
                                                        QuantExpr {
                                                            kind: Lambda,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "p",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "Pair",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: Logical(
                                                                    LogicalExpr {
                                                                        lhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "pair",
                                                                                args: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                    FuncCall(
                                                                                        FuncCall {
                                                                                            target: "mid#Pair",
                                                                                            args: [
                                                                                                Var(
                                                                                                    "p",
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    Var(
                                                                                        "p",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: And,
                                                                        rhs: Rel(
                                                                            RelExpr {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Le,
                                                                                rhs: FuncCall(
                                                                                    FuncCall {
                                                                                        target: "mid#Pair",
                                                                                        args: [
                                                                                            Var(
                                                                                                "p",
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "8",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Array(
                                                                ArrayExpr {
                                                                    expr: Var(
                                                                        "votes",
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "xid",
                                                                                ),
                                                                            ],
                                                                            value: None,
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                            op: Eq,
                                                            rhs: Neg(
                                                                NegExpr {
                                                                    op: Arith,
                                                                    expr: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    op: Or,
                                                    rhs: Quant(
                                                        QuantExpr {
                                                            kind: ForAll,
                                                            body: QuantBody {
                                                                type_params: [],
                                                                bound_vars: [
                                                                    AttrTypedIdentsWhere {
                                                                        attrs: [],
                                                                        typed_idents_where: TypedIdentsWhere {
                                                                            typed_idents: TypedIdents {
                                                                                idents: [
                                                                                    "p",
                                                                                ],
                                                                                type_: App(
                                                                                    TypeApp {
                                                                                        head: "Pair",
                                                                                        tail: None,
                                                                                    },
                                                                                ),
                                                                            },
                                                                            where_: None,
                                                                        },
                                                                    },
                                                                ],
                                                                attrs: [],
                                                                expr: Implies(
                                                                    ImpliesExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "pairs",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "p",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        rhs: FuncCall(
                                                                            FuncCall {
                                                                                target: "UndecidedOrCommitted",
                                                                                args: [
                                                                                    Array(
                                                                                        ArrayExpr {
                                                                                            expr: Var(
                                                                                                "state",
                                                                                            ),
                                                                                            subscripts: [
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        Var(
                                                                                                            "xid",
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                                ArraySubscript {
                                                                                                    keys: [
                                                                                                        FuncCall(
                                                                                                            FuncCall {
                                                                                                                target: "mid#Pair",
                                                                                                                args: [
                                                                                                                    Var(
                                                                                                                        "p",
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                    value: None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "9",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Inv_9",
                                                    args: [
                                                        Var(
                                                            "state",
                                                        ),
                                                        Var(
                                                            "B",
                                                        ),
                                                        Var(
                                                            "xid",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "10",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "gConsistent",
                                                    args: [
                                                        Var(
                                                            "state",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "10",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "ExistsMonotoneExtension",
                                                    args: [
                                                        Var(
                                                            "snapshot",
                                                        ),
                                                        Var(
                                                            "state",
                                                        ),
                                                        Var(
                                                            "xid",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_free: false,
                                        },
                                        Invariant {
                                            attrs: [
                                                Attr(
                                                    AttrContent {
                                                        ident: "layer",
                                                        params: [
                                                            Expr(
                                                                Nat(
                                                                    "10",
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            expr: Logical(
                                                LogicalExpr {
                                                    lhs: Rel(
                                                        RelExpr {
                                                            lhs: Nat(
                                                                "1",
                                                            ),
                                                            op: Le,
                                                            rhs: Var(
                                                                "i",
                                                            ),
                                                        },
                                                    ),
                                                    op: And,
                                                    rhs: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "i",
                                                            ),
                                                            op: Le,
                                                            rhs: Term(
                                                                Term {
                                                                    lhs: Var(
                                                                        "numParticipants",
                                                                    ),
                                                                    op: Add,
                                                                    rhs: Nat(
                                                                        "1",
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            is_free: false,
                                        },
                                    ],
                                    body: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [],
                                                    call_params: CallParams {
                                                        returns: [
                                                            "pairs",
                                                            "pair",
                                                        ],
                                                        target: "TransferPair",
                                                        params: [
                                                            Var(
                                                                "xid",
                                                            ),
                                                            Var(
                                                                "i",
                                                            ),
                                                            Var(
                                                                "pairs",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: false,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "sync",
                                                                params: [],
                                                            },
                                                        ),
                                                    ],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "Participant_VoteReq",
                                                        params: [
                                                            Var(
                                                                "xid",
                                                            ),
                                                            Var(
                                                                "i",
                                                            ),
                                                            Var(
                                                                "pair",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: true,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Term(
                                                            Term {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Add,
                                                                rhs: Nat(
                                                                    "1",
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "10",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "NextStateTrigger",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "state",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "10",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_Participant_VoteReq",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "state",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "UnallocatedXids",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pair",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                                Var(
                                                    "mid",
                                                ),
                                                Var(
                                                    "pair",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xConsistent",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "state",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xConsistentExtension",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Old(
                                                            OldExpr {
                                                                expr: Var(
                                                                    "state",
                                                                ),
                                                            },
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "state",
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Old(
                                                        OldExpr {
                                                            expr: Var(
                                                                "state",
                                                            ),
                                                        },
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: Some(
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "state",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "9",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_Participant_VoteReq",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldInv_8",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldUndecidedOrCommitted_8",
                                    },
                                ),
                                Expr(
                                    Var(
                                        "xid",
                                    ),
                                ),
                                Expr(
                                    Var(
                                        "mid",
                                    ),
                                ),
                                Expr(
                                    Var(
                                        "pair",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldInv_9",
                                    },
                                ),
                                Expr(
                                    Var(
                                        "xid",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Participant_VoteReq",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Call(
                                                CallCmd {
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "sync",
                                                                params: [],
                                                            },
                                                        ),
                                                    ],
                                                    call_params: CallParams {
                                                        returns: [],
                                                        target: "Coordinator_VoteYes",
                                                        params: [
                                                            Var(
                                                                "xid",
                                                            ),
                                                            Var(
                                                                "mid",
                                                            ),
                                                            Var(
                                                                "pair",
                                                            ),
                                                        ],
                                                    },
                                                    is_async: true,
                                                    is_free: false,
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Call(
                                                        CallCmd {
                                                            attrs: [],
                                                            call_params: CallParams {
                                                                returns: [],
                                                                target: "SetParticipantAborted",
                                                                params: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                    Var(
                                                                        "mid",
                                                                    ),
                                                                    Var(
                                                                        "pair",
                                                                    ),
                                                                ],
                                                            },
                                                            is_async: false,
                                                            is_free: false,
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Call(
                                                        CallCmd {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "sync",
                                                                        params: [],
                                                                    },
                                                                ),
                                                            ],
                                                            call_params: CallParams {
                                                                returns: [],
                                                                target: "Coordinator_VoteNo",
                                                                params: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                    Var(
                                                                        "mid",
                                                                    ),
                                                                    Var(
                                                                        "pair",
                                                                    ),
                                                                ],
                                                            },
                                                            is_async: true,
                                                            is_free: false,
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "9",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_Coordinator_VoteYes",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "state",
                            "B",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "UnallocatedXids",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pair",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                                Var(
                                                    "mid",
                                                ),
                                                Var(
                                                    "pair",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xConsistent",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "B",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pair",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Asterisk,
                                    then: [
                                        LabelOrCmd(
                                            Havoc(
                                                HavocCmd {
                                                    vars: [
                                                        "state",
                                                    ],
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "xAllParticipantsInB",
                                                            args: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                                Var(
                                                                    "B",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "xConsistentExtension",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Old(
                                                                            OldExpr {
                                                                                expr: Var(
                                                                                    "state",
                                                                                ),
                                                                            },
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "state",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assume,
                                                    attrs: [],
                                                    proposition: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "state",
                                                            ),
                                                            op: Eq,
                                                            rhs: Array(
                                                                ArrayExpr {
                                                                    expr: Old(
                                                                        OldExpr {
                                                                            expr: Var(
                                                                                "state",
                                                                            ),
                                                                        },
                                                                    ),
                                                                    subscripts: [
                                                                        ArraySubscript {
                                                                            keys: [
                                                                                Var(
                                                                                    "xid",
                                                                                ),
                                                                            ],
                                                                            value: Some(
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "state",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "xid",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_Coordinator_VoteYes",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldInv_8",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldUndecidedOrCommitted_8",
                                    },
                                ),
                                Expr(
                                    Var(
                                        "xid",
                                    ),
                                ),
                                Expr(
                                    Var(
                                        "mid",
                                    ),
                                ),
                                Expr(
                                    Var(
                                        "pair",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Coordinator_VoteYes",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "commit",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "Mid",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "8",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "snapshot",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "GState",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "XidTrigger",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "snapshot",
                                        ],
                                        target: "GhostRead_8",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "Lemma_add_to_set",
                                        params: [
                                            Var(
                                                "B",
                                            ),
                                            Var(
                                                "pair",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "Lemma_all_in_set",
                                        params: [
                                            Var(
                                                "B",
                                            ),
                                            Var(
                                                "xid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "commit",
                                        ],
                                        target: "StateUpdateOnVoteYes",
                                        params: [
                                            Var(
                                                "xid",
                                            ),
                                            Var(
                                                "mid",
                                            ),
                                            Var(
                                                "pair",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    call_params: CallParams {
                                        returns: [],
                                        target: "Lemma_all_in_set",
                                        params: [
                                            Var(
                                                "B",
                                            ),
                                            Var(
                                                "xid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "XidTrigger",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "NextStateTrigger",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "commit",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "8",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "xUndecidedOrCommitted",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "snapshot",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Claim(
                                                ClaimCmd {
                                                    kind: Assert,
                                                    attrs: [
                                                        Attr(
                                                            AttrContent {
                                                                ident: "layer",
                                                                params: [
                                                                    Expr(
                                                                        Nat(
                                                                            "8",
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    proposition: FuncCall(
                                                        FuncCall {
                                                            target: "xUndecidedOrCommitted",
                                                            args: [
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "state",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        ),
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            While(
                                                WhileCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Le,
                                                                rhs: Var(
                                                                    "numParticipants",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    invariants: [
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "cooperates",
                                                                        params: [],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: BoolLit(
                                                                true,
                                                            ),
                                                            is_free: false,
                                                        },
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: Logical(
                                                                LogicalExpr {
                                                                    lhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Nat(
                                                                                "1",
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Var(
                                                                                "i",
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "i",
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "numParticipants",
                                                                                    ),
                                                                                    op: Add,
                                                                                    rhs: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            is_free: false,
                                                        },
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "Inv_8",
                                                                    args: [
                                                                        Var(
                                                                            "state",
                                                                        ),
                                                                        Var(
                                                                            "B",
                                                                        ),
                                                                        Var(
                                                                            "votes",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            is_free: false,
                                                        },
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "ExistsMonotoneExtension",
                                                                    args: [
                                                                        Var(
                                                                            "snapshot",
                                                                        ),
                                                                        Var(
                                                                            "state",
                                                                        ),
                                                                        Var(
                                                                            "xid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            is_free: false,
                                                        },
                                                    ],
                                                    body: [
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "sync",
                                                                                params: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    call_params: CallParams {
                                                                        returns: [],
                                                                        target: "Participant_Commit",
                                                                        params: [
                                                                            Var(
                                                                                "xid",
                                                                            ),
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: true,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "i",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Term(
                                                                            Term {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "layer",
                                                                                params: [
                                                                                    Expr(
                                                                                        Nat(
                                                                                            "8",
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "XidTrigger",
                                                                            args: [
                                                                                Var(
                                                                                    "xid",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "layer",
                                                                                params: [
                                                                                    Expr(
                                                                                        Nat(
                                                                                            "8",
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "NextStateTrigger",
                                                                            args: [
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "state",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "xid",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "XidTrigger",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "NextStateTrigger",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "9",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_Coordinator_VoteNo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "state",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "UnallocatedXids",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pair",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                                Var(
                                                    "mid",
                                                ),
                                                Var(
                                                    "pair",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xUndecidedOrAborted",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Havoc(
                                HavocCmd {
                                    vars: [
                                        "state",
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xUndecidedOrAborted",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xConsistentExtension",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Old(
                                                            OldExpr {
                                                                expr: Var(
                                                                    "state",
                                                                ),
                                                            },
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Var(
                                                "state",
                                            ),
                                            op: Eq,
                                            rhs: Array(
                                                ArrayExpr {
                                                    expr: Old(
                                                        OldExpr {
                                                            expr: Var(
                                                                "state",
                                                            ),
                                                        },
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: Some(
                                                                Array(
                                                                    ArrayExpr {
                                                                        expr: Var(
                                                                            "state",
                                                                        ),
                                                                        subscripts: [
                                                                            ArraySubscript {
                                                                                keys: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                ],
                                                                                value: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_Coordinator_VoteNo",
                                    },
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "yield_requires",
                            params: [
                                String(
                                    StringLit {
                                        text: "YieldAborted_8",
                                    },
                                ),
                                Expr(
                                    Var(
                                        "xid",
                                    ),
                                ),
                                Expr(
                                    Var(
                                        "mid",
                                    ),
                                ),
                                Expr(
                                    Var(
                                        "pair",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Coordinator_VoteNo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "abort",
                                        ],
                                        type_: Atom(
                                            Bool,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "i",
                                        ],
                                        type_: Atom(
                                            Int,
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                        LocalVars {
                            attrs: [
                                Attr(
                                    AttrContent {
                                        ident: "layer",
                                        params: [
                                            Expr(
                                                Nat(
                                                    "8",
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                            ],
                            vars: [
                                TypedIdentsWhere {
                                    typed_idents: TypedIdents {
                                        idents: [
                                            "snapshot",
                                        ],
                                        type_: App(
                                            TypeApp {
                                                head: "GState",
                                                tail: None,
                                            },
                                        ),
                                    },
                                    where_: None,
                                },
                            ],
                        },
                    ],
                    stmt_list: [
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "snapshot",
                                        ],
                                        target: "GhostRead_8",
                                        params: [],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Call(
                                CallCmd {
                                    attrs: [],
                                    call_params: CallParams {
                                        returns: [
                                            "abort",
                                        ],
                                        target: "StateUpdateOnVoteNo",
                                        params: [
                                            Var(
                                                "xid",
                                            ),
                                            Var(
                                                "mid",
                                            ),
                                        ],
                                    },
                                    is_async: false,
                                    is_free: false,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "XidTrigger",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "NextStateTrigger",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Var(
                                            "abort",
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "i",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        Nat(
                                                            "1",
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                        StructuredCmd(
                                            While(
                                                WhileCmd {
                                                    guard: Expr(
                                                        Rel(
                                                            RelExpr {
                                                                lhs: Var(
                                                                    "i",
                                                                ),
                                                                op: Le,
                                                                rhs: Var(
                                                                    "numParticipants",
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    invariants: [
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "cooperates",
                                                                        params: [],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: BoolLit(
                                                                true,
                                                            ),
                                                            is_free: false,
                                                        },
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: Logical(
                                                                LogicalExpr {
                                                                    lhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Nat(
                                                                                "1",
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Var(
                                                                                "i",
                                                                            ),
                                                                        },
                                                                    ),
                                                                    op: And,
                                                                    rhs: Rel(
                                                                        RelExpr {
                                                                            lhs: Var(
                                                                                "i",
                                                                            ),
                                                                            op: Le,
                                                                            rhs: Term(
                                                                                Term {
                                                                                    lhs: Var(
                                                                                        "numParticipants",
                                                                                    ),
                                                                                    op: Add,
                                                                                    rhs: Nat(
                                                                                        "1",
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            is_free: false,
                                                        },
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "Aborted",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "state",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "xid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "CoordinatorMid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            is_free: false,
                                                        },
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "xUndecidedOrAborted",
                                                                    args: [
                                                                        Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "state",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "xid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            is_free: false,
                                                        },
                                                        Invariant {
                                                            attrs: [
                                                                Attr(
                                                                    AttrContent {
                                                                        ident: "layer",
                                                                        params: [
                                                                            Expr(
                                                                                Nat(
                                                                                    "8",
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                            expr: FuncCall(
                                                                FuncCall {
                                                                    target: "ExistsMonotoneExtension",
                                                                    args: [
                                                                        Var(
                                                                            "snapshot",
                                                                        ),
                                                                        Var(
                                                                            "state",
                                                                        ),
                                                                        Var(
                                                                            "xid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            is_free: false,
                                                        },
                                                    ],
                                                    body: [
                                                        LabelOrCmd(
                                                            Call(
                                                                CallCmd {
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "sync",
                                                                                params: [],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    call_params: CallParams {
                                                                        returns: [],
                                                                        target: "Participant_Abort",
                                                                        params: [
                                                                            Var(
                                                                                "xid",
                                                                            ),
                                                                            Var(
                                                                                "i",
                                                                            ),
                                                                        ],
                                                                    },
                                                                    is_async: true,
                                                                    is_free: false,
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Assign(
                                                                AssignCmd {
                                                                    lhs: [
                                                                        AssignLhs {
                                                                            ident: "i",
                                                                            subscripts: [],
                                                                        },
                                                                    ],
                                                                    rhs: [
                                                                        Term(
                                                                            Term {
                                                                                lhs: Var(
                                                                                    "i",
                                                                                ),
                                                                                op: Add,
                                                                                rhs: Nat(
                                                                                    "1",
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "layer",
                                                                                params: [
                                                                                    Expr(
                                                                                        Nat(
                                                                                            "8",
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "XidTrigger",
                                                                            args: [
                                                                                Var(
                                                                                    "xid",
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                        LabelOrCmd(
                                                            Claim(
                                                                ClaimCmd {
                                                                    kind: Assert,
                                                                    attrs: [
                                                                        Attr(
                                                                            AttrContent {
                                                                                ident: "layer",
                                                                                params: [
                                                                                    Expr(
                                                                                        Nat(
                                                                                            "8",
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    proposition: FuncCall(
                                                                        FuncCall {
                                                                            target: "NextStateTrigger",
                                                                            args: [
                                                                                Array(
                                                                                    ArrayExpr {
                                                                                        expr: Var(
                                                                                            "state",
                                                                                        ),
                                                                                        subscripts: [
                                                                                            ArraySubscript {
                                                                                                keys: [
                                                                                                    Var(
                                                                                                        "xid",
                                                                                                    ),
                                                                                                ],
                                                                                                value: None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: None,
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "XidTrigger",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [
                                        Attr(
                                            AttrContent {
                                                ident: "layer",
                                                params: [
                                                    Expr(
                                                        Nat(
                                                            "8",
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "NextStateTrigger",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "7",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_SetParticipantAborted",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "SetParticipantAborted",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "7",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_StateUpdateOnVoteYes",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "StateUpdateOnVoteYes",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "commit",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "7",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_StateUpdateOnVoteNo",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "StateUpdateOnVoteNo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "abort",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "7",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_Participant_Commit",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Participant_Commit",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "7",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_Participant_Abort",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "Participant_Abort",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "9",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_SetParticipantAborted",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "state",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "pair",
                                            args: [
                                                Var(
                                                    "xid",
                                                ),
                                                Var(
                                                    "mid",
                                                ),
                                                Var(
                                                    "pair",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xUndecidedOrAborted",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "state",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "xid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "mid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "ABORTED",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_StateUpdateOnVoteYes",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "commit",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "votes",
                            "state",
                            "B",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "UnallocatedXids",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "VotesEqCoordinatorState",
                                            args: [
                                                Var(
                                                    "votes",
                                                ),
                                                Var(
                                                    "state",
                                                ),
                                                Var(
                                                    "xid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "B",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "pair",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            true,
                                        ),
                                    ],
                                },
                            ),
                        ),
                        StructuredCmd(
                            If(
                                IfCmd {
                                    guard: Expr(
                                        Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "votes",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Eq,
                                                rhs: Neg(
                                                    NegExpr {
                                                        op: Arith,
                                                        expr: Nat(
                                                            "1",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ),
                                    then: [
                                        LabelOrCmd(
                                            Assign(
                                                AssignCmd {
                                                    lhs: [
                                                        AssignLhs {
                                                            ident: "commit",
                                                            subscripts: [],
                                                        },
                                                    ],
                                                    rhs: [
                                                        BoolLit(
                                                            false,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ],
                                    else_: Some(
                                        Else(
                                            [
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "votes",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "xid",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Term(
                                                                    Term {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "votes",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "xid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Add,
                                                                        rhs: Nat(
                                                                            "1",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "commit",
                                                                    subscripts: [],
                                                                },
                                                            ],
                                                            rhs: [
                                                                Rel(
                                                                    RelExpr {
                                                                        lhs: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "votes",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "xid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                        op: Eq,
                                                                        rhs: Var(
                                                                            "numParticipants",
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                                LabelOrCmd(
                                                    Assign(
                                                        AssignCmd {
                                                            lhs: [
                                                                AssignLhs {
                                                                    ident: "state",
                                                                    subscripts: [
                                                                        [
                                                                            Var(
                                                                                "xid",
                                                                            ),
                                                                        ],
                                                                        [
                                                                            Var(
                                                                                "CoordinatorMid",
                                                                            ),
                                                                        ],
                                                                    ],
                                                                },
                                                            ],
                                                            rhs: [
                                                                IfThenElse(
                                                                    IfThenElseExpr {
                                                                        cond: Var(
                                                                            "commit",
                                                                        ),
                                                                        then: FuncCall(
                                                                            FuncCall {
                                                                                target: "COMMITTED",
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                        else_: Array(
                                                                            ArrayExpr {
                                                                                expr: Var(
                                                                                    "state",
                                                                                ),
                                                                                subscripts: [
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "xid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                    ArraySubscript {
                                                                                        keys: [
                                                                                            Var(
                                                                                                "CoordinatorMid",
                                                                                            ),
                                                                                        ],
                                                                                        value: None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_StateUpdateOnVoteNo",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "abort",
                                ],
                                type_: Atom(
                                    Bool,
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "votes",
                            "state",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "UnallocatedXids",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Neg(
                                        NegExpr {
                                            op: Logical,
                                            expr: FuncCall(
                                                FuncCall {
                                                    target: "Committed",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "state",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "xid",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "CoordinatorMid",
                                                                            ),
                                                                        ],
                                                                        value: None,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "abort",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Rel(
                                            RelExpr {
                                                lhs: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "votes",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                op: Neq,
                                                rhs: Neg(
                                                    NegExpr {
                                                        op: Arith,
                                                        expr: Nat(
                                                            "1",
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "votes",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "xid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        Neg(
                                            NegExpr {
                                                op: Arith,
                                                expr: Nat(
                                                    "1",
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "state",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "xid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "CoordinatorMid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        IfThenElse(
                                            IfThenElseExpr {
                                                cond: Var(
                                                    "abort",
                                                ),
                                                then: FuncCall(
                                                    FuncCall {
                                                        target: "ABORTED",
                                                        args: [],
                                                    },
                                                ),
                                                else_: Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "CoordinatorMid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_Participant_Commit",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "state",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "participantMid",
                                            args: [
                                                Var(
                                                    "mid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xUndecidedOrCommitted",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Committed",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "CoordinatorMid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "state",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "xid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "mid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "COMMITTED",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "left",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_Participant_Abort",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "state",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "participantMid",
                                            args: [
                                                Var(
                                                    "mid",
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "xUndecidedOrAborted",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: FuncCall(
                                        FuncCall {
                                            target: "Aborted",
                                            args: [
                                                Array(
                                                    ArrayExpr {
                                                        expr: Var(
                                                            "state",
                                                        ),
                                                        subscripts: [
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                            ArraySubscript {
                                                                keys: [
                                                                    Var(
                                                                        "CoordinatorMid",
                                                                    ),
                                                                ],
                                                                value: None,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "state",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "xid",
                                                    ),
                                                ],
                                                [
                                                    Var(
                                                        "mid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "ABORTED",
                                                args: [],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "7",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_AllocateXid",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "AllocateXid",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pairs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "yields",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "7",
                                    ),
                                ),
                            ],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "refines",
                            params: [
                                String(
                                    StringLit {
                                        text: "atomic_TransferPair",
                                    },
                                ),
                            ],
                        },
                    ),
                ],
                ident: "TransferPair",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "inPairs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pairs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "atomic",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "10",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_AllocateXid",
                type_params: [],
                var_params: [],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pairs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [
                Modifies(
                    ModifiesSpec {
                        vars: [
                            "UnallocatedXids",
                        ],
                    },
                ),
            ],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "UnallocatedXids",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        Var(
                                                            "xid",
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assume,
                                    attrs: [],
                                    proposition: Rel(
                                        RelExpr {
                                            lhs: Array(
                                                ArrayExpr {
                                                    expr: Var(
                                                        "state",
                                                    ),
                                                    subscripts: [
                                                        ArraySubscript {
                                                            keys: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                            value: None,
                                                        },
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: Quant(
                                                QuantExpr {
                                                    kind: Lambda,
                                                    body: QuantBody {
                                                        type_params: [],
                                                        bound_vars: [
                                                            AttrTypedIdentsWhere {
                                                                attrs: [],
                                                                typed_idents_where: TypedIdentsWhere {
                                                                    typed_idents: TypedIdents {
                                                                        idents: [
                                                                            "j",
                                                                        ],
                                                                        type_: App(
                                                                            TypeApp {
                                                                                head: "Mid",
                                                                                tail: None,
                                                                            },
                                                                        ),
                                                                    },
                                                                    where_: None,
                                                                },
                                                            },
                                                        ],
                                                        attrs: [],
                                                        expr: FuncCall(
                                                            FuncCall {
                                                                target: "UNDECIDED",
                                                                args: [],
                                                            },
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "pairs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Quant(
                                            QuantExpr {
                                                kind: Lambda,
                                                body: QuantBody {
                                                    type_params: [],
                                                    bound_vars: [
                                                        AttrTypedIdentsWhere {
                                                            attrs: [],
                                                            typed_idents_where: TypedIdentsWhere {
                                                                typed_idents: TypedIdents {
                                                                    idents: [
                                                                        "p",
                                                                    ],
                                                                    type_: App(
                                                                        TypeApp {
                                                                            head: "Pair",
                                                                            tail: None,
                                                                        },
                                                                    ),
                                                                },
                                                                where_: None,
                                                            },
                                                        },
                                                    ],
                                                    attrs: [],
                                                    expr: FuncCall(
                                                        FuncCall {
                                                            target: "pair",
                                                            args: [
                                                                Var(
                                                                    "xid",
                                                                ),
                                                                FuncCall(
                                                                    FuncCall {
                                                                        target: "mid#Pair",
                                                                        args: [
                                                                            Var(
                                                                                "p",
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                                Var(
                                                                    "p",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "UnallocatedXids",
                                            subscripts: [
                                                [
                                                    Var(
                                                        "xid",
                                                    ),
                                                ],
                                            ],
                                        },
                                    ],
                                    rhs: [
                                        BoolLit(
                                            false,
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "both",
                            params: [],
                        },
                    ),
                    Attr(
                        AttrContent {
                            ident: "layer",
                            params: [
                                Expr(
                                    Nat(
                                        "8",
                                    ),
                                ),
                                Expr(
                                    Nat(
                                        "10",
                                    ),
                                ),
                            ],
                        },
                    ),
                ],
                ident: "atomic_TransferPair",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "mid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Mid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear_in",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "inPairs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pairs",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [
                            Attr(
                                AttrContent {
                                    ident: "linear",
                                    params: [
                                        String(
                                            StringLit {
                                                text: "pair",
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
            },
            specs: [],
            impl_body: Some(
                ImplBody {
                    local_vars: [],
                    stmt_list: [
                        LabelOrCmd(
                            Claim(
                                ClaimCmd {
                                    kind: Assert,
                                    attrs: [],
                                    proposition: Array(
                                        ArrayExpr {
                                            expr: Var(
                                                "inPairs",
                                            ),
                                            subscripts: [
                                                ArraySubscript {
                                                    keys: [
                                                        FuncCall(
                                                            FuncCall {
                                                                target: "Pair",
                                                                args: [
                                                                    Var(
                                                                        "xid",
                                                                    ),
                                                                    Var(
                                                                        "mid",
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    value: None,
                                                },
                                            ],
                                        },
                                    ),
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "pair",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        FuncCall(
                                            FuncCall {
                                                target: "Pair",
                                                args: [
                                                    Var(
                                                        "xid",
                                                    ),
                                                    Var(
                                                        "mid",
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                        LabelOrCmd(
                            Assign(
                                AssignCmd {
                                    lhs: [
                                        AssignLhs {
                                            ident: "pairs",
                                            subscripts: [],
                                        },
                                    ],
                                    rhs: [
                                        Array(
                                            ArrayExpr {
                                                expr: Var(
                                                    "inPairs",
                                                ),
                                                subscripts: [
                                                    ArraySubscript {
                                                        keys: [
                                                            Var(
                                                                "pair",
                                                            ),
                                                        ],
                                                        value: Some(
                                                            BoolLit(
                                                                false,
                                                            ),
                                                        ),
                                                    },
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [
                Attr(
                    AttrContent {
                        ident: "inline",
                        params: [],
                    },
                ),
                Attr(
                    AttrContent {
                        ident: "linear",
                        params: [
                            String(
                                StringLit {
                                    text: "pair",
                                },
                            ),
                        ],
                    },
                ),
            ],
            ident: "XidSetCollector",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xids",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Map(
                    MapType {
                        type_params: [],
                        keys: [
                            App(
                                TypeApp {
                                    head: "Pair",
                                    tail: None,
                                },
                            ),
                        ],
                        value: Atom(
                            Bool,
                        ),
                    },
                ),
            },
            body: Some(
                Quant(
                    QuantExpr {
                        kind: Lambda,
                        body: QuantBody {
                            type_params: [],
                            bound_vars: [
                                AttrTypedIdentsWhere {
                                    attrs: [],
                                    typed_idents_where: TypedIdentsWhere {
                                        typed_idents: TypedIdents {
                                            idents: [
                                                "p",
                                            ],
                                            type_: App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        },
                                        where_: None,
                                    },
                                },
                            ],
                            attrs: [],
                            expr: Array(
                                ArrayExpr {
                                    expr: Var(
                                        "xids",
                                    ),
                                    subscripts: [
                                        ArraySubscript {
                                            keys: [
                                                FuncCall(
                                                    FuncCall {
                                                        target: "xid#Pair",
                                                        args: [
                                                            Var(
                                                                "p",
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                            value: None,
                                        },
                                    ],
                                },
                            ),
                        },
                    },
                ),
            ),
        },
    ),
    Func(
        FuncDecl {
            attrs: [],
            ident: "card",
            type_params: [],
            var_params: [
                VarOrType {
                    attrs: [],
                    var: Some(
                        "pairs",
                    ),
                    type_: Map(
                        MapType {
                            type_params: [],
                            keys: [
                                App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            ],
                            value: Atom(
                                Bool,
                            ),
                        },
                    ),
                },
                VarOrType {
                    attrs: [],
                    var: Some(
                        "xid",
                    ),
                    type_: App(
                        TypeApp {
                            head: "Xid",
                            tail: None,
                        },
                    ),
                },
            ],
            returns: VarOrType {
                attrs: [],
                var: None,
                type_: Atom(
                    Int,
                ),
            },
            body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "lemma",
                            params: [],
                        },
                    ),
                ],
                ident: "Lemma_add_to_set",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "set",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "pair",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Pair",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "participantMid",
                                args: [
                                    FuncCall(
                                        FuncCall {
                                            target: "mid#Pair",
                                            args: [
                                                Var(
                                                    "pair",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: Neg(
                            NegExpr {
                                op: Logical,
                                expr: Array(
                                    ArrayExpr {
                                        expr: Var(
                                            "set",
                                        ),
                                        subscripts: [
                                            ArraySubscript {
                                                keys: [
                                                    Var(
                                                        "pair",
                                                    ),
                                                ],
                                                value: None,
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Quant(
                            QuantExpr {
                                kind: ForAll,
                                body: QuantBody {
                                    type_params: [],
                                    bound_vars: [
                                        AttrTypedIdentsWhere {
                                            attrs: [],
                                            typed_idents_where: TypedIdentsWhere {
                                                typed_idents: TypedIdents {
                                                    idents: [
                                                        "xid",
                                                    ],
                                                    type_: App(
                                                        TypeApp {
                                                            head: "Xid",
                                                            tail: None,
                                                        },
                                                    ),
                                                },
                                                where_: None,
                                            },
                                        },
                                    ],
                                    attrs: [],
                                    expr: Rel(
                                        RelExpr {
                                            lhs: FuncCall(
                                                FuncCall {
                                                    target: "card",
                                                    args: [
                                                        Array(
                                                            ArrayExpr {
                                                                expr: Var(
                                                                    "set",
                                                                ),
                                                                subscripts: [
                                                                    ArraySubscript {
                                                                        keys: [
                                                                            Var(
                                                                                "pair",
                                                                            ),
                                                                        ],
                                                                        value: Some(
                                                                            BoolLit(
                                                                                true,
                                                                            ),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                        Var(
                                                            "xid",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            op: Eq,
                                            rhs: IfThenElse(
                                                IfThenElseExpr {
                                                    cond: Rel(
                                                        RelExpr {
                                                            lhs: Var(
                                                                "xid",
                                                            ),
                                                            op: Eq,
                                                            rhs: FuncCall(
                                                                FuncCall {
                                                                    target: "xid#Pair",
                                                                    args: [
                                                                        Var(
                                                                            "pair",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    then: Term(
                                                        Term {
                                                            lhs: FuncCall(
                                                                FuncCall {
                                                                    target: "card",
                                                                    args: [
                                                                        Var(
                                                                            "set",
                                                                        ),
                                                                        Var(
                                                                            "xid",
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            op: Add,
                                                            rhs: Nat(
                                                                "1",
                                                            ),
                                                        },
                                                    ),
                                                    else_: FuncCall(
                                                        FuncCall {
                                                            target: "card",
                                                            args: [
                                                                Var(
                                                                    "set",
                                                                ),
                                                                Var(
                                                                    "xid",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
    Proc(
        ProcDecl {
            proc_sign: ProcSign {
                attrs: [
                    Attr(
                        AttrContent {
                            ident: "lemma",
                            params: [],
                        },
                    ),
                ],
                ident: "Lemma_all_in_set",
                type_params: [],
                var_params: [
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "set",
                                ],
                                type_: Map(
                                    MapType {
                                        type_params: [],
                                        keys: [
                                            App(
                                                TypeApp {
                                                    head: "Pair",
                                                    tail: None,
                                                },
                                            ),
                                        ],
                                        value: Atom(
                                            Bool,
                                        ),
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                    AttrTypedIdentsWhere {
                        attrs: [],
                        typed_idents_where: TypedIdentsWhere {
                            typed_idents: TypedIdents {
                                idents: [
                                    "xid",
                                ],
                                type_: App(
                                    TypeApp {
                                        head: "Xid",
                                        tail: None,
                                    },
                                ),
                            },
                            where_: None,
                        },
                    },
                ],
                returns: [],
            },
            specs: [
                Contract(
                    ContractSpec {
                        kind: Requires,
                        attrs: [],
                        proposition: FuncCall(
                            FuncCall {
                                target: "SetInv",
                                args: [
                                    Var(
                                        "set",
                                    ),
                                ],
                            },
                        ),
                        is_free: false,
                    },
                ),
                Contract(
                    ContractSpec {
                        kind: Ensures,
                        attrs: [],
                        proposition: Implies(
                            ImpliesExpr {
                                lhs: Rel(
                                    RelExpr {
                                        lhs: FuncCall(
                                            FuncCall {
                                                target: "card",
                                                args: [
                                                    Var(
                                                        "set",
                                                    ),
                                                    Var(
                                                        "xid",
                                                    ),
                                                ],
                                            },
                                        ),
                                        op: Ge,
                                        rhs: Var(
                                            "numParticipants",
                                        ),
                                    },
                                ),
                                rhs: Quant(
                                    QuantExpr {
                                        kind: ForAll,
                                        body: QuantBody {
                                            type_params: [],
                                            bound_vars: [
                                                AttrTypedIdentsWhere {
                                                    attrs: [],
                                                    typed_idents_where: TypedIdentsWhere {
                                                        typed_idents: TypedIdents {
                                                            idents: [
                                                                "mid",
                                                            ],
                                                            type_: App(
                                                                TypeApp {
                                                                    head: "Mid",
                                                                    tail: None,
                                                                },
                                                            ),
                                                        },
                                                        where_: None,
                                                    },
                                                },
                                            ],
                                            attrs: [],
                                            expr: Implies(
                                                ImpliesExpr {
                                                    lhs: FuncCall(
                                                        FuncCall {
                                                            target: "participantMid",
                                                            args: [
                                                                Var(
                                                                    "mid",
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Array(
                                                        ArrayExpr {
                                                            expr: Var(
                                                                "set",
                                                            ),
                                                            subscripts: [
                                                                ArraySubscript {
                                                                    keys: [
                                                                        FuncCall(
                                                                            FuncCall {
                                                                                target: "Pair",
                                                                                args: [
                                                                                    Var(
                                                                                        "xid",
                                                                                    ),
                                                                                    Var(
                                                                                        "mid",
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                    value: None,
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    },
                                ),
                            },
                        ),
                        is_free: false,
                    },
                ),
            ],
            impl_body: None,
        },
    ),
]

[Printed]
type Xid = int;

type Mid = int;

const CoordinatorMid: Mid;

axiom CoordinatorMid == 0;

function coordinatorMid(mid: Mid): bool {
  mid == CoordinatorMid
}

const numParticipants: int;

axiom 0 < numParticipants;

function participantMid(mid: Mid): bool {
  1 <= mid && mid <= numParticipants
}

type {:datatype} {:linear "pair"} Pair;

function {:constructor} Pair(xid: Xid, mid: Mid): Pair;

function {:inline} pair(xid: Xid, mid: Mid, p: Pair): bool {
  p == Pair(xid, mid) && participantMid(mid#Pair(p))
}

type MState = int;

function {:inline} ABORTED(): int {
  0
}

function {:inline} UNDECIDED(): int {
  1
}

function {:inline} COMMITTED(): int {
  2
}

function {:inline} Aborted(i: MState): bool {
  i == ABORTED()
}

function {:inline} Undecided(i: MState): bool {
  i == UNDECIDED()
}

function {:inline} Committed(i: MState): bool {
  i == COMMITTED()
}

function {:inline} UndecidedOrAborted(i: MState): bool {
  Undecided(i) || Aborted(i)
}

function {:inline} UndecidedOrCommitted(i: MState): bool {
  Undecided(i) || Committed(i)
}

type XState = [Mid]MState;

type GState = [Xid]XState;

var {:layer 0, 11} state: GState;

var {:layer 7, 8} votes: [Xid]int;

var {:linear "pair"} {:layer 7, 9} B: [Pair]bool;

var {:layer 7, 10} {:linear "pair"} UnallocatedXids: [Xid]bool;

function {:inline} xUndecided(state: XState): bool {
  Undecided(state[CoordinatorMid]) && (forall i: Mid :: participantMid(i) ==> Undecided(state[i]))
}

function {:inline} xUndecidedOrCommitted(state: XState): bool {
  UndecidedOrCommitted(state[CoordinatorMid]) && (forall i: Mid :: participantMid(i) ==> UndecidedOrCommitted(state[i]))
}

function {:inline} xUndecidedOrAborted(state: XState): bool {
  UndecidedOrAborted(state[CoordinatorMid]) && (forall i: Mid :: participantMid(i) ==> UndecidedOrAborted(state[i]))
}

function {:inline} xConsistent(state: XState): bool {
  xUndecidedOrCommitted(state) || xUndecidedOrAborted(state)
}

function {:inline} xNoUndoneDecision(oldState: XState, newState: XState): bool {
  (newState[CoordinatorMid] == oldState[CoordinatorMid] || Undecided(oldState[CoordinatorMid])) && (forall i: Mid :: {participantMid(i)} participantMid(i) ==> newState[i] == oldState[i] || Undecided(oldState[i]))
}

function {:inline} xConsistentExtension(oldState: XState, newState: XState): bool {
  xConsistent(newState) && xNoUndoneDecision(oldState, newState)
}

function {:inline} xAllParticipantsInB(xid: Xid, B: [Pair]bool): bool {
  (forall mid: Mid :: participantMid(mid) ==> B[Pair(xid, mid)])
}

function {:inline} gUndecided(state: GState): bool {
  (forall j: Xid :: xUndecided(state[j]))
}

function {:inline} gConsistent(state: GState): bool {
  (forall j: Xid :: xConsistent(state[j]))
}

function NextStateTrigger(XState): bool {
  true
}

function XidTrigger(xid: Xid): bool {
  true
}

function {:inline} ExistsMonotoneExtension(snapshot: GState, state: GState, xid: Xid): bool {
  (exists newState: XState :: {NextStateTrigger(newState)} state == snapshot[xid := newState] && xNoUndoneDecision(snapshot[xid], newState))
}

function {:inline} VotesEqCoordinatorState(votes: [Xid]int, state: GState, xid: Xid): bool {
  (votes[xid] == -1) == Aborted(state[xid][CoordinatorMid]) && (0 <= votes[xid] && votes[xid] < numParticipants) == Undecided(state[xid][CoordinatorMid]) && (votes[xid] == numParticipants) == Committed(state[xid][CoordinatorMid])
}

function {:inline} SetInv(B: [Pair]bool): bool {
  (forall xid: Xid, mid: Mid :: B[Pair(xid, mid)] ==> participantMid(mid))
}

function {:inline} Inv_8(state: GState, B: [Pair]bool, votes: [Xid]int): bool {
  gConsistent(state) && SetInv(B) && (forall xid: Xid :: {XidTrigger(xid)} XidTrigger(xid) ==> VotesEqCoordinatorState(votes, state, xid)) && (forall xid: Xid :: {XidTrigger(xid)} XidTrigger(xid) ==> votes[xid] == -1 || votes[xid] == card(B, xid)) && (forall p: Pair :: B[p] && votes[xid#Pair(p)] != -1 ==> UndecidedOrCommitted(state[xid#Pair(p)][mid#Pair(p)]))
}

function {:inline} Inv_9(state: GState, B: [Pair]bool, xid: Xid): bool {
  gConsistent(state) && (xAllParticipantsInB(xid, B) || xUndecidedOrAborted(state[xid]))
}

procedure {:yield_invariant} {:layer 8} YieldInv_8();
  requires Inv_8(state, B, votes);

procedure {:yield_invariant} {:layer 8} YieldUndecidedOrCommitted_8(xid: Xid, mid: Mid, {:linear "pair"} pair: Pair);
  requires pair(xid, mid, pair) && (votes[xid] == -1 || UndecidedOrCommitted(state[xid][mid]));

procedure {:yield_invariant} {:layer 8} YieldAborted_8(xid: Xid, mid: Mid, {:linear "pair"} pair: Pair);
  requires pair(xid, mid, pair) && Aborted(state[xid][mid]);

procedure {:yield_invariant} {:layer 9} YieldInv_9(xid: Xid);
  requires Inv_9(state, B, xid);

procedure {:yield_invariant} {:layer 9} YieldConsistent_9();
  requires gConsistent(state);

procedure {:yield_invariant} {:layer 10} YieldConsistent_10();
  requires gConsistent(state);

function {:witness "state"} {:commutativity "atomic_Coordinator_VoteNo", "atomic_Coordinator_VoteNo"} {:commutativity "atomic_Coordinator_VoteYes", "atomic_Coordinator_VoteNo"} {:commutativity "atomic_Coordinator_VoteNo", "atomic_Coordinator_VoteYes"} {:commutativity "atomic_Coordinator_VoteYes", "atomic_Coordinator_VoteYes"} {:commutativity "atomic_SetParticipantAborted", "atomic_Coordinator_VoteYes"} {:commutativity "atomic_SetParticipantAborted", "atomic_Coordinator_VoteNo"} {:commutativity "atomic_Participant_VoteReq", "atomic_Participant_VoteReq"} witness(state: GState, state': GState, second_xid: Xid): GState {
  state[second_xid := state'[second_xid]]
}

procedure {:yields} {:layer 11} {:yield_requires "YieldInv_8"} {:yield_requires "YieldConsistent_9"} {:yield_requires "YieldConsistent_10"} main() {
  var xid: Xid;

  while (*)
    invariant {:yields} {:layer 8, 9, 10, 11} {:yield_loop "YieldInv_8"} {:yield_loop "YieldConsistent_9"} {:yield_loop "YieldConsistent_10"} true;
  {
    call xid := Coordinator_TransactionReq();
  }
}

procedure {:intro} {:layer 8} GhostRead_8() returns (snapshot: GState) {
  snapshot := state;
}

procedure {:intro} {:layer 10} GhostRead_10() returns (snapshot: GState) {
  snapshot := state;
}

procedure {:atomic} {:layer 11} atomic_Coordinator_TransactionReq() returns (xid: Xid)
  modifies state;
{
  havoc state;
  assume xConsistent(state[xid]);
  assume state == old (state)[xid := state[xid]];
}

procedure {:yields} {:layer 10} {:refines "atomic_Coordinator_TransactionReq"} {:yield_preserves "YieldInv_8"} {:yield_preserves "YieldConsistent_9"} {:yield_preserves "YieldConsistent_10"} Coordinator_TransactionReq() returns (xid: Xid) {
  var {:linear "pair"} pair: Pair;
  var {:linear "pair"} pairs: [Pair]bool;
  var {:layer 10} snapshot: GState;
  var i: Mid;

  call xid, pairs := AllocateXid();
  assert {:layer 10} NextStateTrigger(state[xid]);
  call snapshot := GhostRead_10();
  i := 1;
  while (i <= numParticipants)
    invariant {:cooperates} {:layer 8, 9, 10} true;
    invariant {:layer 8} Inv_8(state, B, votes);
    invariant {:layer 8, 10} pairs == (lambda p: Pair :: pair(xid, mid#Pair(p), p) && i <= mid#Pair(p));
    invariant {:layer 8} votes[xid] == -1 || (forall p: Pair :: pairs[p] ==> UndecidedOrCommitted(state[xid][mid#Pair(p)]));
    invariant {:layer 9} Inv_9(state, B, xid);
    invariant {:layer 10} gConsistent(state);
    invariant {:layer 10} ExistsMonotoneExtension(snapshot, state, xid);
    invariant {:layer 10} 1 <= i && i <= numParticipants + 1;
  {
    call pairs, pair := TransferPair(xid, i, pairs);
    async call {:sync} Participant_VoteReq(xid, i, pair);
    i := i + 1;
    assert {:layer 10} NextStateTrigger(state[xid]);
  }
}

procedure {:left} {:layer 10} atomic_Participant_VoteReq(xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
  modifies state;
{
  assert !UnallocatedXids[xid];
  assert pair(xid, mid, pair);
  assert xConsistent(state[xid]);
  havoc state;
  assume xConsistentExtension(old (state)[xid], state[xid]);
  assume state == old (state)[xid := state[xid]];
}

procedure {:yields} {:layer 9} {:refines "atomic_Participant_VoteReq"} {:yield_requires "YieldInv_8"} {:yield_requires "YieldUndecidedOrCommitted_8", xid, mid, pair} {:yield_requires "YieldInv_9", xid} Participant_VoteReq(xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair) {
  if (*) {
    async call {:sync} Coordinator_VoteYes(xid, mid, pair);
  } else {
    call SetParticipantAborted(xid, mid, pair);
    async call {:sync} Coordinator_VoteNo(xid, mid, pair);
  }
}

procedure {:left} {:layer 9} atomic_Coordinator_VoteYes(xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
  modifies state, B;
{
  assert !UnallocatedXids[xid];
  assert pair(xid, mid, pair);
  assert xConsistent(state[xid]);
  B[pair] := true;
  if (*) {
    havoc state;
    assume xAllParticipantsInB(xid, B);
    assume xConsistentExtension(old (state)[xid], state[xid]);
    assume state == old (state)[xid := state[xid]];
  }
}

procedure {:yields} {:layer 8} {:refines "atomic_Coordinator_VoteYes"} {:yield_requires "YieldInv_8"} {:yield_requires "YieldUndecidedOrCommitted_8", xid, mid, pair} Coordinator_VoteYes(xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair) {
  var commit: bool;
  var i: Mid;
  var {:layer 8} snapshot: GState;

  assert {:layer 8} XidTrigger(xid);
  call snapshot := GhostRead_8();
  call {:layer 8} Lemma_add_to_set(B, pair);
  call {:layer 8} Lemma_all_in_set(B, xid);
  call commit := StateUpdateOnVoteYes(xid, mid, pair);
  call {:layer 8} Lemma_all_in_set(B, xid);
  assert {:layer 8} XidTrigger(xid);
  assert {:layer 8} NextStateTrigger(state[xid]);
  if (commit) {
    assert {:layer 8} xUndecidedOrCommitted(snapshot[xid]);
    assert {:layer 8} xUndecidedOrCommitted(state[xid]);
    i := 1;
    while (i <= numParticipants)
      invariant {:layer 8} {:cooperates} true;
      invariant {:layer 8} 1 <= i && i <= numParticipants + 1;
      invariant {:layer 8} Inv_8(state, B, votes);
      invariant {:layer 8} ExistsMonotoneExtension(snapshot, state, xid);
    {
      async call {:sync} Participant_Commit(xid, i);
      i := i + 1;
      assert {:layer 8} XidTrigger(xid);
      assert {:layer 8} NextStateTrigger(state[xid]);
    }
  }
  assert {:layer 8} XidTrigger(xid);
  assert {:layer 8} NextStateTrigger(state[xid]);
}

procedure {:left} {:layer 9} atomic_Coordinator_VoteNo(xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
  modifies state;
{
  assert !UnallocatedXids[xid];
  assert pair(xid, mid, pair);
  assert xUndecidedOrAborted(state[xid]);
  havoc state;
  assume xUndecidedOrAborted(state[xid]);
  assume xConsistentExtension(old (state)[xid], state[xid]);
  assume state == old (state)[xid := state[xid]];
}

procedure {:yields} {:layer 8} {:refines "atomic_Coordinator_VoteNo"} {:yield_requires "YieldAborted_8", xid, mid, pair} Coordinator_VoteNo(xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair) {
  var abort: bool;
  var i: int;
  var {:layer 8} snapshot: GState;

  call snapshot := GhostRead_8();
  call abort := StateUpdateOnVoteNo(xid, mid);
  assert {:layer 8} XidTrigger(xid);
  assert {:layer 8} NextStateTrigger(state[xid]);
  if (abort) {
    i := 1;
    while (i <= numParticipants)
      invariant {:layer 8} {:cooperates} true;
      invariant {:layer 8} 1 <= i && i <= numParticipants + 1;
      invariant {:layer 8} Aborted(state[xid][CoordinatorMid]);
      invariant {:layer 8} xUndecidedOrAborted(state[xid]);
      invariant {:layer 8} ExistsMonotoneExtension(snapshot, state, xid);
    {
      async call {:sync} Participant_Abort(xid, i);
      i := i + 1;
      assert {:layer 8} XidTrigger(xid);
      assert {:layer 8} NextStateTrigger(state[xid]);
    }
  }
  assert {:layer 8} XidTrigger(xid);
  assert {:layer 8} NextStateTrigger(state[xid]);
}

procedure {:yields} {:layer 7} {:refines "atomic_SetParticipantAborted"} SetParticipantAborted(xid: Xid, mid: Mid, {:linear "pair"} pair: Pair);

procedure {:yields} {:layer 7} {:refines "atomic_StateUpdateOnVoteYes"} StateUpdateOnVoteYes(xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair) returns (commit: bool);

procedure {:yields} {:layer 7} {:refines "atomic_StateUpdateOnVoteNo"} StateUpdateOnVoteNo(xid: Xid, mid: Mid) returns (abort: bool);

procedure {:yields} {:layer 7} {:refines "atomic_Participant_Commit"} Participant_Commit(xid: Xid, mid: Mid);

procedure {:yields} {:layer 7} {:refines "atomic_Participant_Abort"} Participant_Abort(xid: Xid, mid: Mid);

procedure {:atomic} {:layer 8, 9} atomic_SetParticipantAborted(xid: Xid, mid: Mid, {:linear "pair"} pair: Pair)
  modifies state;
{
  assert pair(xid, mid, pair);
  assert xUndecidedOrAborted(state[xid]);
  state[xid][mid] := ABORTED();
}

procedure {:atomic} {:layer 8} atomic_StateUpdateOnVoteYes(xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair) returns (commit: bool)
  modifies votes, state, B;
{
  assert !UnallocatedXids[xid];
  assert VotesEqCoordinatorState(votes, state, xid);
  B[pair] := true;
  if (votes[xid] == -1) {
    commit := false;
  } else {
    votes[xid] := votes[xid] + 1;
    commit := votes[xid] == numParticipants;
    state[xid][CoordinatorMid] := if commit then COMMITTED() else state[xid][CoordinatorMid];
  }
}

procedure {:atomic} {:layer 8} atomic_StateUpdateOnVoteNo(xid: Xid, mid: Mid) returns (abort: bool)
  modifies votes, state;
{
  assert !UnallocatedXids[xid];
  assert !Committed(state[xid][CoordinatorMid]);
  abort := votes[xid] != -1;
  votes[xid] := -1;
  state[xid][CoordinatorMid] := if abort then ABORTED() else state[xid][CoordinatorMid];
}

procedure {:left} {:layer 8} atomic_Participant_Commit(xid: Xid, mid: Mid)
  modifies state;
{
  assert participantMid(mid);
  assert xUndecidedOrCommitted(state[xid]);
  assert Committed(state[xid][CoordinatorMid]);
  state[xid][mid] := COMMITTED();
}

procedure {:left} {:layer 8} atomic_Participant_Abort(xid: Xid, mid: Mid)
  modifies state;
{
  assert participantMid(mid);
  assert xUndecidedOrAborted(state[xid]);
  assert Aborted(state[xid][CoordinatorMid]);
  state[xid][mid] := ABORTED();
}

procedure {:yields} {:layer 7} {:refines "atomic_AllocateXid"} AllocateXid() returns (xid: Xid, {:linear "pair"} pairs: [Pair]bool);

procedure {:yields} {:layer 7} {:refines "atomic_TransferPair"} TransferPair(xid: Xid, mid: Mid, {:linear_in "pair"} inPairs: [Pair]bool) returns ({:linear "pair"} pairs: [Pair]bool, {:linear "pair"} pair: Pair);

procedure {:atomic} {:layer 8, 10} atomic_AllocateXid() returns (xid: Xid, {:linear "pair"} pairs: [Pair]bool)
  modifies UnallocatedXids;
{
  assume UnallocatedXids[xid];
  assume state[xid] == (lambda j: Mid :: UNDECIDED());
  pairs := (lambda p: Pair :: pair(xid, mid#Pair(p), p));
  UnallocatedXids[xid] := false;
}

procedure {:both} {:layer 8, 10} atomic_TransferPair(xid: Xid, mid: Mid, {:linear_in "pair"} inPairs: [Pair]bool) returns ({:linear "pair"} pairs: [Pair]bool, {:linear "pair"} pair: Pair) {
  assert inPairs[Pair(xid, mid)];
  pair := Pair(xid, mid);
  pairs := inPairs[pair := false];
}

function {:inline} {:linear "pair"} XidSetCollector(xids: [Xid]bool): [Pair]bool {
  (lambda p: Pair :: xids[xid#Pair(p)])
}

function card(pairs: [Pair]bool, xid: Xid): int;

procedure {:lemma} Lemma_add_to_set(set: [Pair]bool, pair: Pair);
  requires participantMid(mid#Pair(pair));
  requires !set[pair];
  ensures (forall xid: Xid :: card(set[pair := true], xid) == (if xid == xid#Pair(pair) then card(set, xid) + 1 else card(set, xid)));

procedure {:lemma} Lemma_all_in_set(set: [Pair]bool, xid: Xid);
  requires SetInv(set);
  ensures card(set, xid) >= numParticipants ==> (forall mid: Mid :: participantMid(mid) ==> set[Pair(xid, mid)]);

[Input - ../../vendor/boogie/Test/civl/async/2pc-triggers.bpl]
// RUN: %boogie "%s" > "%t"
// RUN: %diff "%s.expect" "%t"

// ###########################################################################
// Type declarations

// Transaction and Machine IDs
type Xid = int;
type Mid = int;

const CoordinatorMid : Mid;
axiom CoordinatorMid == 0;
function coordinatorMid (mid : Mid) : bool { mid == CoordinatorMid }

const numParticipants : int;
axiom 0 < numParticipants;
function participantMid (mid : Mid) : bool { 1 <= mid && mid <= numParticipants }

type {:datatype} {:linear "pair"} Pair;
function {:constructor} Pair (xid: Xid, mid: Mid) : Pair;

function {:inline} pair (xid: Xid, mid: Mid, p: Pair) : bool
{ p == Pair(xid, mid) && participantMid(mid#Pair(p)) }

// Transaction State
type MState = int;
function {:inline} ABORTED   () : int { 0 }
function {:inline} UNDECIDED () : int { 1 }
function {:inline} COMMITTED () : int { 2 }
function {:inline} Aborted   (i:MState) : bool { i == ABORTED() }
function {:inline} Undecided (i:MState) : bool { i == UNDECIDED() }
function {:inline} Committed (i:MState) : bool { i == COMMITTED() }
function {:inline} UndecidedOrAborted   (i:MState) : bool { Undecided(i) || Aborted(i) }
function {:inline} UndecidedOrCommitted (i:MState) : bool { Undecided(i) || Committed(i) }

type XState = [Mid]MState;
type GState = [Xid]XState;

// ###########################################################################
// Global shared variables

var {:layer 0,11} state : GState;
var {:layer 7,8} votes : [Xid]int;

var {:linear "pair"} {:layer 7,9} B : [Pair]bool;
var {:layer 7,10}{:linear "pair"} UnallocatedXids: [Xid]bool;

// ###########################################################################
// Consistency Predicates

// Transaction (indicated by prefix x)

function {:inline} xUndecided (state: XState) : bool
{
  Undecided(state[CoordinatorMid]) &&
  (forall i : Mid :: participantMid(i) ==> Undecided(state[i]))
}

function {:inline} xUndecidedOrCommitted (state: XState) : bool
{
  UndecidedOrCommitted(state[CoordinatorMid]) &&
  (forall i : Mid :: participantMid(i) ==> UndecidedOrCommitted(state[i]))
}

function {:inline} xUndecidedOrAborted (state: XState) : bool
{
  UndecidedOrAborted(state[CoordinatorMid]) &&
  (forall i : Mid :: participantMid(i) ==> UndecidedOrAborted(state[i]))
}

function {:inline} xConsistent (state: XState) : bool
{
  xUndecidedOrCommitted(state) || xUndecidedOrAborted(state)
}

function {:inline} xNoUndoneDecision (oldState: XState, newState: XState) : bool
{
  (newState[CoordinatorMid] == oldState[CoordinatorMid] || Undecided(oldState[CoordinatorMid])) &&
  (forall i : Mid :: {participantMid(i)} participantMid(i) ==> (newState[i] == oldState[i] || Undecided(oldState[i])))
}

function {:inline} xConsistentExtension (oldState: XState, newState: XState) : bool
{
  xConsistent(newState) &&
  xNoUndoneDecision(oldState, newState)
}

function {:inline} xAllParticipantsInB (xid: Xid, B: [Pair]bool) : bool
{
  (forall mid: Mid :: participantMid(mid) ==> B[Pair(xid, mid)])
}

// Globally across transactions (indicated by prefix g)

function {:inline} gUndecided (state: GState) : bool
{
  (forall j: Xid :: xUndecided(state[j]))
}

function {:inline} gConsistent (state: GState) : bool
{
  (forall j: Xid :: xConsistent(state[j]))
}

// Helper predicates

function NextStateTrigger (XState): bool
{
    true
}

function XidTrigger (xid: Xid): bool
{
    true
}

function {:inline} ExistsMonotoneExtension (snapshot: GState, state: GState, xid: Xid) : bool
{
  (exists newState: XState :: {NextStateTrigger(newState)}
    state == snapshot[xid := newState] && xNoUndoneDecision(snapshot[xid],newState))
}

function {:inline} VotesEqCoordinatorState (votes: [Xid]int, state: GState, xid: Xid) : bool
{
     ( (votes[xid] == -1)                                == Aborted  (state[xid][CoordinatorMid]) )
  && ( (0 <= votes[xid] && votes[xid] < numParticipants) == Undecided(state[xid][CoordinatorMid]) )
  && ( (votes[xid] == numParticipants)                   == Committed(state[xid][CoordinatorMid]) )
}

// ###########################################################################
// Yield assertions

function {:inline} SetInv (B: [Pair]bool) : bool
{
  (forall xid: Xid, mid: Mid :: B[Pair(xid,mid)] ==> participantMid(mid))
}

function {:inline} Inv_8 (state: GState, B: [Pair]bool, votes: [Xid]int) : bool
{
     gConsistent(state)
  && SetInv(B)
  && (forall xid: Xid :: {XidTrigger(xid)} XidTrigger(xid) ==> VotesEqCoordinatorState(votes, state, xid))
  && (forall xid: Xid :: {XidTrigger(xid)} XidTrigger(xid) ==> votes[xid] == -1 || votes[xid] == card(B, xid))
  && (forall p: Pair :: B[p] && votes[xid#Pair(p)] != -1 ==> UndecidedOrCommitted(state[xid#Pair(p)][mid#Pair(p)]))
}

function {:inline} Inv_9 (state: GState, B: [Pair]bool, xid: Xid) : bool
{
     gConsistent(state)
  && (xAllParticipantsInB(xid, B) || xUndecidedOrAborted(state[xid]))
}

procedure {:yield_invariant} {:layer 8} YieldInv_8 ();
requires Inv_8(state, B, votes);

procedure {:yield_invariant} {:layer 8} YieldUndecidedOrCommitted_8 (xid: Xid, mid: Mid, {:linear "pair"} pair: Pair);
requires pair(xid, mid, pair) && (votes[xid] == -1 || UndecidedOrCommitted(state[xid][mid]));

procedure {:yield_invariant} {:layer 8} YieldAborted_8 (xid: Xid, mid: Mid, {:linear "pair"} pair: Pair);
requires pair(xid, mid, pair) && Aborted(state[xid][mid]);

procedure {:yield_invariant} {:layer 9} YieldInv_9 (xid: Xid);
requires Inv_9(state, B, xid);

procedure {:yield_invariant} {:layer 9} YieldConsistent_9 ();
requires gConsistent(state);

procedure {:yield_invariant} {:layer 10} YieldConsistent_10 ();
requires gConsistent(state);

// ###########################################################################

function
{:witness "state"}
{:commutativity "atomic_Coordinator_VoteNo","atomic_Coordinator_VoteNo"}
{:commutativity "atomic_Coordinator_VoteYes","atomic_Coordinator_VoteNo"}
{:commutativity "atomic_Coordinator_VoteNo","atomic_Coordinator_VoteYes"}
{:commutativity "atomic_Coordinator_VoteYes","atomic_Coordinator_VoteYes"}
{:commutativity "atomic_SetParticipantAborted","atomic_Coordinator_VoteYes"}
{:commutativity "atomic_SetParticipantAborted","atomic_Coordinator_VoteNo"}
{:commutativity "atomic_Participant_VoteReq","atomic_Participant_VoteReq"}
witness (state:GState, state':GState, second_xid:Xid) : GState
{
   state[second_xid := state'[second_xid]]
}

// ###########################################################################
// Main

procedure {:yields} {:layer 11}
{:yield_requires "YieldInv_8"}
{:yield_requires "YieldConsistent_9"}
{:yield_requires "YieldConsistent_10"}
main ()
{
  var xid: Xid;
  while (*)
  invariant {:yields}{:layer 8,9,10,11}
    {:yield_loop "YieldInv_8"}
    {:yield_loop "YieldConsistent_9"}
    {:yield_loop "YieldConsistent_10"}
    true;
  {
    call xid := Coordinator_TransactionReq();
  }
}

// ###########################################################################
// Event Handlers

procedure {:intro} {:layer 8} GhostRead_8() returns (snapshot: GState)
{
   snapshot := state;
}

procedure {:intro} {:layer 10} GhostRead_10() returns (snapshot: GState)
{
   snapshot := state;
}

procedure {:atomic} {:layer 11} atomic_Coordinator_TransactionReq () returns (xid: Xid)
modifies state;
{
  havoc state;
  assume xConsistent(state[xid]);
  assume state == old(state)[xid := state[xid]];
}

procedure {:yields} {:layer 10} {:refines "atomic_Coordinator_TransactionReq"}
{:yield_preserves "YieldInv_8"}
{:yield_preserves "YieldConsistent_9"}
{:yield_preserves "YieldConsistent_10"}
Coordinator_TransactionReq () returns (xid: Xid)
{
  var {:linear "pair"} pair: Pair;
  var {:linear "pair"} pairs: [Pair]bool;
  var {:layer 10} snapshot: GState;
  var i : Mid;

  call xid, pairs := AllocateXid();
  assert {:layer 10} NextStateTrigger(state[xid]);
  call snapshot := GhostRead_10();
  i := 1;
  while (i <= numParticipants)
  invariant {:cooperates} {:layer 8,9,10} true;
  invariant {:layer 8} Inv_8(state, B, votes);
  invariant {:layer 8,10} pairs == (lambda p: Pair :: pair(xid, mid#Pair(p), p) && i <= mid#Pair(p));
  invariant {:layer 8} votes[xid] == -1 || (forall p: Pair :: pairs[p] ==> UndecidedOrCommitted(state[xid][mid#Pair(p)]));
  invariant {:layer 9} Inv_9(state, B, xid);
  invariant {:layer 10} gConsistent(state);
  invariant {:layer 10} ExistsMonotoneExtension(snapshot, state, xid);
  invariant {:layer 10} 1 <= i && i <= numParticipants + 1;
  {
    call pairs, pair := TransferPair(xid, i, pairs);
    async call {:sync} Participant_VoteReq(xid, i, pair);
    i := i + 1;
    assert {:layer 10} NextStateTrigger(state[xid]);
  }
}

// ---------------------------------------------------------------------------

procedure {:left} {:layer 10} atomic_Participant_VoteReq (xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
modifies state;
{
  assert !UnallocatedXids[xid];
  assert pair(xid, mid, pair);
  assert xConsistent(state[xid]);
  havoc state;
  assume xConsistentExtension(old(state)[xid], state[xid]);
  assume state == old(state)[xid := state[xid]];
}

procedure {:yields} {:layer 9} {:refines "atomic_Participant_VoteReq"}
{:yield_requires "YieldInv_8"}
{:yield_requires "YieldUndecidedOrCommitted_8", xid, mid, pair}
{:yield_requires "YieldInv_9", xid}
Participant_VoteReq (xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
{
  if (*) {
    async call {:sync} Coordinator_VoteYes(xid, mid, pair);
  } else {
    call SetParticipantAborted(xid, mid, pair);
    async call {:sync} Coordinator_VoteNo(xid, mid, pair);
  }
}

// ---------------------------------------------------------------------------

procedure {:left} {:layer 9} atomic_Coordinator_VoteYes (xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
modifies state, B;
{
  assert !UnallocatedXids[xid];
  assert pair(xid, mid, pair);
  assert xConsistent(state[xid]);
  B[pair] := true;
  if (*) {
    havoc state;
    assume xAllParticipantsInB(xid, B);
    assume xConsistentExtension(old(state)[xid], state[xid]);
    assume state == old(state)[xid := state[xid]];
  }
}

procedure {:yields} {:layer 8} {:refines "atomic_Coordinator_VoteYes"}
{:yield_requires "YieldInv_8"}
{:yield_requires "YieldUndecidedOrCommitted_8", xid, mid, pair}
Coordinator_VoteYes (xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
{
  var commit : bool;
  var i : Mid;
  var {:layer 8} snapshot: GState;

  assert {:layer 8} XidTrigger(xid);
  call snapshot := GhostRead_8();
  call {:layer 8} Lemma_add_to_set(B, pair);
  call {:layer 8} Lemma_all_in_set(B, xid);
  call commit := StateUpdateOnVoteYes(xid, mid, pair);
  call {:layer 8} Lemma_all_in_set(B, xid);
  assert {:layer 8} XidTrigger(xid);
  assert {:layer 8} NextStateTrigger(state[xid]);

  if (commit)
  {
    assert {:layer 8} xUndecidedOrCommitted(snapshot[xid]);
    assert {:layer 8} xUndecidedOrCommitted(state[xid]);
    i := 1;
    while (i <= numParticipants)
    invariant {:layer 8} {:cooperates} true;
    invariant {:layer 8} 1 <= i && i <= numParticipants + 1;
    invariant {:layer 8} Inv_8(state, B, votes);
    invariant {:layer 8} ExistsMonotoneExtension(snapshot, state, xid);
    {
      async call {:sync} Participant_Commit(xid, i);
      i := i + 1;
      assert {:layer 8} XidTrigger(xid);
      assert {:layer 8} NextStateTrigger(state[xid]);
    }
  }
  assert {:layer 8} XidTrigger(xid);
  assert {:layer 8} NextStateTrigger(state[xid]);
}

procedure {:left} {:layer 9} atomic_Coordinator_VoteNo (xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
modifies state;
{
  assert !UnallocatedXids[xid];
  assert pair(xid, mid, pair);
  assert xUndecidedOrAborted(state[xid]);
  havoc state;
  assume xUndecidedOrAborted(state[xid]);
  assume xConsistentExtension(old(state)[xid], state[xid]);
  assume state == old(state)[xid := state[xid]];
}

procedure {:yields} {:layer 8} {:refines "atomic_Coordinator_VoteNo"}
{:yield_requires "YieldAborted_8", xid, mid, pair}
Coordinator_VoteNo (xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair)
{
  var abort : bool;
  var i : int;
  var {:layer 8} snapshot: GState;

  call snapshot := GhostRead_8();
  call abort := StateUpdateOnVoteNo(xid, mid);
  assert {:layer 8} XidTrigger(xid);
  assert {:layer 8} NextStateTrigger(state[xid]);

  if (abort)
  {
    i := 1;
    while (i <= numParticipants)
    invariant {:layer 8} {:cooperates} true;
    invariant {:layer 8} 1 <= i && i <= numParticipants + 1;
    invariant {:layer 8} Aborted(state[xid][CoordinatorMid]);
    invariant {:layer 8} xUndecidedOrAborted(state[xid]);
    invariant {:layer 8} ExistsMonotoneExtension(snapshot, state, xid);
    {
      async call {:sync} Participant_Abort(xid, i);
      i := i + 1;
      assert {:layer 8} XidTrigger(xid);
      assert {:layer 8} NextStateTrigger(state[xid]);
    }
  }
  assert {:layer 8} XidTrigger(xid);
  assert {:layer 8} NextStateTrigger(state[xid]);
}

// ---------------------------------------------------------------------------

procedure {:yields} {:layer 7} {:refines "atomic_SetParticipantAborted"} SetParticipantAborted (xid: Xid, mid: Mid, {:linear "pair"} pair: Pair);
procedure {:yields} {:layer 7} {:refines "atomic_StateUpdateOnVoteYes"} StateUpdateOnVoteYes (xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair) returns (commit : bool);
procedure {:yields} {:layer 7} {:refines "atomic_StateUpdateOnVoteNo"} StateUpdateOnVoteNo (xid: Xid, mid: Mid) returns (abort : bool);
procedure {:yields} {:layer 7} {:refines "atomic_Participant_Commit"} Participant_Commit (xid : Xid, mid : Mid);
procedure {:yields} {:layer 7} {:refines "atomic_Participant_Abort"} Participant_Abort (xid : Xid, mid : Mid);

procedure {:atomic} {:layer 8,9} atomic_SetParticipantAborted (xid: Xid, mid: Mid, {:linear "pair"} pair: Pair)
modifies state;
{
  assert pair(xid, mid, pair);
  assert xUndecidedOrAborted(state[xid]);
  state[xid][mid] := ABORTED();
}

procedure {:atomic} {:layer 8} atomic_StateUpdateOnVoteYes (xid: Xid, mid: Mid, {:linear_in "pair"} pair: Pair) returns (commit : bool)
modifies votes, state, B;
{
  assert !UnallocatedXids[xid];
  assert VotesEqCoordinatorState(votes, state, xid);
  B[pair] := true;
  if (votes[xid] == -1) {
    commit := false;
  } else {
    votes[xid] := votes[xid] + 1;
    commit := (votes[xid] == numParticipants);
    state[xid][CoordinatorMid] := (if commit then COMMITTED() else state[xid][CoordinatorMid]);
  }
}

procedure {:atomic} {:layer 8} atomic_StateUpdateOnVoteNo (xid: Xid, mid: Mid) returns (abort : bool)
modifies votes, state;
{
  assert !UnallocatedXids[xid];
  assert !Committed(state[xid][CoordinatorMid]);
  abort := (votes[xid] != -1);
  votes[xid] := -1;
  state[xid][CoordinatorMid] := (if abort then ABORTED() else state[xid][CoordinatorMid]);
}

// ---------------------------------------------------------------------------

procedure {:left} {:layer 8} atomic_Participant_Commit (xid : Xid, mid : Mid)
modifies state;
{
  assert participantMid(mid);
  assert xUndecidedOrCommitted(state[xid]);
  assert Committed(state[xid][CoordinatorMid]);
  state[xid][mid] := COMMITTED();
}

procedure {:left} {:layer 8} atomic_Participant_Abort (xid : Xid, mid : Mid)
modifies state;
{
  assert participantMid(mid);
  assert xUndecidedOrAborted(state[xid]);
  assert Aborted(state[xid][CoordinatorMid]);
  state[xid][mid] := ABORTED();
}

// ###########################################################################
// Linear variable allocation

procedure {:yields} {:layer 7} {:refines "atomic_AllocateXid"} AllocateXid () returns (xid: Xid, {:linear "pair"} pairs: [Pair]bool);
procedure {:yields} {:layer 7} {:refines "atomic_TransferPair"} TransferPair (xid: Xid, mid: Mid, {:linear_in "pair"} inPairs: [Pair]bool) returns ({:linear "pair"} pairs: [Pair]bool, {:linear "pair"} pair: Pair);

procedure {:atomic} {:layer 8,10} atomic_AllocateXid () returns (xid: Xid, {:linear "pair"} pairs: [Pair]bool)
modifies UnallocatedXids;
{
  assume UnallocatedXids[xid];
  assume state[xid] == (lambda j: Mid :: UNDECIDED());
  pairs := (lambda p: Pair :: pair(xid, mid#Pair(p), p));
  UnallocatedXids[xid] := false;
}

procedure {:both} {:layer 8,10} atomic_TransferPair (xid: Xid, mid: Mid, {:linear_in "pair"} inPairs: [Pair]bool) returns ({:linear "pair"} pairs: [Pair]bool, {:linear "pair"} pair: Pair)
{
  assert inPairs[Pair(xid, mid)];
  pair := Pair(xid, mid);
  pairs := inPairs[pair := false];
}

// ###########################################################################
// Collectors for linear domains

function {:inline} {:linear "pair"} XidSetCollector(xids: [Xid]bool) : [Pair]bool
{
  (lambda p: Pair :: xids[xid#Pair(p)])
}

// ############################################################################
// Lemmas about cardinality

function card(pairs: [Pair]bool, xid: Xid) : int;

procedure {:lemma} Lemma_add_to_set (set: [Pair]bool, pair: Pair);
requires participantMid(mid#Pair(pair));
requires !set[pair];
ensures (forall xid: Xid :: card(set[pair := true], xid) == (if xid == xid#Pair(pair) then card(set, xid) + 1 else card(set, xid)));

procedure {:lemma} Lemma_all_in_set (set: [Pair]bool, xid: Xid);
requires SetInv(set);
ensures card(set, xid) >= numParticipants ==> (forall mid: Mid :: participantMid(mid) ==> set[Pair(xid, mid)]);
